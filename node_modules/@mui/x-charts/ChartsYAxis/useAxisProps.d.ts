import { ChartsYAxisProps } from "../models/axis.js";
import { ChartsText, ChartsTextProps } from "../ChartsText/index.js";
export declare const useAxisProps: (inProps: ChartsYAxisProps) => {
  yScale: import("@mui/x-charts-vendor/d3-scale").ScaleTime<number, number, never> | import("@mui/x-charts-vendor/d3-scale").ScaleLinear<number, number, never> | import("@mui/x-charts-vendor/d3-scale").ScaleLogarithmic<number, number, never> | import("@mui/x-charts-vendor/d3-scale").ScaleSymLog<number, number, never> | import("@mui/x-charts-vendor/d3-scale").ScalePower<number, number, never> | import("@mui/x-charts-vendor/d3-scale").ScaleBand<string | number | Date> | import("@mui/x-charts-vendor/d3-scale").ScalePoint<string | number | Date>;
  defaultizedProps: {
    axis?: "y";
    axisId?: import("../internals/index.js").AxisId;
    disableLine: boolean;
    disableTicks: boolean;
    fill?: string;
    tickLabelStyle?: ChartsTextProps["style"];
    labelStyle?: ChartsTextProps["style"];
    tickLabelInterval?: "auto" | ((value: any, index: number) => boolean);
    label?: string;
    stroke?: string;
    tickSize: number;
    classes?: Partial<import("../index.js").ChartsAxisClasses>;
    slots?: Partial<import("../internals/index.js").ChartsAxisSlots>;
    slotProps?: Partial<import("../internals/index.js").ChartsAxisSlotProps>;
    sx?: import("@mui/system").SxProps;
    tickMaxStep?: number;
    tickMinStep?: number;
    tickNumber?: number;
    tickInterval?: "auto" | ((value: any, index: number) => boolean) | any[];
    tickPlacement?: "start" | "end" | "middle" | "extremities";
    tickLabelPlacement?: "middle" | "tick";
    data?: readonly any[] | undefined;
    position?: "left" | "right" | "none";
    width: number;
    zoom: import("../internals/index.js").DefaultizedZoomOptions | undefined;
    id: import("../internals/index.js").AxisId;
    valueFormatter?: (<TScaleName extends keyof import("../internals/index.js").AxisScaleConfig>(value: any, context: import("../index.js").AxisValueFormatterContext<TScaleName>) => string) | undefined;
    dataKey?: string | undefined;
    min?: (number | Date) | undefined;
    max?: (number | Date) | undefined;
    colorMap?: import("../models/colorMapping.js").ContinuousColorConfig<number | Date> | import("../models/colorMapping.js").PiecewiseColorConfig<number | Date> | undefined;
    hideTooltip?: boolean | undefined;
    domainLimit?: "nice" | "strict" | ((min: number, max: number) => {
      min: number;
      max: number;
    }) | undefined;
    ignoreTooltip?: boolean | undefined;
    offset: number;
    scaleType: "time";
    colorScale?: import("@mui/x-charts-vendor/d3-scale").ScaleSequential<string, string | null> | import("@mui/x-charts-vendor/d3-scale").ScaleThreshold<number | Date, string | null>;
    triggerTooltip?: boolean;
  } | {
    axis?: "y";
    axisId?: import("../internals/index.js").AxisId;
    disableLine: boolean;
    disableTicks: boolean;
    fill?: string;
    tickLabelStyle?: ChartsTextProps["style"];
    labelStyle?: ChartsTextProps["style"];
    tickLabelInterval?: "auto" | ((value: any, index: number) => boolean);
    label?: string;
    stroke?: string;
    tickSize: number;
    classes?: Partial<import("../index.js").ChartsAxisClasses>;
    slots?: Partial<import("../internals/index.js").ChartsAxisSlots>;
    slotProps?: Partial<import("../internals/index.js").ChartsAxisSlotProps>;
    sx?: import("@mui/system").SxProps;
    tickMaxStep?: number;
    tickMinStep?: number;
    tickNumber?: number;
    tickInterval?: "auto" | ((value: any, index: number) => boolean) | any[];
    tickPlacement?: "start" | "end" | "middle" | "extremities";
    tickLabelPlacement?: "middle" | "tick";
    data?: readonly any[] | undefined;
    position?: "left" | "right" | "none";
    width: number;
    zoom: import("../internals/index.js").DefaultizedZoomOptions | undefined;
    id: import("../internals/index.js").AxisId;
    valueFormatter?: (<TScaleName extends keyof import("../internals/index.js").AxisScaleConfig>(value: any, context: import("../index.js").AxisValueFormatterContext<TScaleName>) => string) | undefined;
    dataKey?: string | undefined;
    min?: (number | Date) | undefined;
    max?: (number | Date) | undefined;
    colorMap?: import("../models/colorMapping.js").ContinuousColorConfig<number | Date> | import("../models/colorMapping.js").PiecewiseColorConfig<number | Date> | undefined;
    hideTooltip?: boolean | undefined;
    domainLimit?: "nice" | "strict" | ((min: number, max: number) => {
      min: number;
      max: number;
    }) | undefined;
    ignoreTooltip?: boolean | undefined;
    offset: number;
    scaleType: "time";
    colorScale?: import("@mui/x-charts-vendor/d3-scale").ScaleSequential<string, string | null> | import("@mui/x-charts-vendor/d3-scale").ScaleThreshold<number, string | null>;
    triggerTooltip?: boolean;
  } | {
    axis?: "y";
    axisId?: import("../internals/index.js").AxisId;
    disableLine: boolean;
    disableTicks: boolean;
    fill?: string;
    tickLabelStyle?: ChartsTextProps["style"];
    labelStyle?: ChartsTextProps["style"];
    tickLabelInterval?: "auto" | ((value: any, index: number) => boolean);
    label?: string;
    stroke?: string;
    tickSize: number;
    classes?: Partial<import("../index.js").ChartsAxisClasses>;
    slots?: Partial<import("../internals/index.js").ChartsAxisSlots>;
    slotProps?: Partial<import("../internals/index.js").ChartsAxisSlotProps>;
    sx?: import("@mui/system").SxProps;
    tickMaxStep?: number;
    tickMinStep?: number;
    tickNumber?: number;
    tickInterval?: "auto" | ((value: any, index: number) => boolean) | any[];
    tickPlacement?: "start" | "end" | "middle" | "extremities";
    tickLabelPlacement?: "middle" | "tick";
    data?: readonly any[] | undefined;
    position?: "left" | "right" | "none";
    width: number;
    zoom: import("../internals/index.js").DefaultizedZoomOptions | undefined;
    id: import("../internals/index.js").AxisId;
    valueFormatter?: (<TScaleName extends keyof import("../internals/index.js").AxisScaleConfig>(value: any, context: import("../index.js").AxisValueFormatterContext<TScaleName>) => string) | undefined;
    dataKey?: string | undefined;
    min?: (number | Date) | undefined;
    max?: (number | Date) | undefined;
    colorMap?: import("../models/colorMapping.js").ContinuousColorConfig<number | Date> | import("../models/colorMapping.js").PiecewiseColorConfig<number | Date> | undefined;
    hideTooltip?: boolean | undefined;
    domainLimit?: "nice" | "strict" | ((min: number, max: number) => {
      min: number;
      max: number;
    }) | undefined;
    ignoreTooltip?: boolean | undefined;
    offset: number;
    scaleType: "time";
    colorScale?: import("@mui/x-charts-vendor/d3-scale").ScaleOrdinal<string | number | Date, string, string | null> | import("@mui/x-charts-vendor/d3-scale").ScaleOrdinal<number, string, string | null> | import("@mui/x-charts-vendor/d3-scale").ScaleSequential<string, string | null> | import("@mui/x-charts-vendor/d3-scale").ScaleThreshold<number | Date, string | null>;
    triggerTooltip?: boolean;
  } | {
    axis?: "y";
    axisId?: import("../internals/index.js").AxisId;
    disableLine: boolean;
    disableTicks: boolean;
    fill?: string;
    tickLabelStyle?: ChartsTextProps["style"];
    labelStyle?: ChartsTextProps["style"];
    tickLabelInterval?: "auto" | ((value: any, index: number) => boolean);
    label?: string;
    stroke?: string;
    tickSize: number;
    classes?: Partial<import("../index.js").ChartsAxisClasses>;
    slots?: Partial<import("../internals/index.js").ChartsAxisSlots>;
    slotProps?: Partial<import("../internals/index.js").ChartsAxisSlotProps>;
    sx?: import("@mui/system").SxProps;
    tickMaxStep?: number;
    tickMinStep?: number;
    tickNumber?: number;
    tickInterval?: "auto" | ((value: any, index: number) => boolean) | any[];
    tickPlacement?: "start" | "end" | "middle" | "extremities";
    tickLabelPlacement?: "middle" | "tick";
    data?: readonly any[] | undefined;
    position?: "left" | "right" | "none";
    width: number;
    zoom: import("../internals/index.js").DefaultizedZoomOptions | undefined;
    id: import("../internals/index.js").AxisId;
    valueFormatter?: (<TScaleName extends keyof import("../internals/index.js").AxisScaleConfig>(value: any, context: import("../index.js").AxisValueFormatterContext<TScaleName>) => string) | undefined;
    dataKey?: string | undefined;
    min?: (number | Date) | undefined;
    max?: (number | Date) | undefined;
    colorMap?: import("../models/colorMapping.js").ContinuousColorConfig<number | Date> | import("../models/colorMapping.js").PiecewiseColorConfig<number | Date> | undefined;
    hideTooltip?: boolean | undefined;
    domainLimit?: "nice" | "strict" | ((min: number, max: number) => {
      min: number;
      max: number;
    }) | undefined;
    ignoreTooltip?: boolean | undefined;
    offset: number;
    scaleType: "time";
    colorScale?: import("@mui/x-charts-vendor/d3-scale").ScaleOrdinal<string | number | Date, string, string | null> | import("@mui/x-charts-vendor/d3-scale").ScaleOrdinal<number, string, string | null> | import("@mui/x-charts-vendor/d3-scale").ScaleSequential<string, string | null> | import("@mui/x-charts-vendor/d3-scale").ScaleThreshold<number | Date, string | null>;
    triggerTooltip?: boolean;
  } | {
    axis?: "y";
    axisId?: import("../internals/index.js").AxisId;
    disableLine: boolean;
    disableTicks: boolean;
    fill?: string;
    tickLabelStyle?: ChartsTextProps["style"];
    labelStyle?: ChartsTextProps["style"];
    tickLabelInterval?: "auto" | ((value: any, index: number) => boolean);
    label?: string;
    stroke?: string;
    tickSize: number;
    classes?: Partial<import("../index.js").ChartsAxisClasses>;
    slots?: Partial<import("../internals/index.js").ChartsAxisSlots>;
    slotProps?: Partial<import("../internals/index.js").ChartsAxisSlotProps>;
    sx?: import("@mui/system").SxProps;
    tickMaxStep?: number;
    tickMinStep?: number;
    tickNumber?: number;
    tickInterval?: "auto" | ((value: any, index: number) => boolean) | any[];
    tickPlacement?: "start" | "end" | "middle" | "extremities";
    tickLabelPlacement?: "middle" | "tick";
    data?: readonly any[] | undefined;
    position?: "left" | "right" | "none";
    width: number;
    zoom: import("../internals/index.js").DefaultizedZoomOptions | undefined;
    id: import("../internals/index.js").AxisId;
    valueFormatter?: (<TScaleName extends keyof import("../internals/index.js").AxisScaleConfig>(value: any, context: import("../index.js").AxisValueFormatterContext<TScaleName>) => string) | undefined;
    dataKey?: string | undefined;
    min?: (number | Date) | undefined;
    max?: (number | Date) | undefined;
    colorMap?: import("../models/colorMapping.js").ContinuousColorConfig<number | Date> | import("../models/colorMapping.js").PiecewiseColorConfig<number | Date> | undefined;
    hideTooltip?: boolean | undefined;
    domainLimit?: "nice" | "strict" | ((min: number, max: number) => {
      min: number;
      max: number;
    }) | undefined;
    ignoreTooltip?: boolean | undefined;
    offset: number;
    scaleType: "time";
    colorScale?: import("@mui/x-charts-vendor/d3-scale").ScaleSequential<string, string | null> | import("@mui/x-charts-vendor/d3-scale").ScaleThreshold<number, string | null>;
    triggerTooltip?: boolean;
  } | {
    axis?: "y";
    axisId?: import("../internals/index.js").AxisId;
    disableLine: boolean;
    disableTicks: boolean;
    fill?: string;
    tickLabelStyle?: ChartsTextProps["style"];
    labelStyle?: ChartsTextProps["style"];
    tickLabelInterval?: "auto" | ((value: any, index: number) => boolean);
    label?: string;
    stroke?: string;
    tickSize: number;
    classes?: Partial<import("../index.js").ChartsAxisClasses>;
    slots?: Partial<import("../internals/index.js").ChartsAxisSlots>;
    slotProps?: Partial<import("../internals/index.js").ChartsAxisSlotProps>;
    sx?: import("@mui/system").SxProps;
    tickMaxStep?: number;
    tickMinStep?: number;
    tickNumber?: number;
    tickInterval?: "auto" | ((value: any, index: number) => boolean) | any[];
    tickPlacement?: "start" | "end" | "middle" | "extremities";
    tickLabelPlacement?: "middle" | "tick";
    data?: readonly any[] | undefined;
    position?: "left" | "right" | "none";
    width: number;
    zoom: import("../internals/index.js").DefaultizedZoomOptions | undefined;
    id: import("../internals/index.js").AxisId;
    valueFormatter?: (<TScaleName extends keyof import("../internals/index.js").AxisScaleConfig>(value: any, context: import("../index.js").AxisValueFormatterContext<TScaleName>) => string) | undefined;
    dataKey?: string | undefined;
    min?: (number | Date) | undefined;
    max?: (number | Date) | undefined;
    colorMap?: import("../models/colorMapping.js").ContinuousColorConfig<number | Date> | import("../models/colorMapping.js").PiecewiseColorConfig<number | Date> | undefined;
    hideTooltip?: boolean | undefined;
    domainLimit?: "nice" | "strict" | ((min: number, max: number) => {
      min: number;
      max: number;
    }) | undefined;
    ignoreTooltip?: boolean | undefined;
    offset: number;
    scaleType: "time";
    colorScale?: import("@mui/x-charts-vendor/d3-scale").ScaleSequential<string, string | null> | import("@mui/x-charts-vendor/d3-scale").ScaleThreshold<number, string | null>;
    triggerTooltip?: boolean;
  } | {
    axis?: "y";
    axisId?: import("../internals/index.js").AxisId;
    disableLine: boolean;
    disableTicks: boolean;
    fill?: string;
    tickLabelStyle?: ChartsTextProps["style"];
    labelStyle?: ChartsTextProps["style"];
    tickLabelInterval?: "auto" | ((value: any, index: number) => boolean);
    label?: string;
    stroke?: string;
    tickSize: number;
    classes?: Partial<import("../index.js").ChartsAxisClasses>;
    slots?: Partial<import("../internals/index.js").ChartsAxisSlots>;
    slotProps?: Partial<import("../internals/index.js").ChartsAxisSlotProps>;
    sx?: import("@mui/system").SxProps;
    tickMaxStep?: number;
    tickMinStep?: number;
    tickNumber?: number;
    tickInterval?: "auto" | ((value: any, index: number) => boolean) | any[];
    tickPlacement?: "start" | "end" | "middle" | "extremities";
    tickLabelPlacement?: "middle" | "tick";
    data?: readonly any[] | undefined;
    position?: "left" | "right" | "none";
    width: number;
    zoom: import("../internals/index.js").DefaultizedZoomOptions | undefined;
    id: import("../internals/index.js").AxisId;
    valueFormatter?: (<TScaleName extends keyof import("../internals/index.js").AxisScaleConfig>(value: any, context: import("../index.js").AxisValueFormatterContext<TScaleName>) => string) | undefined;
    dataKey?: string | undefined;
    min?: (number | Date) | undefined;
    max?: (number | Date) | undefined;
    colorMap?: import("../models/colorMapping.js").ContinuousColorConfig<number | Date> | import("../models/colorMapping.js").PiecewiseColorConfig<number | Date> | undefined;
    hideTooltip?: boolean | undefined;
    domainLimit?: "nice" | "strict" | ((min: number, max: number) => {
      min: number;
      max: number;
    }) | undefined;
    ignoreTooltip?: boolean | undefined;
    offset: number;
    scaleType: "time";
    colorScale?: import("@mui/x-charts-vendor/d3-scale").ScaleSequential<string, string | null> | import("@mui/x-charts-vendor/d3-scale").ScaleThreshold<number, string | null>;
    triggerTooltip?: boolean;
  } | {
    axis?: "y";
    axisId?: import("../internals/index.js").AxisId;
    disableLine: boolean;
    disableTicks: boolean;
    fill?: string;
    tickLabelStyle?: ChartsTextProps["style"];
    labelStyle?: ChartsTextProps["style"];
    tickLabelInterval?: "auto" | ((value: any, index: number) => boolean);
    label?: string;
    stroke?: string;
    tickSize: number;
    classes?: Partial<import("../index.js").ChartsAxisClasses>;
    slots?: Partial<import("../internals/index.js").ChartsAxisSlots>;
    slotProps?: Partial<import("../internals/index.js").ChartsAxisSlotProps>;
    sx?: import("@mui/system").SxProps;
    tickMaxStep?: number;
    tickMinStep?: number;
    tickNumber?: number;
    tickInterval?: "auto" | ((value: any, index: number) => boolean) | any[];
    tickPlacement?: "start" | "end" | "middle" | "extremities";
    tickLabelPlacement?: "middle" | "tick";
    data?: readonly any[] | undefined;
    position?: "left" | "right" | "none";
    width: number;
    zoom: import("../internals/index.js").DefaultizedZoomOptions | undefined;
    id: import("../internals/index.js").AxisId;
    valueFormatter?: (<TScaleName extends keyof import("../internals/index.js").AxisScaleConfig>(value: any, context: import("../index.js").AxisValueFormatterContext<TScaleName>) => string) | undefined;
    dataKey?: string | undefined;
    min?: (number | Date) | undefined;
    max?: (number | Date) | undefined;
    colorMap?: import("../models/colorMapping.js").ContinuousColorConfig<number | Date> | import("../models/colorMapping.js").PiecewiseColorConfig<number | Date> | undefined;
    hideTooltip?: boolean | undefined;
    domainLimit?: "nice" | "strict" | ((min: number, max: number) => {
      min: number;
      max: number;
    }) | undefined;
    ignoreTooltip?: boolean | undefined;
    offset: number;
    scaleType: "time";
    colorScale?: import("@mui/x-charts-vendor/d3-scale").ScaleSequential<string, string | null> | import("@mui/x-charts-vendor/d3-scale").ScaleThreshold<number, string | null>;
    triggerTooltip?: boolean;
  } | {
    axis?: "y";
    axisId?: import("../internals/index.js").AxisId;
    disableLine: boolean;
    disableTicks: boolean;
    fill?: string;
    tickLabelStyle?: ChartsTextProps["style"];
    labelStyle?: ChartsTextProps["style"];
    tickLabelInterval?: "auto" | ((value: any, index: number) => boolean);
    label?: string;
    stroke?: string;
    tickSize: number;
    classes?: Partial<import("../index.js").ChartsAxisClasses>;
    slots?: Partial<import("../internals/index.js").ChartsAxisSlots>;
    slotProps?: Partial<import("../internals/index.js").ChartsAxisSlotProps>;
    sx?: import("@mui/system").SxProps;
    tickMaxStep?: number;
    tickMinStep?: number;
    tickNumber?: number;
    tickInterval?: "auto" | ((value: any, index: number) => boolean) | any[];
    tickPlacement?: "start" | "end" | "middle" | "extremities";
    tickLabelPlacement?: "middle" | "tick";
    data?: readonly any[] | undefined;
    position?: "left" | "right" | "none";
    width: number;
    zoom: import("../internals/index.js").DefaultizedZoomOptions | undefined;
    id: import("../internals/index.js").AxisId;
    valueFormatter?: (<TScaleName extends keyof import("../internals/index.js").AxisScaleConfig>(value: any, context: import("../index.js").AxisValueFormatterContext<TScaleName>) => string) | undefined;
    dataKey?: string | undefined;
    min?: (number | Date) | undefined;
    max?: (number | Date) | undefined;
    colorMap?: import("../models/colorMapping.js").ContinuousColorConfig<number | Date> | import("../models/colorMapping.js").PiecewiseColorConfig<number | Date> | undefined;
    hideTooltip?: boolean | undefined;
    domainLimit?: "nice" | "strict" | ((min: number, max: number) => {
      min: number;
      max: number;
    }) | undefined;
    ignoreTooltip?: boolean | undefined;
    offset: number;
    scaleType: "time";
    colorScale?: import("@mui/x-charts-vendor/d3-scale").ScaleSequential<string, string | null> | import("@mui/x-charts-vendor/d3-scale").ScaleThreshold<number | Date, string | null>;
    triggerTooltip?: boolean;
  } | {
    axis?: "y";
    axisId?: import("../internals/index.js").AxisId;
    disableLine: boolean;
    disableTicks: boolean;
    fill?: string;
    tickLabelStyle?: ChartsTextProps["style"];
    labelStyle?: ChartsTextProps["style"];
    tickLabelInterval?: "auto" | ((value: any, index: number) => boolean);
    label?: string;
    stroke?: string;
    tickSize: number;
    classes?: Partial<import("../index.js").ChartsAxisClasses>;
    slots?: Partial<import("../internals/index.js").ChartsAxisSlots>;
    slotProps?: Partial<import("../internals/index.js").ChartsAxisSlotProps>;
    sx?: import("@mui/system").SxProps;
    tickMaxStep?: number;
    tickMinStep?: number;
    tickNumber?: number;
    tickInterval?: "auto" | ((value: any, index: number) => boolean) | any[];
    tickPlacement?: "start" | "end" | "middle" | "extremities";
    tickLabelPlacement?: "middle" | "tick";
    data?: readonly any[] | undefined;
    position?: "left" | "right" | "none";
    width: number;
    zoom: import("../internals/index.js").DefaultizedZoomOptions | undefined;
    id: import("../internals/index.js").AxisId;
    valueFormatter?: (<TScaleName extends keyof import("../internals/index.js").AxisScaleConfig>(value: any, context: import("../index.js").AxisValueFormatterContext<TScaleName>) => string) | undefined;
    dataKey?: string | undefined;
    min?: (number | Date) | undefined;
    max?: (number | Date) | undefined;
    colorMap?: import("../models/colorMapping.js").ContinuousColorConfig<number | Date> | import("../models/colorMapping.js").PiecewiseColorConfig<number | Date> | undefined;
    hideTooltip?: boolean | undefined;
    domainLimit?: "nice" | "strict" | ((min: number, max: number) => {
      min: number;
      max: number;
    }) | undefined;
    ignoreTooltip?: boolean | undefined;
    offset: number;
    scaleType: "linear";
    colorScale?: import("@mui/x-charts-vendor/d3-scale").ScaleSequential<string, string | null> | import("@mui/x-charts-vendor/d3-scale").ScaleThreshold<number | Date, string | null>;
    triggerTooltip?: boolean;
  } | {
    axis?: "y";
    axisId?: import("../internals/index.js").AxisId;
    disableLine: boolean;
    disableTicks: boolean;
    fill?: string;
    tickLabelStyle?: ChartsTextProps["style"];
    labelStyle?: ChartsTextProps["style"];
    tickLabelInterval?: "auto" | ((value: any, index: number) => boolean);
    label?: string;
    stroke?: string;
    tickSize: number;
    classes?: Partial<import("../index.js").ChartsAxisClasses>;
    slots?: Partial<import("../internals/index.js").ChartsAxisSlots>;
    slotProps?: Partial<import("../internals/index.js").ChartsAxisSlotProps>;
    sx?: import("@mui/system").SxProps;
    tickMaxStep?: number;
    tickMinStep?: number;
    tickNumber?: number;
    tickInterval?: "auto" | ((value: any, index: number) => boolean) | any[];
    tickPlacement?: "start" | "end" | "middle" | "extremities";
    tickLabelPlacement?: "middle" | "tick";
    data?: readonly any[] | undefined;
    position?: "left" | "right" | "none";
    width: number;
    zoom: import("../internals/index.js").DefaultizedZoomOptions | undefined;
    id: import("../internals/index.js").AxisId;
    valueFormatter?: (<TScaleName extends keyof import("../internals/index.js").AxisScaleConfig>(value: any, context: import("../index.js").AxisValueFormatterContext<TScaleName>) => string) | undefined;
    dataKey?: string | undefined;
    min?: (number | Date) | undefined;
    max?: (number | Date) | undefined;
    colorMap?: import("../models/colorMapping.js").ContinuousColorConfig<number | Date> | import("../models/colorMapping.js").PiecewiseColorConfig<number | Date> | undefined;
    hideTooltip?: boolean | undefined;
    domainLimit?: "nice" | "strict" | ((min: number, max: number) => {
      min: number;
      max: number;
    }) | undefined;
    ignoreTooltip?: boolean | undefined;
    offset: number;
    scaleType: "linear";
    colorScale?: import("@mui/x-charts-vendor/d3-scale").ScaleSequential<string, string | null> | import("@mui/x-charts-vendor/d3-scale").ScaleThreshold<number, string | null>;
    triggerTooltip?: boolean;
  } | {
    axis?: "y";
    axisId?: import("../internals/index.js").AxisId;
    disableLine: boolean;
    disableTicks: boolean;
    fill?: string;
    tickLabelStyle?: ChartsTextProps["style"];
    labelStyle?: ChartsTextProps["style"];
    tickLabelInterval?: "auto" | ((value: any, index: number) => boolean);
    label?: string;
    stroke?: string;
    tickSize: number;
    classes?: Partial<import("../index.js").ChartsAxisClasses>;
    slots?: Partial<import("../internals/index.js").ChartsAxisSlots>;
    slotProps?: Partial<import("../internals/index.js").ChartsAxisSlotProps>;
    sx?: import("@mui/system").SxProps;
    tickMaxStep?: number;
    tickMinStep?: number;
    tickNumber?: number;
    tickInterval?: "auto" | ((value: any, index: number) => boolean) | any[];
    tickPlacement?: "start" | "end" | "middle" | "extremities";
    tickLabelPlacement?: "middle" | "tick";
    data?: readonly any[] | undefined;
    position?: "left" | "right" | "none";
    width: number;
    zoom: import("../internals/index.js").DefaultizedZoomOptions | undefined;
    id: import("../internals/index.js").AxisId;
    valueFormatter?: (<TScaleName extends keyof import("../internals/index.js").AxisScaleConfig>(value: any, context: import("../index.js").AxisValueFormatterContext<TScaleName>) => string) | undefined;
    dataKey?: string | undefined;
    min?: (number | Date) | undefined;
    max?: (number | Date) | undefined;
    colorMap?: import("../models/colorMapping.js").ContinuousColorConfig<number | Date> | import("../models/colorMapping.js").PiecewiseColorConfig<number | Date> | undefined;
    hideTooltip?: boolean | undefined;
    domainLimit?: "nice" | "strict" | ((min: number, max: number) => {
      min: number;
      max: number;
    }) | undefined;
    ignoreTooltip?: boolean | undefined;
    offset: number;
    scaleType: "linear";
    colorScale?: import("@mui/x-charts-vendor/d3-scale").ScaleOrdinal<string | number | Date, string, string | null> | import("@mui/x-charts-vendor/d3-scale").ScaleOrdinal<number, string, string | null> | import("@mui/x-charts-vendor/d3-scale").ScaleSequential<string, string | null> | import("@mui/x-charts-vendor/d3-scale").ScaleThreshold<number | Date, string | null>;
    triggerTooltip?: boolean;
  } | {
    axis?: "y";
    axisId?: import("../internals/index.js").AxisId;
    disableLine: boolean;
    disableTicks: boolean;
    fill?: string;
    tickLabelStyle?: ChartsTextProps["style"];
    labelStyle?: ChartsTextProps["style"];
    tickLabelInterval?: "auto" | ((value: any, index: number) => boolean);
    label?: string;
    stroke?: string;
    tickSize: number;
    classes?: Partial<import("../index.js").ChartsAxisClasses>;
    slots?: Partial<import("../internals/index.js").ChartsAxisSlots>;
    slotProps?: Partial<import("../internals/index.js").ChartsAxisSlotProps>;
    sx?: import("@mui/system").SxProps;
    tickMaxStep?: number;
    tickMinStep?: number;
    tickNumber?: number;
    tickInterval?: "auto" | ((value: any, index: number) => boolean) | any[];
    tickPlacement?: "start" | "end" | "middle" | "extremities";
    tickLabelPlacement?: "middle" | "tick";
    data?: readonly any[] | undefined;
    position?: "left" | "right" | "none";
    width: number;
    zoom: import("../internals/index.js").DefaultizedZoomOptions | undefined;
    id: import("../internals/index.js").AxisId;
    valueFormatter?: (<TScaleName extends keyof import("../internals/index.js").AxisScaleConfig>(value: any, context: import("../index.js").AxisValueFormatterContext<TScaleName>) => string) | undefined;
    dataKey?: string | undefined;
    min?: (number | Date) | undefined;
    max?: (number | Date) | undefined;
    colorMap?: import("../models/colorMapping.js").ContinuousColorConfig<number | Date> | import("../models/colorMapping.js").PiecewiseColorConfig<number | Date> | undefined;
    hideTooltip?: boolean | undefined;
    domainLimit?: "nice" | "strict" | ((min: number, max: number) => {
      min: number;
      max: number;
    }) | undefined;
    ignoreTooltip?: boolean | undefined;
    offset: number;
    scaleType: "linear";
    colorScale?: import("@mui/x-charts-vendor/d3-scale").ScaleOrdinal<string | number | Date, string, string | null> | import("@mui/x-charts-vendor/d3-scale").ScaleOrdinal<number, string, string | null> | import("@mui/x-charts-vendor/d3-scale").ScaleSequential<string, string | null> | import("@mui/x-charts-vendor/d3-scale").ScaleThreshold<number | Date, string | null>;
    triggerTooltip?: boolean;
  } | {
    axis?: "y";
    axisId?: import("../internals/index.js").AxisId;
    disableLine: boolean;
    disableTicks: boolean;
    fill?: string;
    tickLabelStyle?: ChartsTextProps["style"];
    labelStyle?: ChartsTextProps["style"];
    tickLabelInterval?: "auto" | ((value: any, index: number) => boolean);
    label?: string;
    stroke?: string;
    tickSize: number;
    classes?: Partial<import("../index.js").ChartsAxisClasses>;
    slots?: Partial<import("../internals/index.js").ChartsAxisSlots>;
    slotProps?: Partial<import("../internals/index.js").ChartsAxisSlotProps>;
    sx?: import("@mui/system").SxProps;
    tickMaxStep?: number;
    tickMinStep?: number;
    tickNumber?: number;
    tickInterval?: "auto" | ((value: any, index: number) => boolean) | any[];
    tickPlacement?: "start" | "end" | "middle" | "extremities";
    tickLabelPlacement?: "middle" | "tick";
    data?: readonly any[] | undefined;
    position?: "left" | "right" | "none";
    width: number;
    zoom: import("../internals/index.js").DefaultizedZoomOptions | undefined;
    id: import("../internals/index.js").AxisId;
    valueFormatter?: (<TScaleName extends keyof import("../internals/index.js").AxisScaleConfig>(value: any, context: import("../index.js").AxisValueFormatterContext<TScaleName>) => string) | undefined;
    dataKey?: string | undefined;
    min?: (number | Date) | undefined;
    max?: (number | Date) | undefined;
    colorMap?: import("../models/colorMapping.js").ContinuousColorConfig<number | Date> | import("../models/colorMapping.js").PiecewiseColorConfig<number | Date> | undefined;
    hideTooltip?: boolean | undefined;
    domainLimit?: "nice" | "strict" | ((min: number, max: number) => {
      min: number;
      max: number;
    }) | undefined;
    ignoreTooltip?: boolean | undefined;
    offset: number;
    scaleType: "linear";
    colorScale?: import("@mui/x-charts-vendor/d3-scale").ScaleSequential<string, string | null> | import("@mui/x-charts-vendor/d3-scale").ScaleThreshold<number, string | null>;
    triggerTooltip?: boolean;
  } | {
    axis?: "y";
    axisId?: import("../internals/index.js").AxisId;
    disableLine: boolean;
    disableTicks: boolean;
    fill?: string;
    tickLabelStyle?: ChartsTextProps["style"];
    labelStyle?: ChartsTextProps["style"];
    tickLabelInterval?: "auto" | ((value: any, index: number) => boolean);
    label?: string;
    stroke?: string;
    tickSize: number;
    classes?: Partial<import("../index.js").ChartsAxisClasses>;
    slots?: Partial<import("../internals/index.js").ChartsAxisSlots>;
    slotProps?: Partial<import("../internals/index.js").ChartsAxisSlotProps>;
    sx?: import("@mui/system").SxProps;
    tickMaxStep?: number;
    tickMinStep?: number;
    tickNumber?: number;
    tickInterval?: "auto" | ((value: any, index: number) => boolean) | any[];
    tickPlacement?: "start" | "end" | "middle" | "extremities";
    tickLabelPlacement?: "middle" | "tick";
    data?: readonly any[] | undefined;
    position?: "left" | "right" | "none";
    width: number;
    zoom: import("../internals/index.js").DefaultizedZoomOptions | undefined;
    id: import("../internals/index.js").AxisId;
    valueFormatter?: (<TScaleName extends keyof import("../internals/index.js").AxisScaleConfig>(value: any, context: import("../index.js").AxisValueFormatterContext<TScaleName>) => string) | undefined;
    dataKey?: string | undefined;
    min?: (number | Date) | undefined;
    max?: (number | Date) | undefined;
    colorMap?: import("../models/colorMapping.js").ContinuousColorConfig<number | Date> | import("../models/colorMapping.js").PiecewiseColorConfig<number | Date> | undefined;
    hideTooltip?: boolean | undefined;
    domainLimit?: "nice" | "strict" | ((min: number, max: number) => {
      min: number;
      max: number;
    }) | undefined;
    ignoreTooltip?: boolean | undefined;
    offset: number;
    scaleType: "linear";
    colorScale?: import("@mui/x-charts-vendor/d3-scale").ScaleSequential<string, string | null> | import("@mui/x-charts-vendor/d3-scale").ScaleThreshold<number, string | null>;
    triggerTooltip?: boolean;
  } | {
    axis?: "y";
    axisId?: import("../internals/index.js").AxisId;
    disableLine: boolean;
    disableTicks: boolean;
    fill?: string;
    tickLabelStyle?: ChartsTextProps["style"];
    labelStyle?: ChartsTextProps["style"];
    tickLabelInterval?: "auto" | ((value: any, index: number) => boolean);
    label?: string;
    stroke?: string;
    tickSize: number;
    classes?: Partial<import("../index.js").ChartsAxisClasses>;
    slots?: Partial<import("../internals/index.js").ChartsAxisSlots>;
    slotProps?: Partial<import("../internals/index.js").ChartsAxisSlotProps>;
    sx?: import("@mui/system").SxProps;
    tickMaxStep?: number;
    tickMinStep?: number;
    tickNumber?: number;
    tickInterval?: "auto" | ((value: any, index: number) => boolean) | any[];
    tickPlacement?: "start" | "end" | "middle" | "extremities";
    tickLabelPlacement?: "middle" | "tick";
    data?: readonly any[] | undefined;
    position?: "left" | "right" | "none";
    width: number;
    zoom: import("../internals/index.js").DefaultizedZoomOptions | undefined;
    id: import("../internals/index.js").AxisId;
    valueFormatter?: (<TScaleName extends keyof import("../internals/index.js").AxisScaleConfig>(value: any, context: import("../index.js").AxisValueFormatterContext<TScaleName>) => string) | undefined;
    dataKey?: string | undefined;
    min?: (number | Date) | undefined;
    max?: (number | Date) | undefined;
    colorMap?: import("../models/colorMapping.js").ContinuousColorConfig<number | Date> | import("../models/colorMapping.js").PiecewiseColorConfig<number | Date> | undefined;
    hideTooltip?: boolean | undefined;
    domainLimit?: "nice" | "strict" | ((min: number, max: number) => {
      min: number;
      max: number;
    }) | undefined;
    ignoreTooltip?: boolean | undefined;
    offset: number;
    scaleType: "linear";
    colorScale?: import("@mui/x-charts-vendor/d3-scale").ScaleSequential<string, string | null> | import("@mui/x-charts-vendor/d3-scale").ScaleThreshold<number, string | null>;
    triggerTooltip?: boolean;
  } | {
    axis?: "y";
    axisId?: import("../internals/index.js").AxisId;
    disableLine: boolean;
    disableTicks: boolean;
    fill?: string;
    tickLabelStyle?: ChartsTextProps["style"];
    labelStyle?: ChartsTextProps["style"];
    tickLabelInterval?: "auto" | ((value: any, index: number) => boolean);
    label?: string;
    stroke?: string;
    tickSize: number;
    classes?: Partial<import("../index.js").ChartsAxisClasses>;
    slots?: Partial<import("../internals/index.js").ChartsAxisSlots>;
    slotProps?: Partial<import("../internals/index.js").ChartsAxisSlotProps>;
    sx?: import("@mui/system").SxProps;
    tickMaxStep?: number;
    tickMinStep?: number;
    tickNumber?: number;
    tickInterval?: "auto" | ((value: any, index: number) => boolean) | any[];
    tickPlacement?: "start" | "end" | "middle" | "extremities";
    tickLabelPlacement?: "middle" | "tick";
    data?: readonly any[] | undefined;
    position?: "left" | "right" | "none";
    width: number;
    zoom: import("../internals/index.js").DefaultizedZoomOptions | undefined;
    id: import("../internals/index.js").AxisId;
    valueFormatter?: (<TScaleName extends keyof import("../internals/index.js").AxisScaleConfig>(value: any, context: import("../index.js").AxisValueFormatterContext<TScaleName>) => string) | undefined;
    dataKey?: string | undefined;
    min?: (number | Date) | undefined;
    max?: (number | Date) | undefined;
    colorMap?: import("../models/colorMapping.js").ContinuousColorConfig<number | Date> | import("../models/colorMapping.js").PiecewiseColorConfig<number | Date> | undefined;
    hideTooltip?: boolean | undefined;
    domainLimit?: "nice" | "strict" | ((min: number, max: number) => {
      min: number;
      max: number;
    }) | undefined;
    ignoreTooltip?: boolean | undefined;
    offset: number;
    scaleType: "linear";
    colorScale?: import("@mui/x-charts-vendor/d3-scale").ScaleSequential<string, string | null> | import("@mui/x-charts-vendor/d3-scale").ScaleThreshold<number, string | null>;
    triggerTooltip?: boolean;
  } | {
    axis?: "y";
    axisId?: import("../internals/index.js").AxisId;
    disableLine: boolean;
    disableTicks: boolean;
    fill?: string;
    tickLabelStyle?: ChartsTextProps["style"];
    labelStyle?: ChartsTextProps["style"];
    tickLabelInterval?: "auto" | ((value: any, index: number) => boolean);
    label?: string;
    stroke?: string;
    tickSize: number;
    classes?: Partial<import("../index.js").ChartsAxisClasses>;
    slots?: Partial<import("../internals/index.js").ChartsAxisSlots>;
    slotProps?: Partial<import("../internals/index.js").ChartsAxisSlotProps>;
    sx?: import("@mui/system").SxProps;
    tickMaxStep?: number;
    tickMinStep?: number;
    tickNumber?: number;
    tickInterval?: "auto" | ((value: any, index: number) => boolean) | any[];
    tickPlacement?: "start" | "end" | "middle" | "extremities";
    tickLabelPlacement?: "middle" | "tick";
    data?: readonly any[] | undefined;
    position?: "left" | "right" | "none";
    width: number;
    zoom: import("../internals/index.js").DefaultizedZoomOptions | undefined;
    id: import("../internals/index.js").AxisId;
    valueFormatter?: (<TScaleName extends keyof import("../internals/index.js").AxisScaleConfig>(value: any, context: import("../index.js").AxisValueFormatterContext<TScaleName>) => string) | undefined;
    dataKey?: string | undefined;
    min?: (number | Date) | undefined;
    max?: (number | Date) | undefined;
    colorMap?: import("../models/colorMapping.js").ContinuousColorConfig<number | Date> | import("../models/colorMapping.js").PiecewiseColorConfig<number | Date> | undefined;
    hideTooltip?: boolean | undefined;
    domainLimit?: "nice" | "strict" | ((min: number, max: number) => {
      min: number;
      max: number;
    }) | undefined;
    ignoreTooltip?: boolean | undefined;
    offset: number;
    scaleType: "linear";
    colorScale?: import("@mui/x-charts-vendor/d3-scale").ScaleSequential<string, string | null> | import("@mui/x-charts-vendor/d3-scale").ScaleThreshold<number | Date, string | null>;
    triggerTooltip?: boolean;
  } | {
    axis?: "y";
    axisId?: import("../internals/index.js").AxisId;
    disableLine: boolean;
    disableTicks: boolean;
    fill?: string;
    tickLabelStyle?: ChartsTextProps["style"];
    labelStyle?: ChartsTextProps["style"];
    tickLabelInterval?: "auto" | ((value: any, index: number) => boolean);
    label?: string;
    stroke?: string;
    tickSize: number;
    classes?: Partial<import("../index.js").ChartsAxisClasses>;
    slots?: Partial<import("../internals/index.js").ChartsAxisSlots>;
    slotProps?: Partial<import("../internals/index.js").ChartsAxisSlotProps>;
    sx?: import("@mui/system").SxProps;
    tickMaxStep?: number;
    tickMinStep?: number;
    tickNumber?: number;
    tickInterval?: "auto" | ((value: any, index: number) => boolean) | any[];
    tickPlacement?: "start" | "end" | "middle" | "extremities";
    tickLabelPlacement?: "middle" | "tick";
    data?: readonly any[] | undefined;
    position?: "left" | "right" | "none";
    width: number;
    zoom: import("../internals/index.js").DefaultizedZoomOptions | undefined;
    id: import("../internals/index.js").AxisId;
    valueFormatter?: (<TScaleName extends keyof import("../internals/index.js").AxisScaleConfig>(value: any, context: import("../index.js").AxisValueFormatterContext<TScaleName>) => string) | undefined;
    dataKey?: string | undefined;
    min?: (number | Date) | undefined;
    max?: (number | Date) | undefined;
    colorMap?: import("../models/colorMapping.js").OrdinalColorConfig | import("../models/colorMapping.js").ContinuousColorConfig | import("../models/colorMapping.js").PiecewiseColorConfig;
    hideTooltip?: boolean | undefined;
    domainLimit?: "nice" | "strict" | ((min: number, max: number) => {
      min: number;
      max: number;
    }) | undefined;
    ignoreTooltip?: boolean | undefined;
    offset: number;
    scaleType: "band";
    categoryGapRatio: number;
    barGapRatio: number;
    groups?: import("../internals/index.js").AxisGroup[];
    colorScale?: import("@mui/x-charts-vendor/d3-scale").ScaleSequential<string, string | null> | import("@mui/x-charts-vendor/d3-scale").ScaleThreshold<number | Date, string | null>;
    triggerTooltip?: boolean;
  } | {
    axis?: "y";
    axisId?: import("../internals/index.js").AxisId;
    disableLine: boolean;
    disableTicks: boolean;
    fill?: string;
    tickLabelStyle?: ChartsTextProps["style"];
    labelStyle?: ChartsTextProps["style"];
    tickLabelInterval?: "auto" | ((value: any, index: number) => boolean);
    label?: string;
    stroke?: string;
    tickSize: number;
    classes?: Partial<import("../index.js").ChartsAxisClasses>;
    slots?: Partial<import("../internals/index.js").ChartsAxisSlots>;
    slotProps?: Partial<import("../internals/index.js").ChartsAxisSlotProps>;
    sx?: import("@mui/system").SxProps;
    tickMaxStep?: number;
    tickMinStep?: number;
    tickNumber?: number;
    tickInterval?: "auto" | ((value: any, index: number) => boolean) | any[];
    tickPlacement?: "start" | "end" | "middle" | "extremities";
    tickLabelPlacement?: "middle" | "tick";
    data?: readonly any[] | undefined;
    position?: "left" | "right" | "none";
    width: number;
    zoom: import("../internals/index.js").DefaultizedZoomOptions | undefined;
    id: import("../internals/index.js").AxisId;
    valueFormatter?: (<TScaleName extends keyof import("../internals/index.js").AxisScaleConfig>(value: any, context: import("../index.js").AxisValueFormatterContext<TScaleName>) => string) | undefined;
    dataKey?: string | undefined;
    min?: (number | Date) | undefined;
    max?: (number | Date) | undefined;
    colorMap?: import("../models/colorMapping.js").OrdinalColorConfig | import("../models/colorMapping.js").ContinuousColorConfig | import("../models/colorMapping.js").PiecewiseColorConfig;
    hideTooltip?: boolean | undefined;
    domainLimit?: "nice" | "strict" | ((min: number, max: number) => {
      min: number;
      max: number;
    }) | undefined;
    ignoreTooltip?: boolean | undefined;
    offset: number;
    scaleType: "band";
    categoryGapRatio: number;
    barGapRatio: number;
    groups?: import("../internals/index.js").AxisGroup[];
    colorScale?: import("@mui/x-charts-vendor/d3-scale").ScaleSequential<string, string | null> | import("@mui/x-charts-vendor/d3-scale").ScaleThreshold<number, string | null>;
    triggerTooltip?: boolean;
  } | {
    axis?: "y";
    axisId?: import("../internals/index.js").AxisId;
    disableLine: boolean;
    disableTicks: boolean;
    fill?: string;
    tickLabelStyle?: ChartsTextProps["style"];
    labelStyle?: ChartsTextProps["style"];
    tickLabelInterval?: "auto" | ((value: any, index: number) => boolean);
    label?: string;
    stroke?: string;
    tickSize: number;
    classes?: Partial<import("../index.js").ChartsAxisClasses>;
    slots?: Partial<import("../internals/index.js").ChartsAxisSlots>;
    slotProps?: Partial<import("../internals/index.js").ChartsAxisSlotProps>;
    sx?: import("@mui/system").SxProps;
    tickMaxStep?: number;
    tickMinStep?: number;
    tickNumber?: number;
    tickInterval?: "auto" | ((value: any, index: number) => boolean) | any[];
    tickPlacement?: "start" | "end" | "middle" | "extremities";
    tickLabelPlacement?: "middle" | "tick";
    data?: readonly any[] | undefined;
    position?: "left" | "right" | "none";
    width: number;
    zoom: import("../internals/index.js").DefaultizedZoomOptions | undefined;
    id: import("../internals/index.js").AxisId;
    valueFormatter?: (<TScaleName extends keyof import("../internals/index.js").AxisScaleConfig>(value: any, context: import("../index.js").AxisValueFormatterContext<TScaleName>) => string) | undefined;
    dataKey?: string | undefined;
    min?: (number | Date) | undefined;
    max?: (number | Date) | undefined;
    colorMap?: import("../models/colorMapping.js").OrdinalColorConfig | import("../models/colorMapping.js").ContinuousColorConfig | import("../models/colorMapping.js").PiecewiseColorConfig;
    hideTooltip?: boolean | undefined;
    domainLimit?: "nice" | "strict" | ((min: number, max: number) => {
      min: number;
      max: number;
    }) | undefined;
    ignoreTooltip?: boolean | undefined;
    offset: number;
    scaleType: "band";
    categoryGapRatio: number;
    barGapRatio: number;
    groups?: import("../internals/index.js").AxisGroup[];
    colorScale?: import("@mui/x-charts-vendor/d3-scale").ScaleOrdinal<string | number | Date, string, string | null> | import("@mui/x-charts-vendor/d3-scale").ScaleOrdinal<number, string, string | null> | import("@mui/x-charts-vendor/d3-scale").ScaleSequential<string, string | null> | import("@mui/x-charts-vendor/d3-scale").ScaleThreshold<number | Date, string | null>;
    triggerTooltip?: boolean;
  } | {
    axis?: "y";
    axisId?: import("../internals/index.js").AxisId;
    disableLine: boolean;
    disableTicks: boolean;
    fill?: string;
    tickLabelStyle?: ChartsTextProps["style"];
    labelStyle?: ChartsTextProps["style"];
    tickLabelInterval?: "auto" | ((value: any, index: number) => boolean);
    label?: string;
    stroke?: string;
    tickSize: number;
    classes?: Partial<import("../index.js").ChartsAxisClasses>;
    slots?: Partial<import("../internals/index.js").ChartsAxisSlots>;
    slotProps?: Partial<import("../internals/index.js").ChartsAxisSlotProps>;
    sx?: import("@mui/system").SxProps;
    tickMaxStep?: number;
    tickMinStep?: number;
    tickNumber?: number;
    tickInterval?: "auto" | ((value: any, index: number) => boolean) | any[];
    tickPlacement?: "start" | "end" | "middle" | "extremities";
    tickLabelPlacement?: "middle" | "tick";
    data?: readonly any[] | undefined;
    position?: "left" | "right" | "none";
    width: number;
    zoom: import("../internals/index.js").DefaultizedZoomOptions | undefined;
    id: import("../internals/index.js").AxisId;
    valueFormatter?: (<TScaleName extends keyof import("../internals/index.js").AxisScaleConfig>(value: any, context: import("../index.js").AxisValueFormatterContext<TScaleName>) => string) | undefined;
    dataKey?: string | undefined;
    min?: (number | Date) | undefined;
    max?: (number | Date) | undefined;
    colorMap?: import("../models/colorMapping.js").OrdinalColorConfig | import("../models/colorMapping.js").ContinuousColorConfig | import("../models/colorMapping.js").PiecewiseColorConfig;
    hideTooltip?: boolean | undefined;
    domainLimit?: "nice" | "strict" | ((min: number, max: number) => {
      min: number;
      max: number;
    }) | undefined;
    ignoreTooltip?: boolean | undefined;
    offset: number;
    scaleType: "band";
    categoryGapRatio: number;
    barGapRatio: number;
    groups?: import("../internals/index.js").AxisGroup[];
    colorScale?: import("@mui/x-charts-vendor/d3-scale").ScaleOrdinal<string | number | Date, string, string | null> | import("@mui/x-charts-vendor/d3-scale").ScaleOrdinal<number, string, string | null> | import("@mui/x-charts-vendor/d3-scale").ScaleSequential<string, string | null> | import("@mui/x-charts-vendor/d3-scale").ScaleThreshold<number | Date, string | null>;
    triggerTooltip?: boolean;
  } | {
    axis?: "y";
    axisId?: import("../internals/index.js").AxisId;
    disableLine: boolean;
    disableTicks: boolean;
    fill?: string;
    tickLabelStyle?: ChartsTextProps["style"];
    labelStyle?: ChartsTextProps["style"];
    tickLabelInterval?: "auto" | ((value: any, index: number) => boolean);
    label?: string;
    stroke?: string;
    tickSize: number;
    classes?: Partial<import("../index.js").ChartsAxisClasses>;
    slots?: Partial<import("../internals/index.js").ChartsAxisSlots>;
    slotProps?: Partial<import("../internals/index.js").ChartsAxisSlotProps>;
    sx?: import("@mui/system").SxProps;
    tickMaxStep?: number;
    tickMinStep?: number;
    tickNumber?: number;
    tickInterval?: "auto" | ((value: any, index: number) => boolean) | any[];
    tickPlacement?: "start" | "end" | "middle" | "extremities";
    tickLabelPlacement?: "middle" | "tick";
    data?: readonly any[] | undefined;
    position?: "left" | "right" | "none";
    width: number;
    zoom: import("../internals/index.js").DefaultizedZoomOptions | undefined;
    id: import("../internals/index.js").AxisId;
    valueFormatter?: (<TScaleName extends keyof import("../internals/index.js").AxisScaleConfig>(value: any, context: import("../index.js").AxisValueFormatterContext<TScaleName>) => string) | undefined;
    dataKey?: string | undefined;
    min?: (number | Date) | undefined;
    max?: (number | Date) | undefined;
    colorMap?: import("../models/colorMapping.js").OrdinalColorConfig | import("../models/colorMapping.js").ContinuousColorConfig | import("../models/colorMapping.js").PiecewiseColorConfig;
    hideTooltip?: boolean | undefined;
    domainLimit?: "nice" | "strict" | ((min: number, max: number) => {
      min: number;
      max: number;
    }) | undefined;
    ignoreTooltip?: boolean | undefined;
    offset: number;
    scaleType: "band";
    categoryGapRatio: number;
    barGapRatio: number;
    groups?: import("../internals/index.js").AxisGroup[];
    colorScale?: import("@mui/x-charts-vendor/d3-scale").ScaleSequential<string, string | null> | import("@mui/x-charts-vendor/d3-scale").ScaleThreshold<number, string | null>;
    triggerTooltip?: boolean;
  } | {
    axis?: "y";
    axisId?: import("../internals/index.js").AxisId;
    disableLine: boolean;
    disableTicks: boolean;
    fill?: string;
    tickLabelStyle?: ChartsTextProps["style"];
    labelStyle?: ChartsTextProps["style"];
    tickLabelInterval?: "auto" | ((value: any, index: number) => boolean);
    label?: string;
    stroke?: string;
    tickSize: number;
    classes?: Partial<import("../index.js").ChartsAxisClasses>;
    slots?: Partial<import("../internals/index.js").ChartsAxisSlots>;
    slotProps?: Partial<import("../internals/index.js").ChartsAxisSlotProps>;
    sx?: import("@mui/system").SxProps;
    tickMaxStep?: number;
    tickMinStep?: number;
    tickNumber?: number;
    tickInterval?: "auto" | ((value: any, index: number) => boolean) | any[];
    tickPlacement?: "start" | "end" | "middle" | "extremities";
    tickLabelPlacement?: "middle" | "tick";
    data?: readonly any[] | undefined;
    position?: "left" | "right" | "none";
    width: number;
    zoom: import("../internals/index.js").DefaultizedZoomOptions | undefined;
    id: import("../internals/index.js").AxisId;
    valueFormatter?: (<TScaleName extends keyof import("../internals/index.js").AxisScaleConfig>(value: any, context: import("../index.js").AxisValueFormatterContext<TScaleName>) => string) | undefined;
    dataKey?: string | undefined;
    min?: (number | Date) | undefined;
    max?: (number | Date) | undefined;
    colorMap?: import("../models/colorMapping.js").OrdinalColorConfig | import("../models/colorMapping.js").ContinuousColorConfig | import("../models/colorMapping.js").PiecewiseColorConfig;
    hideTooltip?: boolean | undefined;
    domainLimit?: "nice" | "strict" | ((min: number, max: number) => {
      min: number;
      max: number;
    }) | undefined;
    ignoreTooltip?: boolean | undefined;
    offset: number;
    scaleType: "band";
    categoryGapRatio: number;
    barGapRatio: number;
    groups?: import("../internals/index.js").AxisGroup[];
    colorScale?: import("@mui/x-charts-vendor/d3-scale").ScaleSequential<string, string | null> | import("@mui/x-charts-vendor/d3-scale").ScaleThreshold<number, string | null>;
    triggerTooltip?: boolean;
  } | {
    axis?: "y";
    axisId?: import("../internals/index.js").AxisId;
    disableLine: boolean;
    disableTicks: boolean;
    fill?: string;
    tickLabelStyle?: ChartsTextProps["style"];
    labelStyle?: ChartsTextProps["style"];
    tickLabelInterval?: "auto" | ((value: any, index: number) => boolean);
    label?: string;
    stroke?: string;
    tickSize: number;
    classes?: Partial<import("../index.js").ChartsAxisClasses>;
    slots?: Partial<import("../internals/index.js").ChartsAxisSlots>;
    slotProps?: Partial<import("../internals/index.js").ChartsAxisSlotProps>;
    sx?: import("@mui/system").SxProps;
    tickMaxStep?: number;
    tickMinStep?: number;
    tickNumber?: number;
    tickInterval?: "auto" | ((value: any, index: number) => boolean) | any[];
    tickPlacement?: "start" | "end" | "middle" | "extremities";
    tickLabelPlacement?: "middle" | "tick";
    data?: readonly any[] | undefined;
    position?: "left" | "right" | "none";
    width: number;
    zoom: import("../internals/index.js").DefaultizedZoomOptions | undefined;
    id: import("../internals/index.js").AxisId;
    valueFormatter?: (<TScaleName extends keyof import("../internals/index.js").AxisScaleConfig>(value: any, context: import("../index.js").AxisValueFormatterContext<TScaleName>) => string) | undefined;
    dataKey?: string | undefined;
    min?: (number | Date) | undefined;
    max?: (number | Date) | undefined;
    colorMap?: import("../models/colorMapping.js").OrdinalColorConfig | import("../models/colorMapping.js").ContinuousColorConfig | import("../models/colorMapping.js").PiecewiseColorConfig;
    hideTooltip?: boolean | undefined;
    domainLimit?: "nice" | "strict" | ((min: number, max: number) => {
      min: number;
      max: number;
    }) | undefined;
    ignoreTooltip?: boolean | undefined;
    offset: number;
    scaleType: "band";
    categoryGapRatio: number;
    barGapRatio: number;
    groups?: import("../internals/index.js").AxisGroup[];
    colorScale?: import("@mui/x-charts-vendor/d3-scale").ScaleSequential<string, string | null> | import("@mui/x-charts-vendor/d3-scale").ScaleThreshold<number, string | null>;
    triggerTooltip?: boolean;
  } | {
    axis?: "y";
    axisId?: import("../internals/index.js").AxisId;
    disableLine: boolean;
    disableTicks: boolean;
    fill?: string;
    tickLabelStyle?: ChartsTextProps["style"];
    labelStyle?: ChartsTextProps["style"];
    tickLabelInterval?: "auto" | ((value: any, index: number) => boolean);
    label?: string;
    stroke?: string;
    tickSize: number;
    classes?: Partial<import("../index.js").ChartsAxisClasses>;
    slots?: Partial<import("../internals/index.js").ChartsAxisSlots>;
    slotProps?: Partial<import("../internals/index.js").ChartsAxisSlotProps>;
    sx?: import("@mui/system").SxProps;
    tickMaxStep?: number;
    tickMinStep?: number;
    tickNumber?: number;
    tickInterval?: "auto" | ((value: any, index: number) => boolean) | any[];
    tickPlacement?: "start" | "end" | "middle" | "extremities";
    tickLabelPlacement?: "middle" | "tick";
    data?: readonly any[] | undefined;
    position?: "left" | "right" | "none";
    width: number;
    zoom: import("../internals/index.js").DefaultizedZoomOptions | undefined;
    id: import("../internals/index.js").AxisId;
    valueFormatter?: (<TScaleName extends keyof import("../internals/index.js").AxisScaleConfig>(value: any, context: import("../index.js").AxisValueFormatterContext<TScaleName>) => string) | undefined;
    dataKey?: string | undefined;
    min?: (number | Date) | undefined;
    max?: (number | Date) | undefined;
    colorMap?: import("../models/colorMapping.js").OrdinalColorConfig | import("../models/colorMapping.js").ContinuousColorConfig | import("../models/colorMapping.js").PiecewiseColorConfig;
    hideTooltip?: boolean | undefined;
    domainLimit?: "nice" | "strict" | ((min: number, max: number) => {
      min: number;
      max: number;
    }) | undefined;
    ignoreTooltip?: boolean | undefined;
    offset: number;
    scaleType: "band";
    categoryGapRatio: number;
    barGapRatio: number;
    groups?: import("../internals/index.js").AxisGroup[];
    colorScale?: import("@mui/x-charts-vendor/d3-scale").ScaleSequential<string, string | null> | import("@mui/x-charts-vendor/d3-scale").ScaleThreshold<number, string | null>;
    triggerTooltip?: boolean;
  } | {
    axis?: "y";
    axisId?: import("../internals/index.js").AxisId;
    disableLine: boolean;
    disableTicks: boolean;
    fill?: string;
    tickLabelStyle?: ChartsTextProps["style"];
    labelStyle?: ChartsTextProps["style"];
    tickLabelInterval?: "auto" | ((value: any, index: number) => boolean);
    label?: string;
    stroke?: string;
    tickSize: number;
    classes?: Partial<import("../index.js").ChartsAxisClasses>;
    slots?: Partial<import("../internals/index.js").ChartsAxisSlots>;
    slotProps?: Partial<import("../internals/index.js").ChartsAxisSlotProps>;
    sx?: import("@mui/system").SxProps;
    tickMaxStep?: number;
    tickMinStep?: number;
    tickNumber?: number;
    tickInterval?: "auto" | ((value: any, index: number) => boolean) | any[];
    tickPlacement?: "start" | "end" | "middle" | "extremities";
    tickLabelPlacement?: "middle" | "tick";
    data?: readonly any[] | undefined;
    position?: "left" | "right" | "none";
    width: number;
    zoom: import("../internals/index.js").DefaultizedZoomOptions | undefined;
    id: import("../internals/index.js").AxisId;
    valueFormatter?: (<TScaleName extends keyof import("../internals/index.js").AxisScaleConfig>(value: any, context: import("../index.js").AxisValueFormatterContext<TScaleName>) => string) | undefined;
    dataKey?: string | undefined;
    min?: (number | Date) | undefined;
    max?: (number | Date) | undefined;
    colorMap?: import("../models/colorMapping.js").OrdinalColorConfig | import("../models/colorMapping.js").ContinuousColorConfig | import("../models/colorMapping.js").PiecewiseColorConfig;
    hideTooltip?: boolean | undefined;
    domainLimit?: "nice" | "strict" | ((min: number, max: number) => {
      min: number;
      max: number;
    }) | undefined;
    ignoreTooltip?: boolean | undefined;
    offset: number;
    scaleType: "band";
    categoryGapRatio: number;
    barGapRatio: number;
    groups?: import("../internals/index.js").AxisGroup[];
    colorScale?: import("@mui/x-charts-vendor/d3-scale").ScaleSequential<string, string | null> | import("@mui/x-charts-vendor/d3-scale").ScaleThreshold<number | Date, string | null>;
    triggerTooltip?: boolean;
  } | {
    axis?: "y";
    axisId?: import("../internals/index.js").AxisId;
    disableLine: boolean;
    disableTicks: boolean;
    fill?: string;
    tickLabelStyle?: ChartsTextProps["style"];
    labelStyle?: ChartsTextProps["style"];
    tickLabelInterval?: "auto" | ((value: any, index: number) => boolean);
    label?: string;
    stroke?: string;
    tickSize: number;
    classes?: Partial<import("../index.js").ChartsAxisClasses>;
    slots?: Partial<import("../internals/index.js").ChartsAxisSlots>;
    slotProps?: Partial<import("../internals/index.js").ChartsAxisSlotProps>;
    sx?: import("@mui/system").SxProps;
    tickMaxStep?: number;
    tickMinStep?: number;
    tickNumber?: number;
    tickInterval?: "auto" | ((value: any, index: number) => boolean) | any[];
    tickPlacement?: "start" | "end" | "middle" | "extremities";
    tickLabelPlacement?: "middle" | "tick";
    data?: readonly any[] | undefined;
    position?: "left" | "right" | "none";
    width: number;
    zoom: import("../internals/index.js").DefaultizedZoomOptions | undefined;
    id: import("../internals/index.js").AxisId;
    valueFormatter?: (<TScaleName extends keyof import("../internals/index.js").AxisScaleConfig>(value: any, context: import("../index.js").AxisValueFormatterContext<TScaleName>) => string) | undefined;
    dataKey?: string | undefined;
    min?: (number | Date) | undefined;
    max?: (number | Date) | undefined;
    colorMap?: import("../models/colorMapping.js").OrdinalColorConfig | import("../models/colorMapping.js").ContinuousColorConfig | import("../models/colorMapping.js").PiecewiseColorConfig;
    hideTooltip?: boolean | undefined;
    domainLimit?: "nice" | "strict" | ((min: number, max: number) => {
      min: number;
      max: number;
    }) | undefined;
    ignoreTooltip?: boolean | undefined;
    offset: number;
    scaleType: "point";
    groups?: import("../internals/index.js").AxisGroup[];
    colorScale?: import("@mui/x-charts-vendor/d3-scale").ScaleSequential<string, string | null> | import("@mui/x-charts-vendor/d3-scale").ScaleThreshold<number | Date, string | null>;
    triggerTooltip?: boolean;
  } | {
    axis?: "y";
    axisId?: import("../internals/index.js").AxisId;
    disableLine: boolean;
    disableTicks: boolean;
    fill?: string;
    tickLabelStyle?: ChartsTextProps["style"];
    labelStyle?: ChartsTextProps["style"];
    tickLabelInterval?: "auto" | ((value: any, index: number) => boolean);
    label?: string;
    stroke?: string;
    tickSize: number;
    classes?: Partial<import("../index.js").ChartsAxisClasses>;
    slots?: Partial<import("../internals/index.js").ChartsAxisSlots>;
    slotProps?: Partial<import("../internals/index.js").ChartsAxisSlotProps>;
    sx?: import("@mui/system").SxProps;
    tickMaxStep?: number;
    tickMinStep?: number;
    tickNumber?: number;
    tickInterval?: "auto" | ((value: any, index: number) => boolean) | any[];
    tickPlacement?: "start" | "end" | "middle" | "extremities";
    tickLabelPlacement?: "middle" | "tick";
    data?: readonly any[] | undefined;
    position?: "left" | "right" | "none";
    width: number;
    zoom: import("../internals/index.js").DefaultizedZoomOptions | undefined;
    id: import("../internals/index.js").AxisId;
    valueFormatter?: (<TScaleName extends keyof import("../internals/index.js").AxisScaleConfig>(value: any, context: import("../index.js").AxisValueFormatterContext<TScaleName>) => string) | undefined;
    dataKey?: string | undefined;
    min?: (number | Date) | undefined;
    max?: (number | Date) | undefined;
    colorMap?: import("../models/colorMapping.js").OrdinalColorConfig | import("../models/colorMapping.js").ContinuousColorConfig | import("../models/colorMapping.js").PiecewiseColorConfig;
    hideTooltip?: boolean | undefined;
    domainLimit?: "nice" | "strict" | ((min: number, max: number) => {
      min: number;
      max: number;
    }) | undefined;
    ignoreTooltip?: boolean | undefined;
    offset: number;
    scaleType: "point";
    groups?: import("../internals/index.js").AxisGroup[];
    colorScale?: import("@mui/x-charts-vendor/d3-scale").ScaleSequential<string, string | null> | import("@mui/x-charts-vendor/d3-scale").ScaleThreshold<number, string | null>;
    triggerTooltip?: boolean;
  } | {
    axis?: "y";
    axisId?: import("../internals/index.js").AxisId;
    disableLine: boolean;
    disableTicks: boolean;
    fill?: string;
    tickLabelStyle?: ChartsTextProps["style"];
    labelStyle?: ChartsTextProps["style"];
    tickLabelInterval?: "auto" | ((value: any, index: number) => boolean);
    label?: string;
    stroke?: string;
    tickSize: number;
    classes?: Partial<import("../index.js").ChartsAxisClasses>;
    slots?: Partial<import("../internals/index.js").ChartsAxisSlots>;
    slotProps?: Partial<import("../internals/index.js").ChartsAxisSlotProps>;
    sx?: import("@mui/system").SxProps;
    tickMaxStep?: number;
    tickMinStep?: number;
    tickNumber?: number;
    tickInterval?: "auto" | ((value: any, index: number) => boolean) | any[];
    tickPlacement?: "start" | "end" | "middle" | "extremities";
    tickLabelPlacement?: "middle" | "tick";
    data?: readonly any[] | undefined;
    position?: "left" | "right" | "none";
    width: number;
    zoom: import("../internals/index.js").DefaultizedZoomOptions | undefined;
    id: import("../internals/index.js").AxisId;
    valueFormatter?: (<TScaleName extends keyof import("../internals/index.js").AxisScaleConfig>(value: any, context: import("../index.js").AxisValueFormatterContext<TScaleName>) => string) | undefined;
    dataKey?: string | undefined;
    min?: (number | Date) | undefined;
    max?: (number | Date) | undefined;
    colorMap?: import("../models/colorMapping.js").OrdinalColorConfig | import("../models/colorMapping.js").ContinuousColorConfig | import("../models/colorMapping.js").PiecewiseColorConfig;
    hideTooltip?: boolean | undefined;
    domainLimit?: "nice" | "strict" | ((min: number, max: number) => {
      min: number;
      max: number;
    }) | undefined;
    ignoreTooltip?: boolean | undefined;
    offset: number;
    scaleType: "point";
    groups?: import("../internals/index.js").AxisGroup[];
    colorScale?: import("@mui/x-charts-vendor/d3-scale").ScaleOrdinal<string | number | Date, string, string | null> | import("@mui/x-charts-vendor/d3-scale").ScaleOrdinal<number, string, string | null> | import("@mui/x-charts-vendor/d3-scale").ScaleSequential<string, string | null> | import("@mui/x-charts-vendor/d3-scale").ScaleThreshold<number | Date, string | null>;
    triggerTooltip?: boolean;
  } | {
    axis?: "y";
    axisId?: import("../internals/index.js").AxisId;
    disableLine: boolean;
    disableTicks: boolean;
    fill?: string;
    tickLabelStyle?: ChartsTextProps["style"];
    labelStyle?: ChartsTextProps["style"];
    tickLabelInterval?: "auto" | ((value: any, index: number) => boolean);
    label?: string;
    stroke?: string;
    tickSize: number;
    classes?: Partial<import("../index.js").ChartsAxisClasses>;
    slots?: Partial<import("../internals/index.js").ChartsAxisSlots>;
    slotProps?: Partial<import("../internals/index.js").ChartsAxisSlotProps>;
    sx?: import("@mui/system").SxProps;
    tickMaxStep?: number;
    tickMinStep?: number;
    tickNumber?: number;
    tickInterval?: "auto" | ((value: any, index: number) => boolean) | any[];
    tickPlacement?: "start" | "end" | "middle" | "extremities";
    tickLabelPlacement?: "middle" | "tick";
    data?: readonly any[] | undefined;
    position?: "left" | "right" | "none";
    width: number;
    zoom: import("../internals/index.js").DefaultizedZoomOptions | undefined;
    id: import("../internals/index.js").AxisId;
    valueFormatter?: (<TScaleName extends keyof import("../internals/index.js").AxisScaleConfig>(value: any, context: import("../index.js").AxisValueFormatterContext<TScaleName>) => string) | undefined;
    dataKey?: string | undefined;
    min?: (number | Date) | undefined;
    max?: (number | Date) | undefined;
    colorMap?: import("../models/colorMapping.js").OrdinalColorConfig | import("../models/colorMapping.js").ContinuousColorConfig | import("../models/colorMapping.js").PiecewiseColorConfig;
    hideTooltip?: boolean | undefined;
    domainLimit?: "nice" | "strict" | ((min: number, max: number) => {
      min: number;
      max: number;
    }) | undefined;
    ignoreTooltip?: boolean | undefined;
    offset: number;
    scaleType: "point";
    groups?: import("../internals/index.js").AxisGroup[];
    colorScale?: import("@mui/x-charts-vendor/d3-scale").ScaleOrdinal<string | number | Date, string, string | null> | import("@mui/x-charts-vendor/d3-scale").ScaleOrdinal<number, string, string | null> | import("@mui/x-charts-vendor/d3-scale").ScaleSequential<string, string | null> | import("@mui/x-charts-vendor/d3-scale").ScaleThreshold<number | Date, string | null>;
    triggerTooltip?: boolean;
  } | {
    axis?: "y";
    axisId?: import("../internals/index.js").AxisId;
    disableLine: boolean;
    disableTicks: boolean;
    fill?: string;
    tickLabelStyle?: ChartsTextProps["style"];
    labelStyle?: ChartsTextProps["style"];
    tickLabelInterval?: "auto" | ((value: any, index: number) => boolean);
    label?: string;
    stroke?: string;
    tickSize: number;
    classes?: Partial<import("../index.js").ChartsAxisClasses>;
    slots?: Partial<import("../internals/index.js").ChartsAxisSlots>;
    slotProps?: Partial<import("../internals/index.js").ChartsAxisSlotProps>;
    sx?: import("@mui/system").SxProps;
    tickMaxStep?: number;
    tickMinStep?: number;
    tickNumber?: number;
    tickInterval?: "auto" | ((value: any, index: number) => boolean) | any[];
    tickPlacement?: "start" | "end" | "middle" | "extremities";
    tickLabelPlacement?: "middle" | "tick";
    data?: readonly any[] | undefined;
    position?: "left" | "right" | "none";
    width: number;
    zoom: import("../internals/index.js").DefaultizedZoomOptions | undefined;
    id: import("../internals/index.js").AxisId;
    valueFormatter?: (<TScaleName extends keyof import("../internals/index.js").AxisScaleConfig>(value: any, context: import("../index.js").AxisValueFormatterContext<TScaleName>) => string) | undefined;
    dataKey?: string | undefined;
    min?: (number | Date) | undefined;
    max?: (number | Date) | undefined;
    colorMap?: import("../models/colorMapping.js").OrdinalColorConfig | import("../models/colorMapping.js").ContinuousColorConfig | import("../models/colorMapping.js").PiecewiseColorConfig;
    hideTooltip?: boolean | undefined;
    domainLimit?: "nice" | "strict" | ((min: number, max: number) => {
      min: number;
      max: number;
    }) | undefined;
    ignoreTooltip?: boolean | undefined;
    offset: number;
    scaleType: "point";
    groups?: import("../internals/index.js").AxisGroup[];
    colorScale?: import("@mui/x-charts-vendor/d3-scale").ScaleSequential<string, string | null> | import("@mui/x-charts-vendor/d3-scale").ScaleThreshold<number, string | null>;
    triggerTooltip?: boolean;
  } | {
    axis?: "y";
    axisId?: import("../internals/index.js").AxisId;
    disableLine: boolean;
    disableTicks: boolean;
    fill?: string;
    tickLabelStyle?: ChartsTextProps["style"];
    labelStyle?: ChartsTextProps["style"];
    tickLabelInterval?: "auto" | ((value: any, index: number) => boolean);
    label?: string;
    stroke?: string;
    tickSize: number;
    classes?: Partial<import("../index.js").ChartsAxisClasses>;
    slots?: Partial<import("../internals/index.js").ChartsAxisSlots>;
    slotProps?: Partial<import("../internals/index.js").ChartsAxisSlotProps>;
    sx?: import("@mui/system").SxProps;
    tickMaxStep?: number;
    tickMinStep?: number;
    tickNumber?: number;
    tickInterval?: "auto" | ((value: any, index: number) => boolean) | any[];
    tickPlacement?: "start" | "end" | "middle" | "extremities";
    tickLabelPlacement?: "middle" | "tick";
    data?: readonly any[] | undefined;
    position?: "left" | "right" | "none";
    width: number;
    zoom: import("../internals/index.js").DefaultizedZoomOptions | undefined;
    id: import("../internals/index.js").AxisId;
    valueFormatter?: (<TScaleName extends keyof import("../internals/index.js").AxisScaleConfig>(value: any, context: import("../index.js").AxisValueFormatterContext<TScaleName>) => string) | undefined;
    dataKey?: string | undefined;
    min?: (number | Date) | undefined;
    max?: (number | Date) | undefined;
    colorMap?: import("../models/colorMapping.js").OrdinalColorConfig | import("../models/colorMapping.js").ContinuousColorConfig | import("../models/colorMapping.js").PiecewiseColorConfig;
    hideTooltip?: boolean | undefined;
    domainLimit?: "nice" | "strict" | ((min: number, max: number) => {
      min: number;
      max: number;
    }) | undefined;
    ignoreTooltip?: boolean | undefined;
    offset: number;
    scaleType: "point";
    groups?: import("../internals/index.js").AxisGroup[];
    colorScale?: import("@mui/x-charts-vendor/d3-scale").ScaleSequential<string, string | null> | import("@mui/x-charts-vendor/d3-scale").ScaleThreshold<number, string | null>;
    triggerTooltip?: boolean;
  } | {
    axis?: "y";
    axisId?: import("../internals/index.js").AxisId;
    disableLine: boolean;
    disableTicks: boolean;
    fill?: string;
    tickLabelStyle?: ChartsTextProps["style"];
    labelStyle?: ChartsTextProps["style"];
    tickLabelInterval?: "auto" | ((value: any, index: number) => boolean);
    label?: string;
    stroke?: string;
    tickSize: number;
    classes?: Partial<import("../index.js").ChartsAxisClasses>;
    slots?: Partial<import("../internals/index.js").ChartsAxisSlots>;
    slotProps?: Partial<import("../internals/index.js").ChartsAxisSlotProps>;
    sx?: import("@mui/system").SxProps;
    tickMaxStep?: number;
    tickMinStep?: number;
    tickNumber?: number;
    tickInterval?: "auto" | ((value: any, index: number) => boolean) | any[];
    tickPlacement?: "start" | "end" | "middle" | "extremities";
    tickLabelPlacement?: "middle" | "tick";
    data?: readonly any[] | undefined;
    position?: "left" | "right" | "none";
    width: number;
    zoom: import("../internals/index.js").DefaultizedZoomOptions | undefined;
    id: import("../internals/index.js").AxisId;
    valueFormatter?: (<TScaleName extends keyof import("../internals/index.js").AxisScaleConfig>(value: any, context: import("../index.js").AxisValueFormatterContext<TScaleName>) => string) | undefined;
    dataKey?: string | undefined;
    min?: (number | Date) | undefined;
    max?: (number | Date) | undefined;
    colorMap?: import("../models/colorMapping.js").OrdinalColorConfig | import("../models/colorMapping.js").ContinuousColorConfig | import("../models/colorMapping.js").PiecewiseColorConfig;
    hideTooltip?: boolean | undefined;
    domainLimit?: "nice" | "strict" | ((min: number, max: number) => {
      min: number;
      max: number;
    }) | undefined;
    ignoreTooltip?: boolean | undefined;
    offset: number;
    scaleType: "point";
    groups?: import("../internals/index.js").AxisGroup[];
    colorScale?: import("@mui/x-charts-vendor/d3-scale").ScaleSequential<string, string | null> | import("@mui/x-charts-vendor/d3-scale").ScaleThreshold<number, string | null>;
    triggerTooltip?: boolean;
  } | {
    axis?: "y";
    axisId?: import("../internals/index.js").AxisId;
    disableLine: boolean;
    disableTicks: boolean;
    fill?: string;
    tickLabelStyle?: ChartsTextProps["style"];
    labelStyle?: ChartsTextProps["style"];
    tickLabelInterval?: "auto" | ((value: any, index: number) => boolean);
    label?: string;
    stroke?: string;
    tickSize: number;
    classes?: Partial<import("../index.js").ChartsAxisClasses>;
    slots?: Partial<import("../internals/index.js").ChartsAxisSlots>;
    slotProps?: Partial<import("../internals/index.js").ChartsAxisSlotProps>;
    sx?: import("@mui/system").SxProps;
    tickMaxStep?: number;
    tickMinStep?: number;
    tickNumber?: number;
    tickInterval?: "auto" | ((value: any, index: number) => boolean) | any[];
    tickPlacement?: "start" | "end" | "middle" | "extremities";
    tickLabelPlacement?: "middle" | "tick";
    data?: readonly any[] | undefined;
    position?: "left" | "right" | "none";
    width: number;
    zoom: import("../internals/index.js").DefaultizedZoomOptions | undefined;
    id: import("../internals/index.js").AxisId;
    valueFormatter?: (<TScaleName extends keyof import("../internals/index.js").AxisScaleConfig>(value: any, context: import("../index.js").AxisValueFormatterContext<TScaleName>) => string) | undefined;
    dataKey?: string | undefined;
    min?: (number | Date) | undefined;
    max?: (number | Date) | undefined;
    colorMap?: import("../models/colorMapping.js").OrdinalColorConfig | import("../models/colorMapping.js").ContinuousColorConfig | import("../models/colorMapping.js").PiecewiseColorConfig;
    hideTooltip?: boolean | undefined;
    domainLimit?: "nice" | "strict" | ((min: number, max: number) => {
      min: number;
      max: number;
    }) | undefined;
    ignoreTooltip?: boolean | undefined;
    offset: number;
    scaleType: "point";
    groups?: import("../internals/index.js").AxisGroup[];
    colorScale?: import("@mui/x-charts-vendor/d3-scale").ScaleSequential<string, string | null> | import("@mui/x-charts-vendor/d3-scale").ScaleThreshold<number, string | null>;
    triggerTooltip?: boolean;
  } | {
    axis?: "y";
    axisId?: import("../internals/index.js").AxisId;
    disableLine: boolean;
    disableTicks: boolean;
    fill?: string;
    tickLabelStyle?: ChartsTextProps["style"];
    labelStyle?: ChartsTextProps["style"];
    tickLabelInterval?: "auto" | ((value: any, index: number) => boolean);
    label?: string;
    stroke?: string;
    tickSize: number;
    classes?: Partial<import("../index.js").ChartsAxisClasses>;
    slots?: Partial<import("../internals/index.js").ChartsAxisSlots>;
    slotProps?: Partial<import("../internals/index.js").ChartsAxisSlotProps>;
    sx?: import("@mui/system").SxProps;
    tickMaxStep?: number;
    tickMinStep?: number;
    tickNumber?: number;
    tickInterval?: "auto" | ((value: any, index: number) => boolean) | any[];
    tickPlacement?: "start" | "end" | "middle" | "extremities";
    tickLabelPlacement?: "middle" | "tick";
    data?: readonly any[] | undefined;
    position?: "left" | "right" | "none";
    width: number;
    zoom: import("../internals/index.js").DefaultizedZoomOptions | undefined;
    id: import("../internals/index.js").AxisId;
    valueFormatter?: (<TScaleName extends keyof import("../internals/index.js").AxisScaleConfig>(value: any, context: import("../index.js").AxisValueFormatterContext<TScaleName>) => string) | undefined;
    dataKey?: string | undefined;
    min?: (number | Date) | undefined;
    max?: (number | Date) | undefined;
    colorMap?: import("../models/colorMapping.js").OrdinalColorConfig | import("../models/colorMapping.js").ContinuousColorConfig | import("../models/colorMapping.js").PiecewiseColorConfig;
    hideTooltip?: boolean | undefined;
    domainLimit?: "nice" | "strict" | ((min: number, max: number) => {
      min: number;
      max: number;
    }) | undefined;
    ignoreTooltip?: boolean | undefined;
    offset: number;
    scaleType: "point";
    groups?: import("../internals/index.js").AxisGroup[];
    colorScale?: import("@mui/x-charts-vendor/d3-scale").ScaleSequential<string, string | null> | import("@mui/x-charts-vendor/d3-scale").ScaleThreshold<number | Date, string | null>;
    triggerTooltip?: boolean;
  } | {
    axis?: "y";
    axisId?: import("../internals/index.js").AxisId;
    disableLine: boolean;
    disableTicks: boolean;
    fill?: string;
    tickLabelStyle?: ChartsTextProps["style"];
    labelStyle?: ChartsTextProps["style"];
    tickLabelInterval?: "auto" | ((value: any, index: number) => boolean);
    label?: string;
    stroke?: string;
    tickSize: number;
    classes?: Partial<import("../index.js").ChartsAxisClasses>;
    slots?: Partial<import("../internals/index.js").ChartsAxisSlots>;
    slotProps?: Partial<import("../internals/index.js").ChartsAxisSlotProps>;
    sx?: import("@mui/system").SxProps;
    tickMaxStep?: number;
    tickMinStep?: number;
    tickNumber?: number;
    tickInterval?: "auto" | ((value: any, index: number) => boolean) | any[];
    tickPlacement?: "start" | "end" | "middle" | "extremities";
    tickLabelPlacement?: "middle" | "tick";
    data?: readonly any[] | undefined;
    position?: "left" | "right" | "none";
    width: number;
    zoom: import("../internals/index.js").DefaultizedZoomOptions | undefined;
    id: import("../internals/index.js").AxisId;
    valueFormatter?: (<TScaleName extends keyof import("../internals/index.js").AxisScaleConfig>(value: any, context: import("../index.js").AxisValueFormatterContext<TScaleName>) => string) | undefined;
    dataKey?: string | undefined;
    min?: (number | Date) | undefined;
    max?: (number | Date) | undefined;
    colorMap?: import("../models/colorMapping.js").ContinuousColorConfig<number | Date> | import("../models/colorMapping.js").PiecewiseColorConfig<number | Date> | undefined;
    hideTooltip?: boolean | undefined;
    domainLimit?: "nice" | "strict" | ((min: number, max: number) => {
      min: number;
      max: number;
    }) | undefined;
    ignoreTooltip?: boolean | undefined;
    offset: number;
    scaleType: "log";
    colorScale?: import("@mui/x-charts-vendor/d3-scale").ScaleSequential<string, string | null> | import("@mui/x-charts-vendor/d3-scale").ScaleThreshold<number | Date, string | null>;
    triggerTooltip?: boolean;
  } | {
    axis?: "y";
    axisId?: import("../internals/index.js").AxisId;
    disableLine: boolean;
    disableTicks: boolean;
    fill?: string;
    tickLabelStyle?: ChartsTextProps["style"];
    labelStyle?: ChartsTextProps["style"];
    tickLabelInterval?: "auto" | ((value: any, index: number) => boolean);
    label?: string;
    stroke?: string;
    tickSize: number;
    classes?: Partial<import("../index.js").ChartsAxisClasses>;
    slots?: Partial<import("../internals/index.js").ChartsAxisSlots>;
    slotProps?: Partial<import("../internals/index.js").ChartsAxisSlotProps>;
    sx?: import("@mui/system").SxProps;
    tickMaxStep?: number;
    tickMinStep?: number;
    tickNumber?: number;
    tickInterval?: "auto" | ((value: any, index: number) => boolean) | any[];
    tickPlacement?: "start" | "end" | "middle" | "extremities";
    tickLabelPlacement?: "middle" | "tick";
    data?: readonly any[] | undefined;
    position?: "left" | "right" | "none";
    width: number;
    zoom: import("../internals/index.js").DefaultizedZoomOptions | undefined;
    id: import("../internals/index.js").AxisId;
    valueFormatter?: (<TScaleName extends keyof import("../internals/index.js").AxisScaleConfig>(value: any, context: import("../index.js").AxisValueFormatterContext<TScaleName>) => string) | undefined;
    dataKey?: string | undefined;
    min?: (number | Date) | undefined;
    max?: (number | Date) | undefined;
    colorMap?: import("../models/colorMapping.js").ContinuousColorConfig<number | Date> | import("../models/colorMapping.js").PiecewiseColorConfig<number | Date> | undefined;
    hideTooltip?: boolean | undefined;
    domainLimit?: "nice" | "strict" | ((min: number, max: number) => {
      min: number;
      max: number;
    }) | undefined;
    ignoreTooltip?: boolean | undefined;
    offset: number;
    scaleType: "log";
    colorScale?: import("@mui/x-charts-vendor/d3-scale").ScaleSequential<string, string | null> | import("@mui/x-charts-vendor/d3-scale").ScaleThreshold<number, string | null>;
    triggerTooltip?: boolean;
  } | {
    axis?: "y";
    axisId?: import("../internals/index.js").AxisId;
    disableLine: boolean;
    disableTicks: boolean;
    fill?: string;
    tickLabelStyle?: ChartsTextProps["style"];
    labelStyle?: ChartsTextProps["style"];
    tickLabelInterval?: "auto" | ((value: any, index: number) => boolean);
    label?: string;
    stroke?: string;
    tickSize: number;
    classes?: Partial<import("../index.js").ChartsAxisClasses>;
    slots?: Partial<import("../internals/index.js").ChartsAxisSlots>;
    slotProps?: Partial<import("../internals/index.js").ChartsAxisSlotProps>;
    sx?: import("@mui/system").SxProps;
    tickMaxStep?: number;
    tickMinStep?: number;
    tickNumber?: number;
    tickInterval?: "auto" | ((value: any, index: number) => boolean) | any[];
    tickPlacement?: "start" | "end" | "middle" | "extremities";
    tickLabelPlacement?: "middle" | "tick";
    data?: readonly any[] | undefined;
    position?: "left" | "right" | "none";
    width: number;
    zoom: import("../internals/index.js").DefaultizedZoomOptions | undefined;
    id: import("../internals/index.js").AxisId;
    valueFormatter?: (<TScaleName extends keyof import("../internals/index.js").AxisScaleConfig>(value: any, context: import("../index.js").AxisValueFormatterContext<TScaleName>) => string) | undefined;
    dataKey?: string | undefined;
    min?: (number | Date) | undefined;
    max?: (number | Date) | undefined;
    colorMap?: import("../models/colorMapping.js").ContinuousColorConfig<number | Date> | import("../models/colorMapping.js").PiecewiseColorConfig<number | Date> | undefined;
    hideTooltip?: boolean | undefined;
    domainLimit?: "nice" | "strict" | ((min: number, max: number) => {
      min: number;
      max: number;
    }) | undefined;
    ignoreTooltip?: boolean | undefined;
    offset: number;
    scaleType: "log";
    colorScale?: import("@mui/x-charts-vendor/d3-scale").ScaleOrdinal<string | number | Date, string, string | null> | import("@mui/x-charts-vendor/d3-scale").ScaleOrdinal<number, string, string | null> | import("@mui/x-charts-vendor/d3-scale").ScaleSequential<string, string | null> | import("@mui/x-charts-vendor/d3-scale").ScaleThreshold<number | Date, string | null>;
    triggerTooltip?: boolean;
  } | {
    axis?: "y";
    axisId?: import("../internals/index.js").AxisId;
    disableLine: boolean;
    disableTicks: boolean;
    fill?: string;
    tickLabelStyle?: ChartsTextProps["style"];
    labelStyle?: ChartsTextProps["style"];
    tickLabelInterval?: "auto" | ((value: any, index: number) => boolean);
    label?: string;
    stroke?: string;
    tickSize: number;
    classes?: Partial<import("../index.js").ChartsAxisClasses>;
    slots?: Partial<import("../internals/index.js").ChartsAxisSlots>;
    slotProps?: Partial<import("../internals/index.js").ChartsAxisSlotProps>;
    sx?: import("@mui/system").SxProps;
    tickMaxStep?: number;
    tickMinStep?: number;
    tickNumber?: number;
    tickInterval?: "auto" | ((value: any, index: number) => boolean) | any[];
    tickPlacement?: "start" | "end" | "middle" | "extremities";
    tickLabelPlacement?: "middle" | "tick";
    data?: readonly any[] | undefined;
    position?: "left" | "right" | "none";
    width: number;
    zoom: import("../internals/index.js").DefaultizedZoomOptions | undefined;
    id: import("../internals/index.js").AxisId;
    valueFormatter?: (<TScaleName extends keyof import("../internals/index.js").AxisScaleConfig>(value: any, context: import("../index.js").AxisValueFormatterContext<TScaleName>) => string) | undefined;
    dataKey?: string | undefined;
    min?: (number | Date) | undefined;
    max?: (number | Date) | undefined;
    colorMap?: import("../models/colorMapping.js").ContinuousColorConfig<number | Date> | import("../models/colorMapping.js").PiecewiseColorConfig<number | Date> | undefined;
    hideTooltip?: boolean | undefined;
    domainLimit?: "nice" | "strict" | ((min: number, max: number) => {
      min: number;
      max: number;
    }) | undefined;
    ignoreTooltip?: boolean | undefined;
    offset: number;
    scaleType: "log";
    colorScale?: import("@mui/x-charts-vendor/d3-scale").ScaleOrdinal<string | number | Date, string, string | null> | import("@mui/x-charts-vendor/d3-scale").ScaleOrdinal<number, string, string | null> | import("@mui/x-charts-vendor/d3-scale").ScaleSequential<string, string | null> | import("@mui/x-charts-vendor/d3-scale").ScaleThreshold<number | Date, string | null>;
    triggerTooltip?: boolean;
  } | {
    axis?: "y";
    axisId?: import("../internals/index.js").AxisId;
    disableLine: boolean;
    disableTicks: boolean;
    fill?: string;
    tickLabelStyle?: ChartsTextProps["style"];
    labelStyle?: ChartsTextProps["style"];
    tickLabelInterval?: "auto" | ((value: any, index: number) => boolean);
    label?: string;
    stroke?: string;
    tickSize: number;
    classes?: Partial<import("../index.js").ChartsAxisClasses>;
    slots?: Partial<import("../internals/index.js").ChartsAxisSlots>;
    slotProps?: Partial<import("../internals/index.js").ChartsAxisSlotProps>;
    sx?: import("@mui/system").SxProps;
    tickMaxStep?: number;
    tickMinStep?: number;
    tickNumber?: number;
    tickInterval?: "auto" | ((value: any, index: number) => boolean) | any[];
    tickPlacement?: "start" | "end" | "middle" | "extremities";
    tickLabelPlacement?: "middle" | "tick";
    data?: readonly any[] | undefined;
    position?: "left" | "right" | "none";
    width: number;
    zoom: import("../internals/index.js").DefaultizedZoomOptions | undefined;
    id: import("../internals/index.js").AxisId;
    valueFormatter?: (<TScaleName extends keyof import("../internals/index.js").AxisScaleConfig>(value: any, context: import("../index.js").AxisValueFormatterContext<TScaleName>) => string) | undefined;
    dataKey?: string | undefined;
    min?: (number | Date) | undefined;
    max?: (number | Date) | undefined;
    colorMap?: import("../models/colorMapping.js").ContinuousColorConfig<number | Date> | import("../models/colorMapping.js").PiecewiseColorConfig<number | Date> | undefined;
    hideTooltip?: boolean | undefined;
    domainLimit?: "nice" | "strict" | ((min: number, max: number) => {
      min: number;
      max: number;
    }) | undefined;
    ignoreTooltip?: boolean | undefined;
    offset: number;
    scaleType: "log";
    colorScale?: import("@mui/x-charts-vendor/d3-scale").ScaleSequential<string, string | null> | import("@mui/x-charts-vendor/d3-scale").ScaleThreshold<number, string | null>;
    triggerTooltip?: boolean;
  } | {
    axis?: "y";
    axisId?: import("../internals/index.js").AxisId;
    disableLine: boolean;
    disableTicks: boolean;
    fill?: string;
    tickLabelStyle?: ChartsTextProps["style"];
    labelStyle?: ChartsTextProps["style"];
    tickLabelInterval?: "auto" | ((value: any, index: number) => boolean);
    label?: string;
    stroke?: string;
    tickSize: number;
    classes?: Partial<import("../index.js").ChartsAxisClasses>;
    slots?: Partial<import("../internals/index.js").ChartsAxisSlots>;
    slotProps?: Partial<import("../internals/index.js").ChartsAxisSlotProps>;
    sx?: import("@mui/system").SxProps;
    tickMaxStep?: number;
    tickMinStep?: number;
    tickNumber?: number;
    tickInterval?: "auto" | ((value: any, index: number) => boolean) | any[];
    tickPlacement?: "start" | "end" | "middle" | "extremities";
    tickLabelPlacement?: "middle" | "tick";
    data?: readonly any[] | undefined;
    position?: "left" | "right" | "none";
    width: number;
    zoom: import("../internals/index.js").DefaultizedZoomOptions | undefined;
    id: import("../internals/index.js").AxisId;
    valueFormatter?: (<TScaleName extends keyof import("../internals/index.js").AxisScaleConfig>(value: any, context: import("../index.js").AxisValueFormatterContext<TScaleName>) => string) | undefined;
    dataKey?: string | undefined;
    min?: (number | Date) | undefined;
    max?: (number | Date) | undefined;
    colorMap?: import("../models/colorMapping.js").ContinuousColorConfig<number | Date> | import("../models/colorMapping.js").PiecewiseColorConfig<number | Date> | undefined;
    hideTooltip?: boolean | undefined;
    domainLimit?: "nice" | "strict" | ((min: number, max: number) => {
      min: number;
      max: number;
    }) | undefined;
    ignoreTooltip?: boolean | undefined;
    offset: number;
    scaleType: "log";
    colorScale?: import("@mui/x-charts-vendor/d3-scale").ScaleSequential<string, string | null> | import("@mui/x-charts-vendor/d3-scale").ScaleThreshold<number, string | null>;
    triggerTooltip?: boolean;
  } | {
    axis?: "y";
    axisId?: import("../internals/index.js").AxisId;
    disableLine: boolean;
    disableTicks: boolean;
    fill?: string;
    tickLabelStyle?: ChartsTextProps["style"];
    labelStyle?: ChartsTextProps["style"];
    tickLabelInterval?: "auto" | ((value: any, index: number) => boolean);
    label?: string;
    stroke?: string;
    tickSize: number;
    classes?: Partial<import("../index.js").ChartsAxisClasses>;
    slots?: Partial<import("../internals/index.js").ChartsAxisSlots>;
    slotProps?: Partial<import("../internals/index.js").ChartsAxisSlotProps>;
    sx?: import("@mui/system").SxProps;
    tickMaxStep?: number;
    tickMinStep?: number;
    tickNumber?: number;
    tickInterval?: "auto" | ((value: any, index: number) => boolean) | any[];
    tickPlacement?: "start" | "end" | "middle" | "extremities";
    tickLabelPlacement?: "middle" | "tick";
    data?: readonly any[] | undefined;
    position?: "left" | "right" | "none";
    width: number;
    zoom: import("../internals/index.js").DefaultizedZoomOptions | undefined;
    id: import("../internals/index.js").AxisId;
    valueFormatter?: (<TScaleName extends keyof import("../internals/index.js").AxisScaleConfig>(value: any, context: import("../index.js").AxisValueFormatterContext<TScaleName>) => string) | undefined;
    dataKey?: string | undefined;
    min?: (number | Date) | undefined;
    max?: (number | Date) | undefined;
    colorMap?: import("../models/colorMapping.js").ContinuousColorConfig<number | Date> | import("../models/colorMapping.js").PiecewiseColorConfig<number | Date> | undefined;
    hideTooltip?: boolean | undefined;
    domainLimit?: "nice" | "strict" | ((min: number, max: number) => {
      min: number;
      max: number;
    }) | undefined;
    ignoreTooltip?: boolean | undefined;
    offset: number;
    scaleType: "log";
    colorScale?: import("@mui/x-charts-vendor/d3-scale").ScaleSequential<string, string | null> | import("@mui/x-charts-vendor/d3-scale").ScaleThreshold<number, string | null>;
    triggerTooltip?: boolean;
  } | {
    axis?: "y";
    axisId?: import("../internals/index.js").AxisId;
    disableLine: boolean;
    disableTicks: boolean;
    fill?: string;
    tickLabelStyle?: ChartsTextProps["style"];
    labelStyle?: ChartsTextProps["style"];
    tickLabelInterval?: "auto" | ((value: any, index: number) => boolean);
    label?: string;
    stroke?: string;
    tickSize: number;
    classes?: Partial<import("../index.js").ChartsAxisClasses>;
    slots?: Partial<import("../internals/index.js").ChartsAxisSlots>;
    slotProps?: Partial<import("../internals/index.js").ChartsAxisSlotProps>;
    sx?: import("@mui/system").SxProps;
    tickMaxStep?: number;
    tickMinStep?: number;
    tickNumber?: number;
    tickInterval?: "auto" | ((value: any, index: number) => boolean) | any[];
    tickPlacement?: "start" | "end" | "middle" | "extremities";
    tickLabelPlacement?: "middle" | "tick";
    data?: readonly any[] | undefined;
    position?: "left" | "right" | "none";
    width: number;
    zoom: import("../internals/index.js").DefaultizedZoomOptions | undefined;
    id: import("../internals/index.js").AxisId;
    valueFormatter?: (<TScaleName extends keyof import("../internals/index.js").AxisScaleConfig>(value: any, context: import("../index.js").AxisValueFormatterContext<TScaleName>) => string) | undefined;
    dataKey?: string | undefined;
    min?: (number | Date) | undefined;
    max?: (number | Date) | undefined;
    colorMap?: import("../models/colorMapping.js").ContinuousColorConfig<number | Date> | import("../models/colorMapping.js").PiecewiseColorConfig<number | Date> | undefined;
    hideTooltip?: boolean | undefined;
    domainLimit?: "nice" | "strict" | ((min: number, max: number) => {
      min: number;
      max: number;
    }) | undefined;
    ignoreTooltip?: boolean | undefined;
    offset: number;
    scaleType: "log";
    colorScale?: import("@mui/x-charts-vendor/d3-scale").ScaleSequential<string, string | null> | import("@mui/x-charts-vendor/d3-scale").ScaleThreshold<number, string | null>;
    triggerTooltip?: boolean;
  } | {
    axis?: "y";
    axisId?: import("../internals/index.js").AxisId;
    disableLine: boolean;
    disableTicks: boolean;
    fill?: string;
    tickLabelStyle?: ChartsTextProps["style"];
    labelStyle?: ChartsTextProps["style"];
    tickLabelInterval?: "auto" | ((value: any, index: number) => boolean);
    label?: string;
    stroke?: string;
    tickSize: number;
    classes?: Partial<import("../index.js").ChartsAxisClasses>;
    slots?: Partial<import("../internals/index.js").ChartsAxisSlots>;
    slotProps?: Partial<import("../internals/index.js").ChartsAxisSlotProps>;
    sx?: import("@mui/system").SxProps;
    tickMaxStep?: number;
    tickMinStep?: number;
    tickNumber?: number;
    tickInterval?: "auto" | ((value: any, index: number) => boolean) | any[];
    tickPlacement?: "start" | "end" | "middle" | "extremities";
    tickLabelPlacement?: "middle" | "tick";
    data?: readonly any[] | undefined;
    position?: "left" | "right" | "none";
    width: number;
    zoom: import("../internals/index.js").DefaultizedZoomOptions | undefined;
    id: import("../internals/index.js").AxisId;
    valueFormatter?: (<TScaleName extends keyof import("../internals/index.js").AxisScaleConfig>(value: any, context: import("../index.js").AxisValueFormatterContext<TScaleName>) => string) | undefined;
    dataKey?: string | undefined;
    min?: (number | Date) | undefined;
    max?: (number | Date) | undefined;
    colorMap?: import("../models/colorMapping.js").ContinuousColorConfig<number | Date> | import("../models/colorMapping.js").PiecewiseColorConfig<number | Date> | undefined;
    hideTooltip?: boolean | undefined;
    domainLimit?: "nice" | "strict" | ((min: number, max: number) => {
      min: number;
      max: number;
    }) | undefined;
    ignoreTooltip?: boolean | undefined;
    offset: number;
    scaleType: "log";
    colorScale?: import("@mui/x-charts-vendor/d3-scale").ScaleSequential<string, string | null> | import("@mui/x-charts-vendor/d3-scale").ScaleThreshold<number | Date, string | null>;
    triggerTooltip?: boolean;
  } | {
    axis?: "y";
    axisId?: import("../internals/index.js").AxisId;
    disableLine: boolean;
    disableTicks: boolean;
    fill?: string;
    tickLabelStyle?: ChartsTextProps["style"];
    labelStyle?: ChartsTextProps["style"];
    tickLabelInterval?: "auto" | ((value: any, index: number) => boolean);
    label?: string;
    stroke?: string;
    tickSize: number;
    classes?: Partial<import("../index.js").ChartsAxisClasses>;
    slots?: Partial<import("../internals/index.js").ChartsAxisSlots>;
    slotProps?: Partial<import("../internals/index.js").ChartsAxisSlotProps>;
    sx?: import("@mui/system").SxProps;
    tickMaxStep?: number;
    tickMinStep?: number;
    tickNumber?: number;
    tickInterval?: "auto" | ((value: any, index: number) => boolean) | any[];
    tickPlacement?: "start" | "end" | "middle" | "extremities";
    tickLabelPlacement?: "middle" | "tick";
    data?: readonly any[] | undefined;
    position?: "left" | "right" | "none";
    width: number;
    zoom: import("../internals/index.js").DefaultizedZoomOptions | undefined;
    id: import("../internals/index.js").AxisId;
    valueFormatter?: (<TScaleName extends keyof import("../internals/index.js").AxisScaleConfig>(value: any, context: import("../index.js").AxisValueFormatterContext<TScaleName>) => string) | undefined;
    dataKey?: string | undefined;
    min?: (number | Date) | undefined;
    max?: (number | Date) | undefined;
    colorMap?: import("../models/colorMapping.js").ContinuousColorConfig<number | Date> | import("../models/colorMapping.js").PiecewiseColorConfig<number | Date> | undefined;
    hideTooltip?: boolean | undefined;
    domainLimit?: "nice" | "strict" | ((min: number, max: number) => {
      min: number;
      max: number;
    }) | undefined;
    ignoreTooltip?: boolean | undefined;
    offset: number;
    scaleType: "symlog";
    constant?: number;
    colorScale?: import("@mui/x-charts-vendor/d3-scale").ScaleSequential<string, string | null> | import("@mui/x-charts-vendor/d3-scale").ScaleThreshold<number | Date, string | null>;
    triggerTooltip?: boolean;
  } | {
    axis?: "y";
    axisId?: import("../internals/index.js").AxisId;
    disableLine: boolean;
    disableTicks: boolean;
    fill?: string;
    tickLabelStyle?: ChartsTextProps["style"];
    labelStyle?: ChartsTextProps["style"];
    tickLabelInterval?: "auto" | ((value: any, index: number) => boolean);
    label?: string;
    stroke?: string;
    tickSize: number;
    classes?: Partial<import("../index.js").ChartsAxisClasses>;
    slots?: Partial<import("../internals/index.js").ChartsAxisSlots>;
    slotProps?: Partial<import("../internals/index.js").ChartsAxisSlotProps>;
    sx?: import("@mui/system").SxProps;
    tickMaxStep?: number;
    tickMinStep?: number;
    tickNumber?: number;
    tickInterval?: "auto" | ((value: any, index: number) => boolean) | any[];
    tickPlacement?: "start" | "end" | "middle" | "extremities";
    tickLabelPlacement?: "middle" | "tick";
    data?: readonly any[] | undefined;
    position?: "left" | "right" | "none";
    width: number;
    zoom: import("../internals/index.js").DefaultizedZoomOptions | undefined;
    id: import("../internals/index.js").AxisId;
    valueFormatter?: (<TScaleName extends keyof import("../internals/index.js").AxisScaleConfig>(value: any, context: import("../index.js").AxisValueFormatterContext<TScaleName>) => string) | undefined;
    dataKey?: string | undefined;
    min?: (number | Date) | undefined;
    max?: (number | Date) | undefined;
    colorMap?: import("../models/colorMapping.js").ContinuousColorConfig<number | Date> | import("../models/colorMapping.js").PiecewiseColorConfig<number | Date> | undefined;
    hideTooltip?: boolean | undefined;
    domainLimit?: "nice" | "strict" | ((min: number, max: number) => {
      min: number;
      max: number;
    }) | undefined;
    ignoreTooltip?: boolean | undefined;
    offset: number;
    scaleType: "symlog";
    constant?: number;
    colorScale?: import("@mui/x-charts-vendor/d3-scale").ScaleSequential<string, string | null> | import("@mui/x-charts-vendor/d3-scale").ScaleThreshold<number, string | null>;
    triggerTooltip?: boolean;
  } | {
    axis?: "y";
    axisId?: import("../internals/index.js").AxisId;
    disableLine: boolean;
    disableTicks: boolean;
    fill?: string;
    tickLabelStyle?: ChartsTextProps["style"];
    labelStyle?: ChartsTextProps["style"];
    tickLabelInterval?: "auto" | ((value: any, index: number) => boolean);
    label?: string;
    stroke?: string;
    tickSize: number;
    classes?: Partial<import("../index.js").ChartsAxisClasses>;
    slots?: Partial<import("../internals/index.js").ChartsAxisSlots>;
    slotProps?: Partial<import("../internals/index.js").ChartsAxisSlotProps>;
    sx?: import("@mui/system").SxProps;
    tickMaxStep?: number;
    tickMinStep?: number;
    tickNumber?: number;
    tickInterval?: "auto" | ((value: any, index: number) => boolean) | any[];
    tickPlacement?: "start" | "end" | "middle" | "extremities";
    tickLabelPlacement?: "middle" | "tick";
    data?: readonly any[] | undefined;
    position?: "left" | "right" | "none";
    width: number;
    zoom: import("../internals/index.js").DefaultizedZoomOptions | undefined;
    id: import("../internals/index.js").AxisId;
    valueFormatter?: (<TScaleName extends keyof import("../internals/index.js").AxisScaleConfig>(value: any, context: import("../index.js").AxisValueFormatterContext<TScaleName>) => string) | undefined;
    dataKey?: string | undefined;
    min?: (number | Date) | undefined;
    max?: (number | Date) | undefined;
    colorMap?: import("../models/colorMapping.js").ContinuousColorConfig<number | Date> | import("../models/colorMapping.js").PiecewiseColorConfig<number | Date> | undefined;
    hideTooltip?: boolean | undefined;
    domainLimit?: "nice" | "strict" | ((min: number, max: number) => {
      min: number;
      max: number;
    }) | undefined;
    ignoreTooltip?: boolean | undefined;
    offset: number;
    scaleType: "symlog";
    constant?: number;
    colorScale?: import("@mui/x-charts-vendor/d3-scale").ScaleOrdinal<string | number | Date, string, string | null> | import("@mui/x-charts-vendor/d3-scale").ScaleOrdinal<number, string, string | null> | import("@mui/x-charts-vendor/d3-scale").ScaleSequential<string, string | null> | import("@mui/x-charts-vendor/d3-scale").ScaleThreshold<number | Date, string | null>;
    triggerTooltip?: boolean;
  } | {
    axis?: "y";
    axisId?: import("../internals/index.js").AxisId;
    disableLine: boolean;
    disableTicks: boolean;
    fill?: string;
    tickLabelStyle?: ChartsTextProps["style"];
    labelStyle?: ChartsTextProps["style"];
    tickLabelInterval?: "auto" | ((value: any, index: number) => boolean);
    label?: string;
    stroke?: string;
    tickSize: number;
    classes?: Partial<import("../index.js").ChartsAxisClasses>;
    slots?: Partial<import("../internals/index.js").ChartsAxisSlots>;
    slotProps?: Partial<import("../internals/index.js").ChartsAxisSlotProps>;
    sx?: import("@mui/system").SxProps;
    tickMaxStep?: number;
    tickMinStep?: number;
    tickNumber?: number;
    tickInterval?: "auto" | ((value: any, index: number) => boolean) | any[];
    tickPlacement?: "start" | "end" | "middle" | "extremities";
    tickLabelPlacement?: "middle" | "tick";
    data?: readonly any[] | undefined;
    position?: "left" | "right" | "none";
    width: number;
    zoom: import("../internals/index.js").DefaultizedZoomOptions | undefined;
    id: import("../internals/index.js").AxisId;
    valueFormatter?: (<TScaleName extends keyof import("../internals/index.js").AxisScaleConfig>(value: any, context: import("../index.js").AxisValueFormatterContext<TScaleName>) => string) | undefined;
    dataKey?: string | undefined;
    min?: (number | Date) | undefined;
    max?: (number | Date) | undefined;
    colorMap?: import("../models/colorMapping.js").ContinuousColorConfig<number | Date> | import("../models/colorMapping.js").PiecewiseColorConfig<number | Date> | undefined;
    hideTooltip?: boolean | undefined;
    domainLimit?: "nice" | "strict" | ((min: number, max: number) => {
      min: number;
      max: number;
    }) | undefined;
    ignoreTooltip?: boolean | undefined;
    offset: number;
    scaleType: "symlog";
    constant?: number;
    colorScale?: import("@mui/x-charts-vendor/d3-scale").ScaleOrdinal<string | number | Date, string, string | null> | import("@mui/x-charts-vendor/d3-scale").ScaleOrdinal<number, string, string | null> | import("@mui/x-charts-vendor/d3-scale").ScaleSequential<string, string | null> | import("@mui/x-charts-vendor/d3-scale").ScaleThreshold<number | Date, string | null>;
    triggerTooltip?: boolean;
  } | {
    axis?: "y";
    axisId?: import("../internals/index.js").AxisId;
    disableLine: boolean;
    disableTicks: boolean;
    fill?: string;
    tickLabelStyle?: ChartsTextProps["style"];
    labelStyle?: ChartsTextProps["style"];
    tickLabelInterval?: "auto" | ((value: any, index: number) => boolean);
    label?: string;
    stroke?: string;
    tickSize: number;
    classes?: Partial<import("../index.js").ChartsAxisClasses>;
    slots?: Partial<import("../internals/index.js").ChartsAxisSlots>;
    slotProps?: Partial<import("../internals/index.js").ChartsAxisSlotProps>;
    sx?: import("@mui/system").SxProps;
    tickMaxStep?: number;
    tickMinStep?: number;
    tickNumber?: number;
    tickInterval?: "auto" | ((value: any, index: number) => boolean) | any[];
    tickPlacement?: "start" | "end" | "middle" | "extremities";
    tickLabelPlacement?: "middle" | "tick";
    data?: readonly any[] | undefined;
    position?: "left" | "right" | "none";
    width: number;
    zoom: import("../internals/index.js").DefaultizedZoomOptions | undefined;
    id: import("../internals/index.js").AxisId;
    valueFormatter?: (<TScaleName extends keyof import("../internals/index.js").AxisScaleConfig>(value: any, context: import("../index.js").AxisValueFormatterContext<TScaleName>) => string) | undefined;
    dataKey?: string | undefined;
    min?: (number | Date) | undefined;
    max?: (number | Date) | undefined;
    colorMap?: import("../models/colorMapping.js").ContinuousColorConfig<number | Date> | import("../models/colorMapping.js").PiecewiseColorConfig<number | Date> | undefined;
    hideTooltip?: boolean | undefined;
    domainLimit?: "nice" | "strict" | ((min: number, max: number) => {
      min: number;
      max: number;
    }) | undefined;
    ignoreTooltip?: boolean | undefined;
    offset: number;
    scaleType: "symlog";
    constant?: number;
    colorScale?: import("@mui/x-charts-vendor/d3-scale").ScaleSequential<string, string | null> | import("@mui/x-charts-vendor/d3-scale").ScaleThreshold<number, string | null>;
    triggerTooltip?: boolean;
  } | {
    axis?: "y";
    axisId?: import("../internals/index.js").AxisId;
    disableLine: boolean;
    disableTicks: boolean;
    fill?: string;
    tickLabelStyle?: ChartsTextProps["style"];
    labelStyle?: ChartsTextProps["style"];
    tickLabelInterval?: "auto" | ((value: any, index: number) => boolean);
    label?: string;
    stroke?: string;
    tickSize: number;
    classes?: Partial<import("../index.js").ChartsAxisClasses>;
    slots?: Partial<import("../internals/index.js").ChartsAxisSlots>;
    slotProps?: Partial<import("../internals/index.js").ChartsAxisSlotProps>;
    sx?: import("@mui/system").SxProps;
    tickMaxStep?: number;
    tickMinStep?: number;
    tickNumber?: number;
    tickInterval?: "auto" | ((value: any, index: number) => boolean) | any[];
    tickPlacement?: "start" | "end" | "middle" | "extremities";
    tickLabelPlacement?: "middle" | "tick";
    data?: readonly any[] | undefined;
    position?: "left" | "right" | "none";
    width: number;
    zoom: import("../internals/index.js").DefaultizedZoomOptions | undefined;
    id: import("../internals/index.js").AxisId;
    valueFormatter?: (<TScaleName extends keyof import("../internals/index.js").AxisScaleConfig>(value: any, context: import("../index.js").AxisValueFormatterContext<TScaleName>) => string) | undefined;
    dataKey?: string | undefined;
    min?: (number | Date) | undefined;
    max?: (number | Date) | undefined;
    colorMap?: import("../models/colorMapping.js").ContinuousColorConfig<number | Date> | import("../models/colorMapping.js").PiecewiseColorConfig<number | Date> | undefined;
    hideTooltip?: boolean | undefined;
    domainLimit?: "nice" | "strict" | ((min: number, max: number) => {
      min: number;
      max: number;
    }) | undefined;
    ignoreTooltip?: boolean | undefined;
    offset: number;
    scaleType: "symlog";
    constant?: number;
    colorScale?: import("@mui/x-charts-vendor/d3-scale").ScaleSequential<string, string | null> | import("@mui/x-charts-vendor/d3-scale").ScaleThreshold<number, string | null>;
    triggerTooltip?: boolean;
  } | {
    axis?: "y";
    axisId?: import("../internals/index.js").AxisId;
    disableLine: boolean;
    disableTicks: boolean;
    fill?: string;
    tickLabelStyle?: ChartsTextProps["style"];
    labelStyle?: ChartsTextProps["style"];
    tickLabelInterval?: "auto" | ((value: any, index: number) => boolean);
    label?: string;
    stroke?: string;
    tickSize: number;
    classes?: Partial<import("../index.js").ChartsAxisClasses>;
    slots?: Partial<import("../internals/index.js").ChartsAxisSlots>;
    slotProps?: Partial<import("../internals/index.js").ChartsAxisSlotProps>;
    sx?: import("@mui/system").SxProps;
    tickMaxStep?: number;
    tickMinStep?: number;
    tickNumber?: number;
    tickInterval?: "auto" | ((value: any, index: number) => boolean) | any[];
    tickPlacement?: "start" | "end" | "middle" | "extremities";
    tickLabelPlacement?: "middle" | "tick";
    data?: readonly any[] | undefined;
    position?: "left" | "right" | "none";
    width: number;
    zoom: import("../internals/index.js").DefaultizedZoomOptions | undefined;
    id: import("../internals/index.js").AxisId;
    valueFormatter?: (<TScaleName extends keyof import("../internals/index.js").AxisScaleConfig>(value: any, context: import("../index.js").AxisValueFormatterContext<TScaleName>) => string) | undefined;
    dataKey?: string | undefined;
    min?: (number | Date) | undefined;
    max?: (number | Date) | undefined;
    colorMap?: import("../models/colorMapping.js").ContinuousColorConfig<number | Date> | import("../models/colorMapping.js").PiecewiseColorConfig<number | Date> | undefined;
    hideTooltip?: boolean | undefined;
    domainLimit?: "nice" | "strict" | ((min: number, max: number) => {
      min: number;
      max: number;
    }) | undefined;
    ignoreTooltip?: boolean | undefined;
    offset: number;
    scaleType: "symlog";
    constant?: number;
    colorScale?: import("@mui/x-charts-vendor/d3-scale").ScaleSequential<string, string | null> | import("@mui/x-charts-vendor/d3-scale").ScaleThreshold<number, string | null>;
    triggerTooltip?: boolean;
  } | {
    axis?: "y";
    axisId?: import("../internals/index.js").AxisId;
    disableLine: boolean;
    disableTicks: boolean;
    fill?: string;
    tickLabelStyle?: ChartsTextProps["style"];
    labelStyle?: ChartsTextProps["style"];
    tickLabelInterval?: "auto" | ((value: any, index: number) => boolean);
    label?: string;
    stroke?: string;
    tickSize: number;
    classes?: Partial<import("../index.js").ChartsAxisClasses>;
    slots?: Partial<import("../internals/index.js").ChartsAxisSlots>;
    slotProps?: Partial<import("../internals/index.js").ChartsAxisSlotProps>;
    sx?: import("@mui/system").SxProps;
    tickMaxStep?: number;
    tickMinStep?: number;
    tickNumber?: number;
    tickInterval?: "auto" | ((value: any, index: number) => boolean) | any[];
    tickPlacement?: "start" | "end" | "middle" | "extremities";
    tickLabelPlacement?: "middle" | "tick";
    data?: readonly any[] | undefined;
    position?: "left" | "right" | "none";
    width: number;
    zoom: import("../internals/index.js").DefaultizedZoomOptions | undefined;
    id: import("../internals/index.js").AxisId;
    valueFormatter?: (<TScaleName extends keyof import("../internals/index.js").AxisScaleConfig>(value: any, context: import("../index.js").AxisValueFormatterContext<TScaleName>) => string) | undefined;
    dataKey?: string | undefined;
    min?: (number | Date) | undefined;
    max?: (number | Date) | undefined;
    colorMap?: import("../models/colorMapping.js").ContinuousColorConfig<number | Date> | import("../models/colorMapping.js").PiecewiseColorConfig<number | Date> | undefined;
    hideTooltip?: boolean | undefined;
    domainLimit?: "nice" | "strict" | ((min: number, max: number) => {
      min: number;
      max: number;
    }) | undefined;
    ignoreTooltip?: boolean | undefined;
    offset: number;
    scaleType: "symlog";
    constant?: number;
    colorScale?: import("@mui/x-charts-vendor/d3-scale").ScaleSequential<string, string | null> | import("@mui/x-charts-vendor/d3-scale").ScaleThreshold<number, string | null>;
    triggerTooltip?: boolean;
  } | {
    axis?: "y";
    axisId?: import("../internals/index.js").AxisId;
    disableLine: boolean;
    disableTicks: boolean;
    fill?: string;
    tickLabelStyle?: ChartsTextProps["style"];
    labelStyle?: ChartsTextProps["style"];
    tickLabelInterval?: "auto" | ((value: any, index: number) => boolean);
    label?: string;
    stroke?: string;
    tickSize: number;
    classes?: Partial<import("../index.js").ChartsAxisClasses>;
    slots?: Partial<import("../internals/index.js").ChartsAxisSlots>;
    slotProps?: Partial<import("../internals/index.js").ChartsAxisSlotProps>;
    sx?: import("@mui/system").SxProps;
    tickMaxStep?: number;
    tickMinStep?: number;
    tickNumber?: number;
    tickInterval?: "auto" | ((value: any, index: number) => boolean) | any[];
    tickPlacement?: "start" | "end" | "middle" | "extremities";
    tickLabelPlacement?: "middle" | "tick";
    data?: readonly any[] | undefined;
    position?: "left" | "right" | "none";
    width: number;
    zoom: import("../internals/index.js").DefaultizedZoomOptions | undefined;
    id: import("../internals/index.js").AxisId;
    valueFormatter?: (<TScaleName extends keyof import("../internals/index.js").AxisScaleConfig>(value: any, context: import("../index.js").AxisValueFormatterContext<TScaleName>) => string) | undefined;
    dataKey?: string | undefined;
    min?: (number | Date) | undefined;
    max?: (number | Date) | undefined;
    colorMap?: import("../models/colorMapping.js").ContinuousColorConfig<number | Date> | import("../models/colorMapping.js").PiecewiseColorConfig<number | Date> | undefined;
    hideTooltip?: boolean | undefined;
    domainLimit?: "nice" | "strict" | ((min: number, max: number) => {
      min: number;
      max: number;
    }) | undefined;
    ignoreTooltip?: boolean | undefined;
    offset: number;
    scaleType: "symlog";
    constant?: number;
    colorScale?: import("@mui/x-charts-vendor/d3-scale").ScaleSequential<string, string | null> | import("@mui/x-charts-vendor/d3-scale").ScaleThreshold<number | Date, string | null>;
    triggerTooltip?: boolean;
  } | {
    axis?: "y";
    axisId?: import("../internals/index.js").AxisId;
    disableLine: boolean;
    disableTicks: boolean;
    fill?: string;
    tickLabelStyle?: ChartsTextProps["style"];
    labelStyle?: ChartsTextProps["style"];
    tickLabelInterval?: "auto" | ((value: any, index: number) => boolean);
    label?: string;
    stroke?: string;
    tickSize: number;
    classes?: Partial<import("../index.js").ChartsAxisClasses>;
    slots?: Partial<import("../internals/index.js").ChartsAxisSlots>;
    slotProps?: Partial<import("../internals/index.js").ChartsAxisSlotProps>;
    sx?: import("@mui/system").SxProps;
    tickMaxStep?: number;
    tickMinStep?: number;
    tickNumber?: number;
    tickInterval?: "auto" | ((value: any, index: number) => boolean) | any[];
    tickPlacement?: "start" | "end" | "middle" | "extremities";
    tickLabelPlacement?: "middle" | "tick";
    data?: readonly any[] | undefined;
    position?: "left" | "right" | "none";
    width: number;
    zoom: import("../internals/index.js").DefaultizedZoomOptions | undefined;
    id: import("../internals/index.js").AxisId;
    valueFormatter?: (<TScaleName extends keyof import("../internals/index.js").AxisScaleConfig>(value: any, context: import("../index.js").AxisValueFormatterContext<TScaleName>) => string) | undefined;
    dataKey?: string | undefined;
    min?: (number | Date) | undefined;
    max?: (number | Date) | undefined;
    colorMap?: import("../models/colorMapping.js").ContinuousColorConfig<number | Date> | import("../models/colorMapping.js").PiecewiseColorConfig<number | Date> | undefined;
    hideTooltip?: boolean | undefined;
    domainLimit?: "nice" | "strict" | ((min: number, max: number) => {
      min: number;
      max: number;
    }) | undefined;
    ignoreTooltip?: boolean | undefined;
    offset: number;
    scaleType: "pow";
    colorScale?: import("@mui/x-charts-vendor/d3-scale").ScaleSequential<string, string | null> | import("@mui/x-charts-vendor/d3-scale").ScaleThreshold<number | Date, string | null>;
    triggerTooltip?: boolean;
  } | {
    axis?: "y";
    axisId?: import("../internals/index.js").AxisId;
    disableLine: boolean;
    disableTicks: boolean;
    fill?: string;
    tickLabelStyle?: ChartsTextProps["style"];
    labelStyle?: ChartsTextProps["style"];
    tickLabelInterval?: "auto" | ((value: any, index: number) => boolean);
    label?: string;
    stroke?: string;
    tickSize: number;
    classes?: Partial<import("../index.js").ChartsAxisClasses>;
    slots?: Partial<import("../internals/index.js").ChartsAxisSlots>;
    slotProps?: Partial<import("../internals/index.js").ChartsAxisSlotProps>;
    sx?: import("@mui/system").SxProps;
    tickMaxStep?: number;
    tickMinStep?: number;
    tickNumber?: number;
    tickInterval?: "auto" | ((value: any, index: number) => boolean) | any[];
    tickPlacement?: "start" | "end" | "middle" | "extremities";
    tickLabelPlacement?: "middle" | "tick";
    data?: readonly any[] | undefined;
    position?: "left" | "right" | "none";
    width: number;
    zoom: import("../internals/index.js").DefaultizedZoomOptions | undefined;
    id: import("../internals/index.js").AxisId;
    valueFormatter?: (<TScaleName extends keyof import("../internals/index.js").AxisScaleConfig>(value: any, context: import("../index.js").AxisValueFormatterContext<TScaleName>) => string) | undefined;
    dataKey?: string | undefined;
    min?: (number | Date) | undefined;
    max?: (number | Date) | undefined;
    colorMap?: import("../models/colorMapping.js").ContinuousColorConfig<number | Date> | import("../models/colorMapping.js").PiecewiseColorConfig<number | Date> | undefined;
    hideTooltip?: boolean | undefined;
    domainLimit?: "nice" | "strict" | ((min: number, max: number) => {
      min: number;
      max: number;
    }) | undefined;
    ignoreTooltip?: boolean | undefined;
    offset: number;
    scaleType: "pow";
    colorScale?: import("@mui/x-charts-vendor/d3-scale").ScaleSequential<string, string | null> | import("@mui/x-charts-vendor/d3-scale").ScaleThreshold<number, string | null>;
    triggerTooltip?: boolean;
  } | {
    axis?: "y";
    axisId?: import("../internals/index.js").AxisId;
    disableLine: boolean;
    disableTicks: boolean;
    fill?: string;
    tickLabelStyle?: ChartsTextProps["style"];
    labelStyle?: ChartsTextProps["style"];
    tickLabelInterval?: "auto" | ((value: any, index: number) => boolean);
    label?: string;
    stroke?: string;
    tickSize: number;
    classes?: Partial<import("../index.js").ChartsAxisClasses>;
    slots?: Partial<import("../internals/index.js").ChartsAxisSlots>;
    slotProps?: Partial<import("../internals/index.js").ChartsAxisSlotProps>;
    sx?: import("@mui/system").SxProps;
    tickMaxStep?: number;
    tickMinStep?: number;
    tickNumber?: number;
    tickInterval?: "auto" | ((value: any, index: number) => boolean) | any[];
    tickPlacement?: "start" | "end" | "middle" | "extremities";
    tickLabelPlacement?: "middle" | "tick";
    data?: readonly any[] | undefined;
    position?: "left" | "right" | "none";
    width: number;
    zoom: import("../internals/index.js").DefaultizedZoomOptions | undefined;
    id: import("../internals/index.js").AxisId;
    valueFormatter?: (<TScaleName extends keyof import("../internals/index.js").AxisScaleConfig>(value: any, context: import("../index.js").AxisValueFormatterContext<TScaleName>) => string) | undefined;
    dataKey?: string | undefined;
    min?: (number | Date) | undefined;
    max?: (number | Date) | undefined;
    colorMap?: import("../models/colorMapping.js").ContinuousColorConfig<number | Date> | import("../models/colorMapping.js").PiecewiseColorConfig<number | Date> | undefined;
    hideTooltip?: boolean | undefined;
    domainLimit?: "nice" | "strict" | ((min: number, max: number) => {
      min: number;
      max: number;
    }) | undefined;
    ignoreTooltip?: boolean | undefined;
    offset: number;
    scaleType: "pow";
    colorScale?: import("@mui/x-charts-vendor/d3-scale").ScaleOrdinal<string | number | Date, string, string | null> | import("@mui/x-charts-vendor/d3-scale").ScaleOrdinal<number, string, string | null> | import("@mui/x-charts-vendor/d3-scale").ScaleSequential<string, string | null> | import("@mui/x-charts-vendor/d3-scale").ScaleThreshold<number | Date, string | null>;
    triggerTooltip?: boolean;
  } | {
    axis?: "y";
    axisId?: import("../internals/index.js").AxisId;
    disableLine: boolean;
    disableTicks: boolean;
    fill?: string;
    tickLabelStyle?: ChartsTextProps["style"];
    labelStyle?: ChartsTextProps["style"];
    tickLabelInterval?: "auto" | ((value: any, index: number) => boolean);
    label?: string;
    stroke?: string;
    tickSize: number;
    classes?: Partial<import("../index.js").ChartsAxisClasses>;
    slots?: Partial<import("../internals/index.js").ChartsAxisSlots>;
    slotProps?: Partial<import("../internals/index.js").ChartsAxisSlotProps>;
    sx?: import("@mui/system").SxProps;
    tickMaxStep?: number;
    tickMinStep?: number;
    tickNumber?: number;
    tickInterval?: "auto" | ((value: any, index: number) => boolean) | any[];
    tickPlacement?: "start" | "end" | "middle" | "extremities";
    tickLabelPlacement?: "middle" | "tick";
    data?: readonly any[] | undefined;
    position?: "left" | "right" | "none";
    width: number;
    zoom: import("../internals/index.js").DefaultizedZoomOptions | undefined;
    id: import("../internals/index.js").AxisId;
    valueFormatter?: (<TScaleName extends keyof import("../internals/index.js").AxisScaleConfig>(value: any, context: import("../index.js").AxisValueFormatterContext<TScaleName>) => string) | undefined;
    dataKey?: string | undefined;
    min?: (number | Date) | undefined;
    max?: (number | Date) | undefined;
    colorMap?: import("../models/colorMapping.js").ContinuousColorConfig<number | Date> | import("../models/colorMapping.js").PiecewiseColorConfig<number | Date> | undefined;
    hideTooltip?: boolean | undefined;
    domainLimit?: "nice" | "strict" | ((min: number, max: number) => {
      min: number;
      max: number;
    }) | undefined;
    ignoreTooltip?: boolean | undefined;
    offset: number;
    scaleType: "pow";
    colorScale?: import("@mui/x-charts-vendor/d3-scale").ScaleOrdinal<string | number | Date, string, string | null> | import("@mui/x-charts-vendor/d3-scale").ScaleOrdinal<number, string, string | null> | import("@mui/x-charts-vendor/d3-scale").ScaleSequential<string, string | null> | import("@mui/x-charts-vendor/d3-scale").ScaleThreshold<number | Date, string | null>;
    triggerTooltip?: boolean;
  } | {
    axis?: "y";
    axisId?: import("../internals/index.js").AxisId;
    disableLine: boolean;
    disableTicks: boolean;
    fill?: string;
    tickLabelStyle?: ChartsTextProps["style"];
    labelStyle?: ChartsTextProps["style"];
    tickLabelInterval?: "auto" | ((value: any, index: number) => boolean);
    label?: string;
    stroke?: string;
    tickSize: number;
    classes?: Partial<import("../index.js").ChartsAxisClasses>;
    slots?: Partial<import("../internals/index.js").ChartsAxisSlots>;
    slotProps?: Partial<import("../internals/index.js").ChartsAxisSlotProps>;
    sx?: import("@mui/system").SxProps;
    tickMaxStep?: number;
    tickMinStep?: number;
    tickNumber?: number;
    tickInterval?: "auto" | ((value: any, index: number) => boolean) | any[];
    tickPlacement?: "start" | "end" | "middle" | "extremities";
    tickLabelPlacement?: "middle" | "tick";
    data?: readonly any[] | undefined;
    position?: "left" | "right" | "none";
    width: number;
    zoom: import("../internals/index.js").DefaultizedZoomOptions | undefined;
    id: import("../internals/index.js").AxisId;
    valueFormatter?: (<TScaleName extends keyof import("../internals/index.js").AxisScaleConfig>(value: any, context: import("../index.js").AxisValueFormatterContext<TScaleName>) => string) | undefined;
    dataKey?: string | undefined;
    min?: (number | Date) | undefined;
    max?: (number | Date) | undefined;
    colorMap?: import("../models/colorMapping.js").ContinuousColorConfig<number | Date> | import("../models/colorMapping.js").PiecewiseColorConfig<number | Date> | undefined;
    hideTooltip?: boolean | undefined;
    domainLimit?: "nice" | "strict" | ((min: number, max: number) => {
      min: number;
      max: number;
    }) | undefined;
    ignoreTooltip?: boolean | undefined;
    offset: number;
    scaleType: "pow";
    colorScale?: import("@mui/x-charts-vendor/d3-scale").ScaleSequential<string, string | null> | import("@mui/x-charts-vendor/d3-scale").ScaleThreshold<number, string | null>;
    triggerTooltip?: boolean;
  } | {
    axis?: "y";
    axisId?: import("../internals/index.js").AxisId;
    disableLine: boolean;
    disableTicks: boolean;
    fill?: string;
    tickLabelStyle?: ChartsTextProps["style"];
    labelStyle?: ChartsTextProps["style"];
    tickLabelInterval?: "auto" | ((value: any, index: number) => boolean);
    label?: string;
    stroke?: string;
    tickSize: number;
    classes?: Partial<import("../index.js").ChartsAxisClasses>;
    slots?: Partial<import("../internals/index.js").ChartsAxisSlots>;
    slotProps?: Partial<import("../internals/index.js").ChartsAxisSlotProps>;
    sx?: import("@mui/system").SxProps;
    tickMaxStep?: number;
    tickMinStep?: number;
    tickNumber?: number;
    tickInterval?: "auto" | ((value: any, index: number) => boolean) | any[];
    tickPlacement?: "start" | "end" | "middle" | "extremities";
    tickLabelPlacement?: "middle" | "tick";
    data?: readonly any[] | undefined;
    position?: "left" | "right" | "none";
    width: number;
    zoom: import("../internals/index.js").DefaultizedZoomOptions | undefined;
    id: import("../internals/index.js").AxisId;
    valueFormatter?: (<TScaleName extends keyof import("../internals/index.js").AxisScaleConfig>(value: any, context: import("../index.js").AxisValueFormatterContext<TScaleName>) => string) | undefined;
    dataKey?: string | undefined;
    min?: (number | Date) | undefined;
    max?: (number | Date) | undefined;
    colorMap?: import("../models/colorMapping.js").ContinuousColorConfig<number | Date> | import("../models/colorMapping.js").PiecewiseColorConfig<number | Date> | undefined;
    hideTooltip?: boolean | undefined;
    domainLimit?: "nice" | "strict" | ((min: number, max: number) => {
      min: number;
      max: number;
    }) | undefined;
    ignoreTooltip?: boolean | undefined;
    offset: number;
    scaleType: "pow";
    colorScale?: import("@mui/x-charts-vendor/d3-scale").ScaleSequential<string, string | null> | import("@mui/x-charts-vendor/d3-scale").ScaleThreshold<number, string | null>;
    triggerTooltip?: boolean;
  } | {
    axis?: "y";
    axisId?: import("../internals/index.js").AxisId;
    disableLine: boolean;
    disableTicks: boolean;
    fill?: string;
    tickLabelStyle?: ChartsTextProps["style"];
    labelStyle?: ChartsTextProps["style"];
    tickLabelInterval?: "auto" | ((value: any, index: number) => boolean);
    label?: string;
    stroke?: string;
    tickSize: number;
    classes?: Partial<import("../index.js").ChartsAxisClasses>;
    slots?: Partial<import("../internals/index.js").ChartsAxisSlots>;
    slotProps?: Partial<import("../internals/index.js").ChartsAxisSlotProps>;
    sx?: import("@mui/system").SxProps;
    tickMaxStep?: number;
    tickMinStep?: number;
    tickNumber?: number;
    tickInterval?: "auto" | ((value: any, index: number) => boolean) | any[];
    tickPlacement?: "start" | "end" | "middle" | "extremities";
    tickLabelPlacement?: "middle" | "tick";
    data?: readonly any[] | undefined;
    position?: "left" | "right" | "none";
    width: number;
    zoom: import("../internals/index.js").DefaultizedZoomOptions | undefined;
    id: import("../internals/index.js").AxisId;
    valueFormatter?: (<TScaleName extends keyof import("../internals/index.js").AxisScaleConfig>(value: any, context: import("../index.js").AxisValueFormatterContext<TScaleName>) => string) | undefined;
    dataKey?: string | undefined;
    min?: (number | Date) | undefined;
    max?: (number | Date) | undefined;
    colorMap?: import("../models/colorMapping.js").ContinuousColorConfig<number | Date> | import("../models/colorMapping.js").PiecewiseColorConfig<number | Date> | undefined;
    hideTooltip?: boolean | undefined;
    domainLimit?: "nice" | "strict" | ((min: number, max: number) => {
      min: number;
      max: number;
    }) | undefined;
    ignoreTooltip?: boolean | undefined;
    offset: number;
    scaleType: "pow";
    colorScale?: import("@mui/x-charts-vendor/d3-scale").ScaleSequential<string, string | null> | import("@mui/x-charts-vendor/d3-scale").ScaleThreshold<number, string | null>;
    triggerTooltip?: boolean;
  } | {
    axis?: "y";
    axisId?: import("../internals/index.js").AxisId;
    disableLine: boolean;
    disableTicks: boolean;
    fill?: string;
    tickLabelStyle?: ChartsTextProps["style"];
    labelStyle?: ChartsTextProps["style"];
    tickLabelInterval?: "auto" | ((value: any, index: number) => boolean);
    label?: string;
    stroke?: string;
    tickSize: number;
    classes?: Partial<import("../index.js").ChartsAxisClasses>;
    slots?: Partial<import("../internals/index.js").ChartsAxisSlots>;
    slotProps?: Partial<import("../internals/index.js").ChartsAxisSlotProps>;
    sx?: import("@mui/system").SxProps;
    tickMaxStep?: number;
    tickMinStep?: number;
    tickNumber?: number;
    tickInterval?: "auto" | ((value: any, index: number) => boolean) | any[];
    tickPlacement?: "start" | "end" | "middle" | "extremities";
    tickLabelPlacement?: "middle" | "tick";
    data?: readonly any[] | undefined;
    position?: "left" | "right" | "none";
    width: number;
    zoom: import("../internals/index.js").DefaultizedZoomOptions | undefined;
    id: import("../internals/index.js").AxisId;
    valueFormatter?: (<TScaleName extends keyof import("../internals/index.js").AxisScaleConfig>(value: any, context: import("../index.js").AxisValueFormatterContext<TScaleName>) => string) | undefined;
    dataKey?: string | undefined;
    min?: (number | Date) | undefined;
    max?: (number | Date) | undefined;
    colorMap?: import("../models/colorMapping.js").ContinuousColorConfig<number | Date> | import("../models/colorMapping.js").PiecewiseColorConfig<number | Date> | undefined;
    hideTooltip?: boolean | undefined;
    domainLimit?: "nice" | "strict" | ((min: number, max: number) => {
      min: number;
      max: number;
    }) | undefined;
    ignoreTooltip?: boolean | undefined;
    offset: number;
    scaleType: "pow";
    colorScale?: import("@mui/x-charts-vendor/d3-scale").ScaleSequential<string, string | null> | import("@mui/x-charts-vendor/d3-scale").ScaleThreshold<number, string | null>;
    triggerTooltip?: boolean;
  } | {
    axis?: "y";
    axisId?: import("../internals/index.js").AxisId;
    disableLine: boolean;
    disableTicks: boolean;
    fill?: string;
    tickLabelStyle?: ChartsTextProps["style"];
    labelStyle?: ChartsTextProps["style"];
    tickLabelInterval?: "auto" | ((value: any, index: number) => boolean);
    label?: string;
    stroke?: string;
    tickSize: number;
    classes?: Partial<import("../index.js").ChartsAxisClasses>;
    slots?: Partial<import("../internals/index.js").ChartsAxisSlots>;
    slotProps?: Partial<import("../internals/index.js").ChartsAxisSlotProps>;
    sx?: import("@mui/system").SxProps;
    tickMaxStep?: number;
    tickMinStep?: number;
    tickNumber?: number;
    tickInterval?: "auto" | ((value: any, index: number) => boolean) | any[];
    tickPlacement?: "start" | "end" | "middle" | "extremities";
    tickLabelPlacement?: "middle" | "tick";
    data?: readonly any[] | undefined;
    position?: "left" | "right" | "none";
    width: number;
    zoom: import("../internals/index.js").DefaultizedZoomOptions | undefined;
    id: import("../internals/index.js").AxisId;
    valueFormatter?: (<TScaleName extends keyof import("../internals/index.js").AxisScaleConfig>(value: any, context: import("../index.js").AxisValueFormatterContext<TScaleName>) => string) | undefined;
    dataKey?: string | undefined;
    min?: (number | Date) | undefined;
    max?: (number | Date) | undefined;
    colorMap?: import("../models/colorMapping.js").ContinuousColorConfig<number | Date> | import("../models/colorMapping.js").PiecewiseColorConfig<number | Date> | undefined;
    hideTooltip?: boolean | undefined;
    domainLimit?: "nice" | "strict" | ((min: number, max: number) => {
      min: number;
      max: number;
    }) | undefined;
    ignoreTooltip?: boolean | undefined;
    offset: number;
    scaleType: "pow";
    colorScale?: import("@mui/x-charts-vendor/d3-scale").ScaleSequential<string, string | null> | import("@mui/x-charts-vendor/d3-scale").ScaleThreshold<number | Date, string | null>;
    triggerTooltip?: boolean;
  } | {
    axis?: "y";
    axisId?: import("../internals/index.js").AxisId;
    disableLine: boolean;
    disableTicks: boolean;
    fill?: string;
    tickLabelStyle?: ChartsTextProps["style"];
    labelStyle?: ChartsTextProps["style"];
    tickLabelInterval?: "auto" | ((value: any, index: number) => boolean);
    label?: string;
    stroke?: string;
    tickSize: number;
    classes?: Partial<import("../index.js").ChartsAxisClasses>;
    slots?: Partial<import("../internals/index.js").ChartsAxisSlots>;
    slotProps?: Partial<import("../internals/index.js").ChartsAxisSlotProps>;
    sx?: import("@mui/system").SxProps;
    tickMaxStep?: number;
    tickMinStep?: number;
    tickNumber?: number;
    tickInterval?: "auto" | ((value: any, index: number) => boolean) | any[];
    tickPlacement?: "start" | "end" | "middle" | "extremities";
    tickLabelPlacement?: "middle" | "tick";
    data?: readonly any[] | undefined;
    position?: "left" | "right" | "none";
    width: number;
    zoom: import("../internals/index.js").DefaultizedZoomOptions | undefined;
    id: import("../internals/index.js").AxisId;
    valueFormatter?: (<TScaleName extends keyof import("../internals/index.js").AxisScaleConfig>(value: any, context: import("../index.js").AxisValueFormatterContext<TScaleName>) => string) | undefined;
    dataKey?: string | undefined;
    min?: (number | Date) | undefined;
    max?: (number | Date) | undefined;
    colorMap?: import("../models/colorMapping.js").ContinuousColorConfig<number | Date> | import("../models/colorMapping.js").PiecewiseColorConfig<number | Date> | undefined;
    hideTooltip?: boolean | undefined;
    domainLimit?: "nice" | "strict" | ((min: number, max: number) => {
      min: number;
      max: number;
    }) | undefined;
    ignoreTooltip?: boolean | undefined;
    offset: number;
    scaleType: "sqrt";
    colorScale?: import("@mui/x-charts-vendor/d3-scale").ScaleSequential<string, string | null> | import("@mui/x-charts-vendor/d3-scale").ScaleThreshold<number | Date, string | null>;
    triggerTooltip?: boolean;
  } | {
    axis?: "y";
    axisId?: import("../internals/index.js").AxisId;
    disableLine: boolean;
    disableTicks: boolean;
    fill?: string;
    tickLabelStyle?: ChartsTextProps["style"];
    labelStyle?: ChartsTextProps["style"];
    tickLabelInterval?: "auto" | ((value: any, index: number) => boolean);
    label?: string;
    stroke?: string;
    tickSize: number;
    classes?: Partial<import("../index.js").ChartsAxisClasses>;
    slots?: Partial<import("../internals/index.js").ChartsAxisSlots>;
    slotProps?: Partial<import("../internals/index.js").ChartsAxisSlotProps>;
    sx?: import("@mui/system").SxProps;
    tickMaxStep?: number;
    tickMinStep?: number;
    tickNumber?: number;
    tickInterval?: "auto" | ((value: any, index: number) => boolean) | any[];
    tickPlacement?: "start" | "end" | "middle" | "extremities";
    tickLabelPlacement?: "middle" | "tick";
    data?: readonly any[] | undefined;
    position?: "left" | "right" | "none";
    width: number;
    zoom: import("../internals/index.js").DefaultizedZoomOptions | undefined;
    id: import("../internals/index.js").AxisId;
    valueFormatter?: (<TScaleName extends keyof import("../internals/index.js").AxisScaleConfig>(value: any, context: import("../index.js").AxisValueFormatterContext<TScaleName>) => string) | undefined;
    dataKey?: string | undefined;
    min?: (number | Date) | undefined;
    max?: (number | Date) | undefined;
    colorMap?: import("../models/colorMapping.js").ContinuousColorConfig<number | Date> | import("../models/colorMapping.js").PiecewiseColorConfig<number | Date> | undefined;
    hideTooltip?: boolean | undefined;
    domainLimit?: "nice" | "strict" | ((min: number, max: number) => {
      min: number;
      max: number;
    }) | undefined;
    ignoreTooltip?: boolean | undefined;
    offset: number;
    scaleType: "sqrt";
    colorScale?: import("@mui/x-charts-vendor/d3-scale").ScaleSequential<string, string | null> | import("@mui/x-charts-vendor/d3-scale").ScaleThreshold<number, string | null>;
    triggerTooltip?: boolean;
  } | {
    axis?: "y";
    axisId?: import("../internals/index.js").AxisId;
    disableLine: boolean;
    disableTicks: boolean;
    fill?: string;
    tickLabelStyle?: ChartsTextProps["style"];
    labelStyle?: ChartsTextProps["style"];
    tickLabelInterval?: "auto" | ((value: any, index: number) => boolean);
    label?: string;
    stroke?: string;
    tickSize: number;
    classes?: Partial<import("../index.js").ChartsAxisClasses>;
    slots?: Partial<import("../internals/index.js").ChartsAxisSlots>;
    slotProps?: Partial<import("../internals/index.js").ChartsAxisSlotProps>;
    sx?: import("@mui/system").SxProps;
    tickMaxStep?: number;
    tickMinStep?: number;
    tickNumber?: number;
    tickInterval?: "auto" | ((value: any, index: number) => boolean) | any[];
    tickPlacement?: "start" | "end" | "middle" | "extremities";
    tickLabelPlacement?: "middle" | "tick";
    data?: readonly any[] | undefined;
    position?: "left" | "right" | "none";
    width: number;
    zoom: import("../internals/index.js").DefaultizedZoomOptions | undefined;
    id: import("../internals/index.js").AxisId;
    valueFormatter?: (<TScaleName extends keyof import("../internals/index.js").AxisScaleConfig>(value: any, context: import("../index.js").AxisValueFormatterContext<TScaleName>) => string) | undefined;
    dataKey?: string | undefined;
    min?: (number | Date) | undefined;
    max?: (number | Date) | undefined;
    colorMap?: import("../models/colorMapping.js").ContinuousColorConfig<number | Date> | import("../models/colorMapping.js").PiecewiseColorConfig<number | Date> | undefined;
    hideTooltip?: boolean | undefined;
    domainLimit?: "nice" | "strict" | ((min: number, max: number) => {
      min: number;
      max: number;
    }) | undefined;
    ignoreTooltip?: boolean | undefined;
    offset: number;
    scaleType: "sqrt";
    colorScale?: import("@mui/x-charts-vendor/d3-scale").ScaleOrdinal<string | number | Date, string, string | null> | import("@mui/x-charts-vendor/d3-scale").ScaleOrdinal<number, string, string | null> | import("@mui/x-charts-vendor/d3-scale").ScaleSequential<string, string | null> | import("@mui/x-charts-vendor/d3-scale").ScaleThreshold<number | Date, string | null>;
    triggerTooltip?: boolean;
  } | {
    axis?: "y";
    axisId?: import("../internals/index.js").AxisId;
    disableLine: boolean;
    disableTicks: boolean;
    fill?: string;
    tickLabelStyle?: ChartsTextProps["style"];
    labelStyle?: ChartsTextProps["style"];
    tickLabelInterval?: "auto" | ((value: any, index: number) => boolean);
    label?: string;
    stroke?: string;
    tickSize: number;
    classes?: Partial<import("../index.js").ChartsAxisClasses>;
    slots?: Partial<import("../internals/index.js").ChartsAxisSlots>;
    slotProps?: Partial<import("../internals/index.js").ChartsAxisSlotProps>;
    sx?: import("@mui/system").SxProps;
    tickMaxStep?: number;
    tickMinStep?: number;
    tickNumber?: number;
    tickInterval?: "auto" | ((value: any, index: number) => boolean) | any[];
    tickPlacement?: "start" | "end" | "middle" | "extremities";
    tickLabelPlacement?: "middle" | "tick";
    data?: readonly any[] | undefined;
    position?: "left" | "right" | "none";
    width: number;
    zoom: import("../internals/index.js").DefaultizedZoomOptions | undefined;
    id: import("../internals/index.js").AxisId;
    valueFormatter?: (<TScaleName extends keyof import("../internals/index.js").AxisScaleConfig>(value: any, context: import("../index.js").AxisValueFormatterContext<TScaleName>) => string) | undefined;
    dataKey?: string | undefined;
    min?: (number | Date) | undefined;
    max?: (number | Date) | undefined;
    colorMap?: import("../models/colorMapping.js").ContinuousColorConfig<number | Date> | import("../models/colorMapping.js").PiecewiseColorConfig<number | Date> | undefined;
    hideTooltip?: boolean | undefined;
    domainLimit?: "nice" | "strict" | ((min: number, max: number) => {
      min: number;
      max: number;
    }) | undefined;
    ignoreTooltip?: boolean | undefined;
    offset: number;
    scaleType: "sqrt";
    colorScale?: import("@mui/x-charts-vendor/d3-scale").ScaleOrdinal<string | number | Date, string, string | null> | import("@mui/x-charts-vendor/d3-scale").ScaleOrdinal<number, string, string | null> | import("@mui/x-charts-vendor/d3-scale").ScaleSequential<string, string | null> | import("@mui/x-charts-vendor/d3-scale").ScaleThreshold<number | Date, string | null>;
    triggerTooltip?: boolean;
  } | {
    axis?: "y";
    axisId?: import("../internals/index.js").AxisId;
    disableLine: boolean;
    disableTicks: boolean;
    fill?: string;
    tickLabelStyle?: ChartsTextProps["style"];
    labelStyle?: ChartsTextProps["style"];
    tickLabelInterval?: "auto" | ((value: any, index: number) => boolean);
    label?: string;
    stroke?: string;
    tickSize: number;
    classes?: Partial<import("../index.js").ChartsAxisClasses>;
    slots?: Partial<import("../internals/index.js").ChartsAxisSlots>;
    slotProps?: Partial<import("../internals/index.js").ChartsAxisSlotProps>;
    sx?: import("@mui/system").SxProps;
    tickMaxStep?: number;
    tickMinStep?: number;
    tickNumber?: number;
    tickInterval?: "auto" | ((value: any, index: number) => boolean) | any[];
    tickPlacement?: "start" | "end" | "middle" | "extremities";
    tickLabelPlacement?: "middle" | "tick";
    data?: readonly any[] | undefined;
    position?: "left" | "right" | "none";
    width: number;
    zoom: import("../internals/index.js").DefaultizedZoomOptions | undefined;
    id: import("../internals/index.js").AxisId;
    valueFormatter?: (<TScaleName extends keyof import("../internals/index.js").AxisScaleConfig>(value: any, context: import("../index.js").AxisValueFormatterContext<TScaleName>) => string) | undefined;
    dataKey?: string | undefined;
    min?: (number | Date) | undefined;
    max?: (number | Date) | undefined;
    colorMap?: import("../models/colorMapping.js").ContinuousColorConfig<number | Date> | import("../models/colorMapping.js").PiecewiseColorConfig<number | Date> | undefined;
    hideTooltip?: boolean | undefined;
    domainLimit?: "nice" | "strict" | ((min: number, max: number) => {
      min: number;
      max: number;
    }) | undefined;
    ignoreTooltip?: boolean | undefined;
    offset: number;
    scaleType: "sqrt";
    colorScale?: import("@mui/x-charts-vendor/d3-scale").ScaleSequential<string, string | null> | import("@mui/x-charts-vendor/d3-scale").ScaleThreshold<number, string | null>;
    triggerTooltip?: boolean;
  } | {
    axis?: "y";
    axisId?: import("../internals/index.js").AxisId;
    disableLine: boolean;
    disableTicks: boolean;
    fill?: string;
    tickLabelStyle?: ChartsTextProps["style"];
    labelStyle?: ChartsTextProps["style"];
    tickLabelInterval?: "auto" | ((value: any, index: number) => boolean);
    label?: string;
    stroke?: string;
    tickSize: number;
    classes?: Partial<import("../index.js").ChartsAxisClasses>;
    slots?: Partial<import("../internals/index.js").ChartsAxisSlots>;
    slotProps?: Partial<import("../internals/index.js").ChartsAxisSlotProps>;
    sx?: import("@mui/system").SxProps;
    tickMaxStep?: number;
    tickMinStep?: number;
    tickNumber?: number;
    tickInterval?: "auto" | ((value: any, index: number) => boolean) | any[];
    tickPlacement?: "start" | "end" | "middle" | "extremities";
    tickLabelPlacement?: "middle" | "tick";
    data?: readonly any[] | undefined;
    position?: "left" | "right" | "none";
    width: number;
    zoom: import("../internals/index.js").DefaultizedZoomOptions | undefined;
    id: import("../internals/index.js").AxisId;
    valueFormatter?: (<TScaleName extends keyof import("../internals/index.js").AxisScaleConfig>(value: any, context: import("../index.js").AxisValueFormatterContext<TScaleName>) => string) | undefined;
    dataKey?: string | undefined;
    min?: (number | Date) | undefined;
    max?: (number | Date) | undefined;
    colorMap?: import("../models/colorMapping.js").ContinuousColorConfig<number | Date> | import("../models/colorMapping.js").PiecewiseColorConfig<number | Date> | undefined;
    hideTooltip?: boolean | undefined;
    domainLimit?: "nice" | "strict" | ((min: number, max: number) => {
      min: number;
      max: number;
    }) | undefined;
    ignoreTooltip?: boolean | undefined;
    offset: number;
    scaleType: "sqrt";
    colorScale?: import("@mui/x-charts-vendor/d3-scale").ScaleSequential<string, string | null> | import("@mui/x-charts-vendor/d3-scale").ScaleThreshold<number, string | null>;
    triggerTooltip?: boolean;
  } | {
    axis?: "y";
    axisId?: import("../internals/index.js").AxisId;
    disableLine: boolean;
    disableTicks: boolean;
    fill?: string;
    tickLabelStyle?: ChartsTextProps["style"];
    labelStyle?: ChartsTextProps["style"];
    tickLabelInterval?: "auto" | ((value: any, index: number) => boolean);
    label?: string;
    stroke?: string;
    tickSize: number;
    classes?: Partial<import("../index.js").ChartsAxisClasses>;
    slots?: Partial<import("../internals/index.js").ChartsAxisSlots>;
    slotProps?: Partial<import("../internals/index.js").ChartsAxisSlotProps>;
    sx?: import("@mui/system").SxProps;
    tickMaxStep?: number;
    tickMinStep?: number;
    tickNumber?: number;
    tickInterval?: "auto" | ((value: any, index: number) => boolean) | any[];
    tickPlacement?: "start" | "end" | "middle" | "extremities";
    tickLabelPlacement?: "middle" | "tick";
    data?: readonly any[] | undefined;
    position?: "left" | "right" | "none";
    width: number;
    zoom: import("../internals/index.js").DefaultizedZoomOptions | undefined;
    id: import("../internals/index.js").AxisId;
    valueFormatter?: (<TScaleName extends keyof import("../internals/index.js").AxisScaleConfig>(value: any, context: import("../index.js").AxisValueFormatterContext<TScaleName>) => string) | undefined;
    dataKey?: string | undefined;
    min?: (number | Date) | undefined;
    max?: (number | Date) | undefined;
    colorMap?: import("../models/colorMapping.js").ContinuousColorConfig<number | Date> | import("../models/colorMapping.js").PiecewiseColorConfig<number | Date> | undefined;
    hideTooltip?: boolean | undefined;
    domainLimit?: "nice" | "strict" | ((min: number, max: number) => {
      min: number;
      max: number;
    }) | undefined;
    ignoreTooltip?: boolean | undefined;
    offset: number;
    scaleType: "sqrt";
    colorScale?: import("@mui/x-charts-vendor/d3-scale").ScaleSequential<string, string | null> | import("@mui/x-charts-vendor/d3-scale").ScaleThreshold<number, string | null>;
    triggerTooltip?: boolean;
  } | {
    axis?: "y";
    axisId?: import("../internals/index.js").AxisId;
    disableLine: boolean;
    disableTicks: boolean;
    fill?: string;
    tickLabelStyle?: ChartsTextProps["style"];
    labelStyle?: ChartsTextProps["style"];
    tickLabelInterval?: "auto" | ((value: any, index: number) => boolean);
    label?: string;
    stroke?: string;
    tickSize: number;
    classes?: Partial<import("../index.js").ChartsAxisClasses>;
    slots?: Partial<import("../internals/index.js").ChartsAxisSlots>;
    slotProps?: Partial<import("../internals/index.js").ChartsAxisSlotProps>;
    sx?: import("@mui/system").SxProps;
    tickMaxStep?: number;
    tickMinStep?: number;
    tickNumber?: number;
    tickInterval?: "auto" | ((value: any, index: number) => boolean) | any[];
    tickPlacement?: "start" | "end" | "middle" | "extremities";
    tickLabelPlacement?: "middle" | "tick";
    data?: readonly any[] | undefined;
    position?: "left" | "right" | "none";
    width: number;
    zoom: import("../internals/index.js").DefaultizedZoomOptions | undefined;
    id: import("../internals/index.js").AxisId;
    valueFormatter?: (<TScaleName extends keyof import("../internals/index.js").AxisScaleConfig>(value: any, context: import("../index.js").AxisValueFormatterContext<TScaleName>) => string) | undefined;
    dataKey?: string | undefined;
    min?: (number | Date) | undefined;
    max?: (number | Date) | undefined;
    colorMap?: import("../models/colorMapping.js").ContinuousColorConfig<number | Date> | import("../models/colorMapping.js").PiecewiseColorConfig<number | Date> | undefined;
    hideTooltip?: boolean | undefined;
    domainLimit?: "nice" | "strict" | ((min: number, max: number) => {
      min: number;
      max: number;
    }) | undefined;
    ignoreTooltip?: boolean | undefined;
    offset: number;
    scaleType: "sqrt";
    colorScale?: import("@mui/x-charts-vendor/d3-scale").ScaleSequential<string, string | null> | import("@mui/x-charts-vendor/d3-scale").ScaleThreshold<number, string | null>;
    triggerTooltip?: boolean;
  } | {
    axis?: "y";
    axisId?: import("../internals/index.js").AxisId;
    disableLine: boolean;
    disableTicks: boolean;
    fill?: string;
    tickLabelStyle?: ChartsTextProps["style"];
    labelStyle?: ChartsTextProps["style"];
    tickLabelInterval?: "auto" | ((value: any, index: number) => boolean);
    label?: string;
    stroke?: string;
    tickSize: number;
    classes?: Partial<import("../index.js").ChartsAxisClasses>;
    slots?: Partial<import("../internals/index.js").ChartsAxisSlots>;
    slotProps?: Partial<import("../internals/index.js").ChartsAxisSlotProps>;
    sx?: import("@mui/system").SxProps;
    tickMaxStep?: number;
    tickMinStep?: number;
    tickNumber?: number;
    tickInterval?: "auto" | ((value: any, index: number) => boolean) | any[];
    tickPlacement?: "start" | "end" | "middle" | "extremities";
    tickLabelPlacement?: "middle" | "tick";
    data?: readonly any[] | undefined;
    position?: "left" | "right" | "none";
    width: number;
    zoom: import("../internals/index.js").DefaultizedZoomOptions | undefined;
    id: import("../internals/index.js").AxisId;
    valueFormatter?: (<TScaleName extends keyof import("../internals/index.js").AxisScaleConfig>(value: any, context: import("../index.js").AxisValueFormatterContext<TScaleName>) => string) | undefined;
    dataKey?: string | undefined;
    min?: (number | Date) | undefined;
    max?: (number | Date) | undefined;
    colorMap?: import("../models/colorMapping.js").ContinuousColorConfig<number | Date> | import("../models/colorMapping.js").PiecewiseColorConfig<number | Date> | undefined;
    hideTooltip?: boolean | undefined;
    domainLimit?: "nice" | "strict" | ((min: number, max: number) => {
      min: number;
      max: number;
    }) | undefined;
    ignoreTooltip?: boolean | undefined;
    offset: number;
    scaleType: "sqrt";
    colorScale?: import("@mui/x-charts-vendor/d3-scale").ScaleSequential<string, string | null> | import("@mui/x-charts-vendor/d3-scale").ScaleThreshold<number | Date, string | null>;
    triggerTooltip?: boolean;
  } | {
    axis?: "y";
    axisId?: import("../internals/index.js").AxisId;
    disableLine: boolean;
    disableTicks: boolean;
    fill?: string;
    tickLabelStyle?: ChartsTextProps["style"];
    labelStyle?: ChartsTextProps["style"];
    tickLabelInterval?: "auto" | ((value: any, index: number) => boolean);
    label?: string;
    stroke?: string;
    tickSize: number;
    classes?: Partial<import("../index.js").ChartsAxisClasses>;
    slots?: Partial<import("../internals/index.js").ChartsAxisSlots>;
    slotProps?: Partial<import("../internals/index.js").ChartsAxisSlotProps>;
    sx?: import("@mui/system").SxProps;
    tickMaxStep?: number;
    tickMinStep?: number;
    tickNumber?: number;
    tickInterval?: "auto" | ((value: any, index: number) => boolean) | any[];
    tickPlacement?: "start" | "end" | "middle" | "extremities";
    tickLabelPlacement?: "middle" | "tick";
    data?: readonly any[] | undefined;
    position?: "left" | "right" | "none";
    width: number;
    zoom: import("../internals/index.js").DefaultizedZoomOptions | undefined;
    id: import("../internals/index.js").AxisId;
    valueFormatter?: (<TScaleName extends keyof import("../internals/index.js").AxisScaleConfig>(value: any, context: import("../index.js").AxisValueFormatterContext<TScaleName>) => string) | undefined;
    dataKey?: string | undefined;
    min?: (number | Date) | undefined;
    max?: (number | Date) | undefined;
    colorMap?: import("../models/colorMapping.js").ContinuousColorConfig<number | Date> | import("../models/colorMapping.js").PiecewiseColorConfig<number | Date> | undefined;
    hideTooltip?: boolean | undefined;
    domainLimit?: "nice" | "strict" | ((min: number, max: number) => {
      min: number;
      max: number;
    }) | undefined;
    ignoreTooltip?: boolean | undefined;
    offset: number;
    scaleType: "utc";
    colorScale?: import("@mui/x-charts-vendor/d3-scale").ScaleSequential<string, string | null> | import("@mui/x-charts-vendor/d3-scale").ScaleThreshold<number | Date, string | null>;
    triggerTooltip?: boolean;
  } | {
    axis?: "y";
    axisId?: import("../internals/index.js").AxisId;
    disableLine: boolean;
    disableTicks: boolean;
    fill?: string;
    tickLabelStyle?: ChartsTextProps["style"];
    labelStyle?: ChartsTextProps["style"];
    tickLabelInterval?: "auto" | ((value: any, index: number) => boolean);
    label?: string;
    stroke?: string;
    tickSize: number;
    classes?: Partial<import("../index.js").ChartsAxisClasses>;
    slots?: Partial<import("../internals/index.js").ChartsAxisSlots>;
    slotProps?: Partial<import("../internals/index.js").ChartsAxisSlotProps>;
    sx?: import("@mui/system").SxProps;
    tickMaxStep?: number;
    tickMinStep?: number;
    tickNumber?: number;
    tickInterval?: "auto" | ((value: any, index: number) => boolean) | any[];
    tickPlacement?: "start" | "end" | "middle" | "extremities";
    tickLabelPlacement?: "middle" | "tick";
    data?: readonly any[] | undefined;
    position?: "left" | "right" | "none";
    width: number;
    zoom: import("../internals/index.js").DefaultizedZoomOptions | undefined;
    id: import("../internals/index.js").AxisId;
    valueFormatter?: (<TScaleName extends keyof import("../internals/index.js").AxisScaleConfig>(value: any, context: import("../index.js").AxisValueFormatterContext<TScaleName>) => string) | undefined;
    dataKey?: string | undefined;
    min?: (number | Date) | undefined;
    max?: (number | Date) | undefined;
    colorMap?: import("../models/colorMapping.js").ContinuousColorConfig<number | Date> | import("../models/colorMapping.js").PiecewiseColorConfig<number | Date> | undefined;
    hideTooltip?: boolean | undefined;
    domainLimit?: "nice" | "strict" | ((min: number, max: number) => {
      min: number;
      max: number;
    }) | undefined;
    ignoreTooltip?: boolean | undefined;
    offset: number;
    scaleType: "utc";
    colorScale?: import("@mui/x-charts-vendor/d3-scale").ScaleSequential<string, string | null> | import("@mui/x-charts-vendor/d3-scale").ScaleThreshold<number, string | null>;
    triggerTooltip?: boolean;
  } | {
    axis?: "y";
    axisId?: import("../internals/index.js").AxisId;
    disableLine: boolean;
    disableTicks: boolean;
    fill?: string;
    tickLabelStyle?: ChartsTextProps["style"];
    labelStyle?: ChartsTextProps["style"];
    tickLabelInterval?: "auto" | ((value: any, index: number) => boolean);
    label?: string;
    stroke?: string;
    tickSize: number;
    classes?: Partial<import("../index.js").ChartsAxisClasses>;
    slots?: Partial<import("../internals/index.js").ChartsAxisSlots>;
    slotProps?: Partial<import("../internals/index.js").ChartsAxisSlotProps>;
    sx?: import("@mui/system").SxProps;
    tickMaxStep?: number;
    tickMinStep?: number;
    tickNumber?: number;
    tickInterval?: "auto" | ((value: any, index: number) => boolean) | any[];
    tickPlacement?: "start" | "end" | "middle" | "extremities";
    tickLabelPlacement?: "middle" | "tick";
    data?: readonly any[] | undefined;
    position?: "left" | "right" | "none";
    width: number;
    zoom: import("../internals/index.js").DefaultizedZoomOptions | undefined;
    id: import("../internals/index.js").AxisId;
    valueFormatter?: (<TScaleName extends keyof import("../internals/index.js").AxisScaleConfig>(value: any, context: import("../index.js").AxisValueFormatterContext<TScaleName>) => string) | undefined;
    dataKey?: string | undefined;
    min?: (number | Date) | undefined;
    max?: (number | Date) | undefined;
    colorMap?: import("../models/colorMapping.js").ContinuousColorConfig<number | Date> | import("../models/colorMapping.js").PiecewiseColorConfig<number | Date> | undefined;
    hideTooltip?: boolean | undefined;
    domainLimit?: "nice" | "strict" | ((min: number, max: number) => {
      min: number;
      max: number;
    }) | undefined;
    ignoreTooltip?: boolean | undefined;
    offset: number;
    scaleType: "utc";
    colorScale?: import("@mui/x-charts-vendor/d3-scale").ScaleOrdinal<string | number | Date, string, string | null> | import("@mui/x-charts-vendor/d3-scale").ScaleOrdinal<number, string, string | null> | import("@mui/x-charts-vendor/d3-scale").ScaleSequential<string, string | null> | import("@mui/x-charts-vendor/d3-scale").ScaleThreshold<number | Date, string | null>;
    triggerTooltip?: boolean;
  } | {
    axis?: "y";
    axisId?: import("../internals/index.js").AxisId;
    disableLine: boolean;
    disableTicks: boolean;
    fill?: string;
    tickLabelStyle?: ChartsTextProps["style"];
    labelStyle?: ChartsTextProps["style"];
    tickLabelInterval?: "auto" | ((value: any, index: number) => boolean);
    label?: string;
    stroke?: string;
    tickSize: number;
    classes?: Partial<import("../index.js").ChartsAxisClasses>;
    slots?: Partial<import("../internals/index.js").ChartsAxisSlots>;
    slotProps?: Partial<import("../internals/index.js").ChartsAxisSlotProps>;
    sx?: import("@mui/system").SxProps;
    tickMaxStep?: number;
    tickMinStep?: number;
    tickNumber?: number;
    tickInterval?: "auto" | ((value: any, index: number) => boolean) | any[];
    tickPlacement?: "start" | "end" | "middle" | "extremities";
    tickLabelPlacement?: "middle" | "tick";
    data?: readonly any[] | undefined;
    position?: "left" | "right" | "none";
    width: number;
    zoom: import("../internals/index.js").DefaultizedZoomOptions | undefined;
    id: import("../internals/index.js").AxisId;
    valueFormatter?: (<TScaleName extends keyof import("../internals/index.js").AxisScaleConfig>(value: any, context: import("../index.js").AxisValueFormatterContext<TScaleName>) => string) | undefined;
    dataKey?: string | undefined;
    min?: (number | Date) | undefined;
    max?: (number | Date) | undefined;
    colorMap?: import("../models/colorMapping.js").ContinuousColorConfig<number | Date> | import("../models/colorMapping.js").PiecewiseColorConfig<number | Date> | undefined;
    hideTooltip?: boolean | undefined;
    domainLimit?: "nice" | "strict" | ((min: number, max: number) => {
      min: number;
      max: number;
    }) | undefined;
    ignoreTooltip?: boolean | undefined;
    offset: number;
    scaleType: "utc";
    colorScale?: import("@mui/x-charts-vendor/d3-scale").ScaleOrdinal<string | number | Date, string, string | null> | import("@mui/x-charts-vendor/d3-scale").ScaleOrdinal<number, string, string | null> | import("@mui/x-charts-vendor/d3-scale").ScaleSequential<string, string | null> | import("@mui/x-charts-vendor/d3-scale").ScaleThreshold<number | Date, string | null>;
    triggerTooltip?: boolean;
  } | {
    axis?: "y";
    axisId?: import("../internals/index.js").AxisId;
    disableLine: boolean;
    disableTicks: boolean;
    fill?: string;
    tickLabelStyle?: ChartsTextProps["style"];
    labelStyle?: ChartsTextProps["style"];
    tickLabelInterval?: "auto" | ((value: any, index: number) => boolean);
    label?: string;
    stroke?: string;
    tickSize: number;
    classes?: Partial<import("../index.js").ChartsAxisClasses>;
    slots?: Partial<import("../internals/index.js").ChartsAxisSlots>;
    slotProps?: Partial<import("../internals/index.js").ChartsAxisSlotProps>;
    sx?: import("@mui/system").SxProps;
    tickMaxStep?: number;
    tickMinStep?: number;
    tickNumber?: number;
    tickInterval?: "auto" | ((value: any, index: number) => boolean) | any[];
    tickPlacement?: "start" | "end" | "middle" | "extremities";
    tickLabelPlacement?: "middle" | "tick";
    data?: readonly any[] | undefined;
    position?: "left" | "right" | "none";
    width: number;
    zoom: import("../internals/index.js").DefaultizedZoomOptions | undefined;
    id: import("../internals/index.js").AxisId;
    valueFormatter?: (<TScaleName extends keyof import("../internals/index.js").AxisScaleConfig>(value: any, context: import("../index.js").AxisValueFormatterContext<TScaleName>) => string) | undefined;
    dataKey?: string | undefined;
    min?: (number | Date) | undefined;
    max?: (number | Date) | undefined;
    colorMap?: import("../models/colorMapping.js").ContinuousColorConfig<number | Date> | import("../models/colorMapping.js").PiecewiseColorConfig<number | Date> | undefined;
    hideTooltip?: boolean | undefined;
    domainLimit?: "nice" | "strict" | ((min: number, max: number) => {
      min: number;
      max: number;
    }) | undefined;
    ignoreTooltip?: boolean | undefined;
    offset: number;
    scaleType: "utc";
    colorScale?: import("@mui/x-charts-vendor/d3-scale").ScaleSequential<string, string | null> | import("@mui/x-charts-vendor/d3-scale").ScaleThreshold<number, string | null>;
    triggerTooltip?: boolean;
  } | {
    axis?: "y";
    axisId?: import("../internals/index.js").AxisId;
    disableLine: boolean;
    disableTicks: boolean;
    fill?: string;
    tickLabelStyle?: ChartsTextProps["style"];
    labelStyle?: ChartsTextProps["style"];
    tickLabelInterval?: "auto" | ((value: any, index: number) => boolean);
    label?: string;
    stroke?: string;
    tickSize: number;
    classes?: Partial<import("../index.js").ChartsAxisClasses>;
    slots?: Partial<import("../internals/index.js").ChartsAxisSlots>;
    slotProps?: Partial<import("../internals/index.js").ChartsAxisSlotProps>;
    sx?: import("@mui/system").SxProps;
    tickMaxStep?: number;
    tickMinStep?: number;
    tickNumber?: number;
    tickInterval?: "auto" | ((value: any, index: number) => boolean) | any[];
    tickPlacement?: "start" | "end" | "middle" | "extremities";
    tickLabelPlacement?: "middle" | "tick";
    data?: readonly any[] | undefined;
    position?: "left" | "right" | "none";
    width: number;
    zoom: import("../internals/index.js").DefaultizedZoomOptions | undefined;
    id: import("../internals/index.js").AxisId;
    valueFormatter?: (<TScaleName extends keyof import("../internals/index.js").AxisScaleConfig>(value: any, context: import("../index.js").AxisValueFormatterContext<TScaleName>) => string) | undefined;
    dataKey?: string | undefined;
    min?: (number | Date) | undefined;
    max?: (number | Date) | undefined;
    colorMap?: import("../models/colorMapping.js").ContinuousColorConfig<number | Date> | import("../models/colorMapping.js").PiecewiseColorConfig<number | Date> | undefined;
    hideTooltip?: boolean | undefined;
    domainLimit?: "nice" | "strict" | ((min: number, max: number) => {
      min: number;
      max: number;
    }) | undefined;
    ignoreTooltip?: boolean | undefined;
    offset: number;
    scaleType: "utc";
    colorScale?: import("@mui/x-charts-vendor/d3-scale").ScaleSequential<string, string | null> | import("@mui/x-charts-vendor/d3-scale").ScaleThreshold<number, string | null>;
    triggerTooltip?: boolean;
  } | {
    axis?: "y";
    axisId?: import("../internals/index.js").AxisId;
    disableLine: boolean;
    disableTicks: boolean;
    fill?: string;
    tickLabelStyle?: ChartsTextProps["style"];
    labelStyle?: ChartsTextProps["style"];
    tickLabelInterval?: "auto" | ((value: any, index: number) => boolean);
    label?: string;
    stroke?: string;
    tickSize: number;
    classes?: Partial<import("../index.js").ChartsAxisClasses>;
    slots?: Partial<import("../internals/index.js").ChartsAxisSlots>;
    slotProps?: Partial<import("../internals/index.js").ChartsAxisSlotProps>;
    sx?: import("@mui/system").SxProps;
    tickMaxStep?: number;
    tickMinStep?: number;
    tickNumber?: number;
    tickInterval?: "auto" | ((value: any, index: number) => boolean) | any[];
    tickPlacement?: "start" | "end" | "middle" | "extremities";
    tickLabelPlacement?: "middle" | "tick";
    data?: readonly any[] | undefined;
    position?: "left" | "right" | "none";
    width: number;
    zoom: import("../internals/index.js").DefaultizedZoomOptions | undefined;
    id: import("../internals/index.js").AxisId;
    valueFormatter?: (<TScaleName extends keyof import("../internals/index.js").AxisScaleConfig>(value: any, context: import("../index.js").AxisValueFormatterContext<TScaleName>) => string) | undefined;
    dataKey?: string | undefined;
    min?: (number | Date) | undefined;
    max?: (number | Date) | undefined;
    colorMap?: import("../models/colorMapping.js").ContinuousColorConfig<number | Date> | import("../models/colorMapping.js").PiecewiseColorConfig<number | Date> | undefined;
    hideTooltip?: boolean | undefined;
    domainLimit?: "nice" | "strict" | ((min: number, max: number) => {
      min: number;
      max: number;
    }) | undefined;
    ignoreTooltip?: boolean | undefined;
    offset: number;
    scaleType: "utc";
    colorScale?: import("@mui/x-charts-vendor/d3-scale").ScaleSequential<string, string | null> | import("@mui/x-charts-vendor/d3-scale").ScaleThreshold<number, string | null>;
    triggerTooltip?: boolean;
  } | {
    axis?: "y";
    axisId?: import("../internals/index.js").AxisId;
    disableLine: boolean;
    disableTicks: boolean;
    fill?: string;
    tickLabelStyle?: ChartsTextProps["style"];
    labelStyle?: ChartsTextProps["style"];
    tickLabelInterval?: "auto" | ((value: any, index: number) => boolean);
    label?: string;
    stroke?: string;
    tickSize: number;
    classes?: Partial<import("../index.js").ChartsAxisClasses>;
    slots?: Partial<import("../internals/index.js").ChartsAxisSlots>;
    slotProps?: Partial<import("../internals/index.js").ChartsAxisSlotProps>;
    sx?: import("@mui/system").SxProps;
    tickMaxStep?: number;
    tickMinStep?: number;
    tickNumber?: number;
    tickInterval?: "auto" | ((value: any, index: number) => boolean) | any[];
    tickPlacement?: "start" | "end" | "middle" | "extremities";
    tickLabelPlacement?: "middle" | "tick";
    data?: readonly any[] | undefined;
    position?: "left" | "right" | "none";
    width: number;
    zoom: import("../internals/index.js").DefaultizedZoomOptions | undefined;
    id: import("../internals/index.js").AxisId;
    valueFormatter?: (<TScaleName extends keyof import("../internals/index.js").AxisScaleConfig>(value: any, context: import("../index.js").AxisValueFormatterContext<TScaleName>) => string) | undefined;
    dataKey?: string | undefined;
    min?: (number | Date) | undefined;
    max?: (number | Date) | undefined;
    colorMap?: import("../models/colorMapping.js").ContinuousColorConfig<number | Date> | import("../models/colorMapping.js").PiecewiseColorConfig<number | Date> | undefined;
    hideTooltip?: boolean | undefined;
    domainLimit?: "nice" | "strict" | ((min: number, max: number) => {
      min: number;
      max: number;
    }) | undefined;
    ignoreTooltip?: boolean | undefined;
    offset: number;
    scaleType: "utc";
    colorScale?: import("@mui/x-charts-vendor/d3-scale").ScaleSequential<string, string | null> | import("@mui/x-charts-vendor/d3-scale").ScaleThreshold<number, string | null>;
    triggerTooltip?: boolean;
  } | {
    axis?: "y";
    axisId?: import("../internals/index.js").AxisId;
    disableLine: boolean;
    disableTicks: boolean;
    fill?: string;
    tickLabelStyle?: ChartsTextProps["style"];
    labelStyle?: ChartsTextProps["style"];
    tickLabelInterval?: "auto" | ((value: any, index: number) => boolean);
    label?: string;
    stroke?: string;
    tickSize: number;
    classes?: Partial<import("../index.js").ChartsAxisClasses>;
    slots?: Partial<import("../internals/index.js").ChartsAxisSlots>;
    slotProps?: Partial<import("../internals/index.js").ChartsAxisSlotProps>;
    sx?: import("@mui/system").SxProps;
    tickMaxStep?: number;
    tickMinStep?: number;
    tickNumber?: number;
    tickInterval?: "auto" | ((value: any, index: number) => boolean) | any[];
    tickPlacement?: "start" | "end" | "middle" | "extremities";
    tickLabelPlacement?: "middle" | "tick";
    data?: readonly any[] | undefined;
    position?: "left" | "right" | "none";
    width: number;
    zoom: import("../internals/index.js").DefaultizedZoomOptions | undefined;
    id: import("../internals/index.js").AxisId;
    valueFormatter?: (<TScaleName extends keyof import("../internals/index.js").AxisScaleConfig>(value: any, context: import("../index.js").AxisValueFormatterContext<TScaleName>) => string) | undefined;
    dataKey?: string | undefined;
    min?: (number | Date) | undefined;
    max?: (number | Date) | undefined;
    colorMap?: import("../models/colorMapping.js").ContinuousColorConfig<number | Date> | import("../models/colorMapping.js").PiecewiseColorConfig<number | Date> | undefined;
    hideTooltip?: boolean | undefined;
    domainLimit?: "nice" | "strict" | ((min: number, max: number) => {
      min: number;
      max: number;
    }) | undefined;
    ignoreTooltip?: boolean | undefined;
    offset: number;
    scaleType: "utc";
    colorScale?: import("@mui/x-charts-vendor/d3-scale").ScaleSequential<string, string | null> | import("@mui/x-charts-vendor/d3-scale").ScaleThreshold<number | Date, string | null>;
    triggerTooltip?: boolean;
  };
  tickNumber: number;
  positionSign: number;
  skipAxisRendering: boolean;
  classes: Record<"line" | "root" | "label" | "tickContainer" | "tick" | "tickLabel", string>;
  Line: string | import("react").JSXElementConstructor<import("react").SVGAttributes<SVGPathElement>>;
  Tick: string | import("react").JSXElementConstructor<import("react").SVGAttributes<SVGPathElement>>;
  TickLabel: import("react").JSXElementConstructor<ChartsTextProps> | typeof ChartsText;
  Label: import("react").JSXElementConstructor<ChartsTextProps> | typeof ChartsText;
  axisTickLabelProps: {
    lineHeight?: number | undefined;
    ownerState: any;
    string?: number | string | undefined | undefined;
    type?: string | undefined | undefined;
    filter?: string | undefined | undefined;
    fill?: string | undefined | undefined;
    values?: string | undefined | undefined;
    mask?: string | undefined | undefined;
    clipPath?: string | undefined | undefined;
    path?: string | undefined | undefined;
    direction?: number | string | undefined | undefined;
    spacing?: number | string | undefined | undefined;
    name?: string | undefined | undefined;
    color?: string | undefined | undefined;
    className?: string | undefined | undefined;
    fontWeight?: number | string | undefined | undefined;
    cursor?: number | string | undefined | undefined;
    display?: number | string | undefined | undefined;
    fontFamily?: string | undefined | undefined;
    fontSize?: number | string | undefined | undefined;
    fontSizeAdjust?: number | string | undefined | undefined;
    fontStretch?: number | string | undefined | undefined;
    fontStyle?: number | string | undefined | undefined;
    fontVariant?: number | string | undefined | undefined;
    height?: number | string | undefined | undefined;
    imageRendering?: number | string | undefined | undefined;
    letterSpacing?: number | string | undefined | undefined;
    opacity?: number | string | undefined | undefined;
    order?: number | string | undefined | undefined;
    paintOrder?: number | string | undefined | undefined;
    pointerEvents?: number | string | undefined | undefined;
    rotate?: number | string | undefined | undefined;
    scale?: number | string | undefined | undefined;
    textRendering?: number | string | undefined | undefined;
    transform?: string | undefined | undefined;
    unicodeBidi?: number | string | undefined | undefined;
    visibility?: number | string | undefined | undefined;
    wordSpacing?: number | string | undefined | undefined;
    writingMode?: number | string | undefined | undefined;
    offset?: number | string | undefined | undefined;
    overflow?: number | string | undefined | undefined;
    textDecoration?: number | string | undefined | undefined;
    azimuth?: number | string | undefined | undefined;
    clip?: number | string | undefined | undefined;
    alignmentBaseline?: "auto" | "baseline" | "before-edge" | "text-before-edge" | "middle" | "central" | "after-edge" | "text-after-edge" | "ideographic" | "alphabetic" | "hanging" | "mathematical" | "inherit" | undefined | undefined;
    baselineShift?: number | string | undefined | undefined;
    clipRule?: number | string | undefined | undefined;
    colorInterpolation?: number | string | undefined | undefined;
    colorRendering?: number | string | undefined | undefined;
    fillOpacity?: number | string | undefined | undefined;
    fillRule?: "nonzero" | "evenodd" | "inherit" | undefined | undefined;
    floodColor?: number | string | undefined | undefined;
    floodOpacity?: number | string | undefined | undefined;
    glyphOrientationVertical?: number | string | undefined | undefined;
    lightingColor?: number | string | undefined | undefined;
    markerEnd?: string | undefined | undefined;
    markerMid?: string | undefined | undefined;
    markerStart?: string | undefined | undefined;
    shapeRendering?: number | string | undefined | undefined;
    stopColor?: string | undefined | undefined;
    stopOpacity?: number | string | undefined | undefined;
    stroke?: string | undefined | undefined;
    strokeDasharray?: string | number | undefined | undefined;
    strokeDashoffset?: string | number | undefined | undefined;
    strokeLinecap?: "butt" | "round" | "square" | "inherit" | undefined | undefined;
    strokeLinejoin?: "miter" | "round" | "bevel" | "inherit" | undefined | undefined;
    strokeMiterlimit?: number | string | undefined | undefined;
    strokeOpacity?: number | string | undefined | undefined;
    strokeWidth?: number | string | undefined | undefined;
    textAnchor?: string | undefined | undefined;
    vectorEffect?: number | string | undefined | undefined;
    key?: import("react").Key | null | undefined;
    suppressHydrationWarning?: boolean | undefined | undefined;
    id?: string | undefined | undefined;
    lang?: string | undefined | undefined;
    tabIndex?: number | undefined | undefined;
    role?: import("react").AriaRole | undefined;
    "aria-activedescendant"?: string | undefined | undefined;
    "aria-atomic"?: (boolean | "true" | "false") | undefined;
    "aria-autocomplete"?: "none" | "inline" | "list" | "both" | undefined | undefined;
    "aria-braillelabel"?: string | undefined | undefined;
    "aria-brailleroledescription"?: string | undefined | undefined;
    "aria-busy"?: (boolean | "true" | "false") | undefined;
    "aria-checked"?: boolean | "false" | "mixed" | "true" | undefined | undefined;
    "aria-colcount"?: number | undefined | undefined;
    "aria-colindex"?: number | undefined | undefined;
    "aria-colindextext"?: string | undefined | undefined;
    "aria-colspan"?: number | undefined | undefined;
    "aria-controls"?: string | undefined | undefined;
    "aria-current"?: boolean | "false" | "true" | "page" | "step" | "location" | "date" | "time" | undefined | undefined;
    "aria-describedby"?: string | undefined | undefined;
    "aria-description"?: string | undefined | undefined;
    "aria-details"?: string | undefined | undefined;
    "aria-disabled"?: (boolean | "true" | "false") | undefined;
    "aria-dropeffect"?: "none" | "copy" | "execute" | "link" | "move" | "popup" | undefined | undefined;
    "aria-errormessage"?: string | undefined | undefined;
    "aria-expanded"?: (boolean | "true" | "false") | undefined;
    "aria-flowto"?: string | undefined | undefined;
    "aria-grabbed"?: (boolean | "true" | "false") | undefined;
    "aria-haspopup"?: boolean | "false" | "true" | "menu" | "listbox" | "tree" | "grid" | "dialog" | undefined | undefined;
    "aria-hidden"?: (boolean | "true" | "false") | undefined;
    "aria-invalid"?: boolean | "false" | "true" | "grammar" | "spelling" | undefined | undefined;
    "aria-keyshortcuts"?: string | undefined | undefined;
    "aria-label"?: string | undefined | undefined;
    "aria-labelledby"?: string | undefined | undefined;
    "aria-level"?: number | undefined | undefined;
    "aria-live"?: "off" | "assertive" | "polite" | undefined | undefined;
    "aria-modal"?: (boolean | "true" | "false") | undefined;
    "aria-multiline"?: (boolean | "true" | "false") | undefined;
    "aria-multiselectable"?: (boolean | "true" | "false") | undefined;
    "aria-orientation"?: "horizontal" | "vertical" | undefined | undefined;
    "aria-owns"?: string | undefined | undefined;
    "aria-placeholder"?: string | undefined | undefined;
    "aria-posinset"?: number | undefined | undefined;
    "aria-pressed"?: boolean | "false" | "mixed" | "true" | undefined | undefined;
    "aria-readonly"?: (boolean | "true" | "false") | undefined;
    "aria-relevant"?: "additions" | "additions removals" | "additions text" | "all" | "removals" | "removals additions" | "removals text" | "text" | "text additions" | "text removals" | undefined | undefined;
    "aria-required"?: (boolean | "true" | "false") | undefined;
    "aria-roledescription"?: string | undefined | undefined;
    "aria-rowcount"?: number | undefined | undefined;
    "aria-rowindex"?: number | undefined | undefined;
    "aria-rowindextext"?: string | undefined | undefined;
    "aria-rowspan"?: number | undefined | undefined;
    "aria-selected"?: (boolean | "true" | "false") | undefined;
    "aria-setsize"?: number | undefined | undefined;
    "aria-sort"?: "none" | "ascending" | "descending" | "other" | undefined | undefined;
    "aria-valuemax"?: number | undefined | undefined;
    "aria-valuemin"?: number | undefined | undefined;
    "aria-valuenow"?: number | undefined | undefined;
    "aria-valuetext"?: string | undefined | undefined;
    children?: import("react").ReactNode;
    dangerouslySetInnerHTML?: {
      __html: string | TrustedHTML;
    } | undefined | undefined;
    onCopy?: import("react").ClipboardEventHandler<SVGTextElement> | undefined;
    onCopyCapture?: import("react").ClipboardEventHandler<SVGTextElement> | undefined;
    onCut?: import("react").ClipboardEventHandler<SVGTextElement> | undefined;
    onCutCapture?: import("react").ClipboardEventHandler<SVGTextElement> | undefined;
    onPaste?: import("react").ClipboardEventHandler<SVGTextElement> | undefined;
    onPasteCapture?: import("react").ClipboardEventHandler<SVGTextElement> | undefined;
    onCompositionEnd?: import("react").CompositionEventHandler<SVGTextElement> | undefined;
    onCompositionEndCapture?: import("react").CompositionEventHandler<SVGTextElement> | undefined;
    onCompositionStart?: import("react").CompositionEventHandler<SVGTextElement> | undefined;
    onCompositionStartCapture?: import("react").CompositionEventHandler<SVGTextElement> | undefined;
    onCompositionUpdate?: import("react").CompositionEventHandler<SVGTextElement> | undefined;
    onCompositionUpdateCapture?: import("react").CompositionEventHandler<SVGTextElement> | undefined;
    onFocus?: import("react").FocusEventHandler<SVGTextElement> | undefined;
    onFocusCapture?: import("react").FocusEventHandler<SVGTextElement> | undefined;
    onBlur?: import("react").FocusEventHandler<SVGTextElement> | undefined;
    onBlurCapture?: import("react").FocusEventHandler<SVGTextElement> | undefined;
    onChange?: import("react").FormEventHandler<SVGTextElement> | undefined;
    onChangeCapture?: import("react").FormEventHandler<SVGTextElement> | undefined;
    onBeforeInput?: import("react").InputEventHandler<SVGTextElement> | undefined;
    onBeforeInputCapture?: import("react").FormEventHandler<SVGTextElement> | undefined;
    onInput?: import("react").FormEventHandler<SVGTextElement> | undefined;
    onInputCapture?: import("react").FormEventHandler<SVGTextElement> | undefined;
    onReset?: import("react").FormEventHandler<SVGTextElement> | undefined;
    onResetCapture?: import("react").FormEventHandler<SVGTextElement> | undefined;
    onSubmit?: import("react").FormEventHandler<SVGTextElement> | undefined;
    onSubmitCapture?: import("react").FormEventHandler<SVGTextElement> | undefined;
    onInvalid?: import("react").FormEventHandler<SVGTextElement> | undefined;
    onInvalidCapture?: import("react").FormEventHandler<SVGTextElement> | undefined;
    onLoad?: import("react").ReactEventHandler<SVGTextElement> | undefined;
    onLoadCapture?: import("react").ReactEventHandler<SVGTextElement> | undefined;
    onError?: import("react").ReactEventHandler<SVGTextElement> | undefined;
    onErrorCapture?: import("react").ReactEventHandler<SVGTextElement> | undefined;
    onKeyDown?: import("react").KeyboardEventHandler<SVGTextElement> | undefined;
    onKeyDownCapture?: import("react").KeyboardEventHandler<SVGTextElement> | undefined;
    onKeyPress?: import("react").KeyboardEventHandler<SVGTextElement> | undefined;
    onKeyPressCapture?: import("react").KeyboardEventHandler<SVGTextElement> | undefined;
    onKeyUp?: import("react").KeyboardEventHandler<SVGTextElement> | undefined;
    onKeyUpCapture?: import("react").KeyboardEventHandler<SVGTextElement> | undefined;
    onAbort?: import("react").ReactEventHandler<SVGTextElement> | undefined;
    onAbortCapture?: import("react").ReactEventHandler<SVGTextElement> | undefined;
    onCanPlay?: import("react").ReactEventHandler<SVGTextElement> | undefined;
    onCanPlayCapture?: import("react").ReactEventHandler<SVGTextElement> | undefined;
    onCanPlayThrough?: import("react").ReactEventHandler<SVGTextElement> | undefined;
    onCanPlayThroughCapture?: import("react").ReactEventHandler<SVGTextElement> | undefined;
    onDurationChange?: import("react").ReactEventHandler<SVGTextElement> | undefined;
    onDurationChangeCapture?: import("react").ReactEventHandler<SVGTextElement> | undefined;
    onEmptied?: import("react").ReactEventHandler<SVGTextElement> | undefined;
    onEmptiedCapture?: import("react").ReactEventHandler<SVGTextElement> | undefined;
    onEncrypted?: import("react").ReactEventHandler<SVGTextElement> | undefined;
    onEncryptedCapture?: import("react").ReactEventHandler<SVGTextElement> | undefined;
    onEnded?: import("react").ReactEventHandler<SVGTextElement> | undefined;
    onEndedCapture?: import("react").ReactEventHandler<SVGTextElement> | undefined;
    onLoadedData?: import("react").ReactEventHandler<SVGTextElement> | undefined;
    onLoadedDataCapture?: import("react").ReactEventHandler<SVGTextElement> | undefined;
    onLoadedMetadata?: import("react").ReactEventHandler<SVGTextElement> | undefined;
    onLoadedMetadataCapture?: import("react").ReactEventHandler<SVGTextElement> | undefined;
    onLoadStart?: import("react").ReactEventHandler<SVGTextElement> | undefined;
    onLoadStartCapture?: import("react").ReactEventHandler<SVGTextElement> | undefined;
    onPause?: import("react").ReactEventHandler<SVGTextElement> | undefined;
    onPauseCapture?: import("react").ReactEventHandler<SVGTextElement> | undefined;
    onPlay?: import("react").ReactEventHandler<SVGTextElement> | undefined;
    onPlayCapture?: import("react").ReactEventHandler<SVGTextElement> | undefined;
    onPlaying?: import("react").ReactEventHandler<SVGTextElement> | undefined;
    onPlayingCapture?: import("react").ReactEventHandler<SVGTextElement> | undefined;
    onProgress?: import("react").ReactEventHandler<SVGTextElement> | undefined;
    onProgressCapture?: import("react").ReactEventHandler<SVGTextElement> | undefined;
    onRateChange?: import("react").ReactEventHandler<SVGTextElement> | undefined;
    onRateChangeCapture?: import("react").ReactEventHandler<SVGTextElement> | undefined;
    onSeeked?: import("react").ReactEventHandler<SVGTextElement> | undefined;
    onSeekedCapture?: import("react").ReactEventHandler<SVGTextElement> | undefined;
    onSeeking?: import("react").ReactEventHandler<SVGTextElement> | undefined;
    onSeekingCapture?: import("react").ReactEventHandler<SVGTextElement> | undefined;
    onStalled?: import("react").ReactEventHandler<SVGTextElement> | undefined;
    onStalledCapture?: import("react").ReactEventHandler<SVGTextElement> | undefined;
    onSuspend?: import("react").ReactEventHandler<SVGTextElement> | undefined;
    onSuspendCapture?: import("react").ReactEventHandler<SVGTextElement> | undefined;
    onTimeUpdate?: import("react").ReactEventHandler<SVGTextElement> | undefined;
    onTimeUpdateCapture?: import("react").ReactEventHandler<SVGTextElement> | undefined;
    onVolumeChange?: import("react").ReactEventHandler<SVGTextElement> | undefined;
    onVolumeChangeCapture?: import("react").ReactEventHandler<SVGTextElement> | undefined;
    onWaiting?: import("react").ReactEventHandler<SVGTextElement> | undefined;
    onWaitingCapture?: import("react").ReactEventHandler<SVGTextElement> | undefined;
    onAuxClick?: import("react").MouseEventHandler<SVGTextElement> | undefined;
    onAuxClickCapture?: import("react").MouseEventHandler<SVGTextElement> | undefined;
    onClick?: import("react").MouseEventHandler<SVGTextElement> | undefined;
    onClickCapture?: import("react").MouseEventHandler<SVGTextElement> | undefined;
    onContextMenu?: import("react").MouseEventHandler<SVGTextElement> | undefined;
    onContextMenuCapture?: import("react").MouseEventHandler<SVGTextElement> | undefined;
    onDoubleClick?: import("react").MouseEventHandler<SVGTextElement> | undefined;
    onDoubleClickCapture?: import("react").MouseEventHandler<SVGTextElement> | undefined;
    onDrag?: import("react").DragEventHandler<SVGTextElement> | undefined;
    onDragCapture?: import("react").DragEventHandler<SVGTextElement> | undefined;
    onDragEnd?: import("react").DragEventHandler<SVGTextElement> | undefined;
    onDragEndCapture?: import("react").DragEventHandler<SVGTextElement> | undefined;
    onDragEnter?: import("react").DragEventHandler<SVGTextElement> | undefined;
    onDragEnterCapture?: import("react").DragEventHandler<SVGTextElement> | undefined;
    onDragExit?: import("react").DragEventHandler<SVGTextElement> | undefined;
    onDragExitCapture?: import("react").DragEventHandler<SVGTextElement> | undefined;
    onDragLeave?: import("react").DragEventHandler<SVGTextElement> | undefined;
    onDragLeaveCapture?: import("react").DragEventHandler<SVGTextElement> | undefined;
    onDragOver?: import("react").DragEventHandler<SVGTextElement> | undefined;
    onDragOverCapture?: import("react").DragEventHandler<SVGTextElement> | undefined;
    onDragStart?: import("react").DragEventHandler<SVGTextElement> | undefined;
    onDragStartCapture?: import("react").DragEventHandler<SVGTextElement> | undefined;
    onDrop?: import("react").DragEventHandler<SVGTextElement> | undefined;
    onDropCapture?: import("react").DragEventHandler<SVGTextElement> | undefined;
    onMouseDown?: import("react").MouseEventHandler<SVGTextElement> | undefined;
    onMouseDownCapture?: import("react").MouseEventHandler<SVGTextElement> | undefined;
    onMouseEnter?: import("react").MouseEventHandler<SVGTextElement> | undefined;
    onMouseLeave?: import("react").MouseEventHandler<SVGTextElement> | undefined;
    onMouseMove?: import("react").MouseEventHandler<SVGTextElement> | undefined;
    onMouseMoveCapture?: import("react").MouseEventHandler<SVGTextElement> | undefined;
    onMouseOut?: import("react").MouseEventHandler<SVGTextElement> | undefined;
    onMouseOutCapture?: import("react").MouseEventHandler<SVGTextElement> | undefined;
    onMouseOver?: import("react").MouseEventHandler<SVGTextElement> | undefined;
    onMouseOverCapture?: import("react").MouseEventHandler<SVGTextElement> | undefined;
    onMouseUp?: import("react").MouseEventHandler<SVGTextElement> | undefined;
    onMouseUpCapture?: import("react").MouseEventHandler<SVGTextElement> | undefined;
    onSelect?: import("react").ReactEventHandler<SVGTextElement> | undefined;
    onSelectCapture?: import("react").ReactEventHandler<SVGTextElement> | undefined;
    onTouchCancel?: import("react").TouchEventHandler<SVGTextElement> | undefined;
    onTouchCancelCapture?: import("react").TouchEventHandler<SVGTextElement> | undefined;
    onTouchEnd?: import("react").TouchEventHandler<SVGTextElement> | undefined;
    onTouchEndCapture?: import("react").TouchEventHandler<SVGTextElement> | undefined;
    onTouchMove?: import("react").TouchEventHandler<SVGTextElement> | undefined;
    onTouchMoveCapture?: import("react").TouchEventHandler<SVGTextElement> | undefined;
    onTouchStart?: import("react").TouchEventHandler<SVGTextElement> | undefined;
    onTouchStartCapture?: import("react").TouchEventHandler<SVGTextElement> | undefined;
    onPointerDown?: import("react").PointerEventHandler<SVGTextElement> | undefined;
    onPointerDownCapture?: import("react").PointerEventHandler<SVGTextElement> | undefined;
    onPointerMove?: import("react").PointerEventHandler<SVGTextElement> | undefined;
    onPointerMoveCapture?: import("react").PointerEventHandler<SVGTextElement> | undefined;
    onPointerUp?: import("react").PointerEventHandler<SVGTextElement> | undefined;
    onPointerUpCapture?: import("react").PointerEventHandler<SVGTextElement> | undefined;
    onPointerCancel?: import("react").PointerEventHandler<SVGTextElement> | undefined;
    onPointerCancelCapture?: import("react").PointerEventHandler<SVGTextElement> | undefined;
    onPointerEnter?: import("react").PointerEventHandler<SVGTextElement> | undefined;
    onPointerLeave?: import("react").PointerEventHandler<SVGTextElement> | undefined;
    onPointerOver?: import("react").PointerEventHandler<SVGTextElement> | undefined;
    onPointerOverCapture?: import("react").PointerEventHandler<SVGTextElement> | undefined;
    onPointerOut?: import("react").PointerEventHandler<SVGTextElement> | undefined;
    onPointerOutCapture?: import("react").PointerEventHandler<SVGTextElement> | undefined;
    onGotPointerCapture?: import("react").PointerEventHandler<SVGTextElement> | undefined;
    onGotPointerCaptureCapture?: import("react").PointerEventHandler<SVGTextElement> | undefined;
    onLostPointerCapture?: import("react").PointerEventHandler<SVGTextElement> | undefined;
    onLostPointerCaptureCapture?: import("react").PointerEventHandler<SVGTextElement> | undefined;
    onScroll?: import("react").UIEventHandler<SVGTextElement> | undefined;
    onScrollCapture?: import("react").UIEventHandler<SVGTextElement> | undefined;
    onScrollEnd?: import("react").UIEventHandler<SVGTextElement> | undefined;
    onScrollEndCapture?: import("react").UIEventHandler<SVGTextElement> | undefined;
    onWheel?: import("react").WheelEventHandler<SVGTextElement> | undefined;
    onWheelCapture?: import("react").WheelEventHandler<SVGTextElement> | undefined;
    onAnimationStart?: import("react").AnimationEventHandler<SVGTextElement> | undefined;
    onAnimationStartCapture?: import("react").AnimationEventHandler<SVGTextElement> | undefined;
    onAnimationEnd?: import("react").AnimationEventHandler<SVGTextElement> | undefined;
    onAnimationEndCapture?: import("react").AnimationEventHandler<SVGTextElement> | undefined;
    onAnimationIteration?: import("react").AnimationEventHandler<SVGTextElement> | undefined;
    onAnimationIterationCapture?: import("react").AnimationEventHandler<SVGTextElement> | undefined;
    onToggle?: import("react").ToggleEventHandler<SVGTextElement> | undefined;
    onBeforeToggle?: import("react").ToggleEventHandler<SVGTextElement> | undefined;
    onTransitionCancel?: import("react").TransitionEventHandler<SVGTextElement> | undefined;
    onTransitionCancelCapture?: import("react").TransitionEventHandler<SVGTextElement> | undefined;
    onTransitionEnd?: import("react").TransitionEventHandler<SVGTextElement> | undefined;
    onTransitionEndCapture?: import("react").TransitionEventHandler<SVGTextElement> | undefined;
    onTransitionRun?: import("react").TransitionEventHandler<SVGTextElement> | undefined;
    onTransitionRunCapture?: import("react").TransitionEventHandler<SVGTextElement> | undefined;
    onTransitionStart?: import("react").TransitionEventHandler<SVGTextElement> | undefined;
    onTransitionStartCapture?: import("react").TransitionEventHandler<SVGTextElement> | undefined;
    min?: number | string | undefined | undefined;
    max?: number | string | undefined | undefined;
    end?: number | string | undefined | undefined;
    cx?: number | string | undefined | undefined;
    cy?: number | string | undefined | undefined;
    x?: number | string | undefined | undefined;
    y?: number | string | undefined | undefined;
    radius?: number | string | undefined | undefined;
    media?: string | undefined | undefined;
    method?: string | undefined | undefined;
    target?: string | undefined | undefined;
    crossOrigin?: "" | "anonymous" | "use-credentials" | undefined;
    accentHeight?: number | string | undefined | undefined;
    accumulate?: "none" | "sum" | undefined | undefined;
    additive?: "replace" | "sum" | undefined | undefined;
    allowReorder?: "no" | "yes" | undefined | undefined;
    alphabetic?: number | string | undefined | undefined;
    amplitude?: number | string | undefined | undefined;
    arabicForm?: "initial" | "medial" | "terminal" | "isolated" | undefined | undefined;
    ascent?: number | string | undefined | undefined;
    attributeName?: string | undefined | undefined;
    attributeType?: string | undefined | undefined;
    autoReverse?: (boolean | "true" | "false") | undefined;
    baseFrequency?: number | string | undefined | undefined;
    baseProfile?: number | string | undefined | undefined;
    bbox?: number | string | undefined | undefined;
    begin?: number | string | undefined | undefined;
    bias?: number | string | undefined | undefined;
    by?: number | string | undefined | undefined;
    calcMode?: number | string | undefined | undefined;
    capHeight?: number | string | undefined | undefined;
    clipPathUnits?: number | string | undefined | undefined;
    colorInterpolationFilters?: "auto" | "sRGB" | "linearRGB" | "inherit" | undefined | undefined;
    colorProfile?: number | string | undefined | undefined;
    contentScriptType?: number | string | undefined | undefined;
    contentStyleType?: number | string | undefined | undefined;
    d?: string | undefined | undefined;
    decelerate?: number | string | undefined | undefined;
    descent?: number | string | undefined | undefined;
    diffuseConstant?: number | string | undefined | undefined;
    divisor?: number | string | undefined | undefined;
    dur?: number | string | undefined | undefined;
    dx?: number | string | undefined | undefined;
    dy?: number | string | undefined | undefined;
    edgeMode?: number | string | undefined | undefined;
    elevation?: number | string | undefined | undefined;
    enableBackground?: number | string | undefined | undefined;
    exponent?: number | string | undefined | undefined;
    externalResourcesRequired?: (boolean | "true" | "false") | undefined;
    filterRes?: number | string | undefined | undefined;
    filterUnits?: number | string | undefined | undefined;
    focusable?: "auto" | (boolean | "true" | "false") | undefined;
    format?: number | string | undefined | undefined;
    fr?: number | string | undefined | undefined;
    from?: number | string | undefined | undefined;
    fx?: number | string | undefined | undefined;
    fy?: number | string | undefined | undefined;
    g1?: number | string | undefined | undefined;
    g2?: number | string | undefined | undefined;
    glyphName?: number | string | undefined | undefined;
    glyphOrientationHorizontal?: number | string | undefined | undefined;
    glyphRef?: number | string | undefined | undefined;
    gradientTransform?: string | undefined | undefined;
    gradientUnits?: string | undefined | undefined;
    hanging?: number | string | undefined | undefined;
    horizAdvX?: number | string | undefined | undefined;
    horizOriginX?: number | string | undefined | undefined;
    href?: string | undefined | undefined;
    ideographic?: number | string | undefined | undefined;
    in2?: number | string | undefined | undefined;
    in?: string | undefined | undefined;
    intercept?: number | string | undefined | undefined;
    k1?: number | string | undefined | undefined;
    k2?: number | string | undefined | undefined;
    k3?: number | string | undefined | undefined;
    k4?: number | string | undefined | undefined;
    k?: number | string | undefined | undefined;
    kernelMatrix?: number | string | undefined | undefined;
    kernelUnitLength?: number | string | undefined | undefined;
    kerning?: number | string | undefined | undefined;
    keyPoints?: number | string | undefined | undefined;
    keySplines?: number | string | undefined | undefined;
    keyTimes?: number | string | undefined | undefined;
    lengthAdjust?: number | string | undefined | undefined;
    limitingConeAngle?: number | string | undefined | undefined;
    local?: number | string | undefined | undefined;
    markerHeight?: number | string | undefined | undefined;
    markerUnits?: number | string | undefined | undefined;
    markerWidth?: number | string | undefined | undefined;
    maskContentUnits?: number | string | undefined | undefined;
    maskUnits?: number | string | undefined | undefined;
    mathematical?: number | string | undefined | undefined;
    mode?: number | string | undefined | undefined;
    numOctaves?: number | string | undefined | undefined;
    operator?: number | string | undefined | undefined;
    orient?: number | string | undefined | undefined;
    orientation?: number | string | undefined | undefined;
    origin?: number | string | undefined | undefined;
    overlinePosition?: number | string | undefined | undefined;
    overlineThickness?: number | string | undefined | undefined;
    panose1?: number | string | undefined | undefined;
    pathLength?: number | string | undefined | undefined;
    patternContentUnits?: string | undefined | undefined;
    patternTransform?: number | string | undefined | undefined;
    patternUnits?: string | undefined | undefined;
    points?: string | undefined | undefined;
    pointsAtX?: number | string | undefined | undefined;
    pointsAtY?: number | string | undefined | undefined;
    pointsAtZ?: number | string | undefined | undefined;
    preserveAlpha?: (boolean | "true" | "false") | undefined;
    preserveAspectRatio?: string | undefined | undefined;
    primitiveUnits?: number | string | undefined | undefined;
    r?: number | string | undefined | undefined;
    refX?: number | string | undefined | undefined;
    refY?: number | string | undefined | undefined;
    renderingIntent?: number | string | undefined | undefined;
    repeatCount?: number | string | undefined | undefined;
    repeatDur?: number | string | undefined | undefined;
    requiredExtensions?: number | string | undefined | undefined;
    requiredFeatures?: number | string | undefined | undefined;
    restart?: number | string | undefined | undefined;
    result?: string | undefined | undefined;
    rx?: number | string | undefined | undefined;
    ry?: number | string | undefined | undefined;
    seed?: number | string | undefined | undefined;
    slope?: number | string | undefined | undefined;
    specularConstant?: number | string | undefined | undefined;
    specularExponent?: number | string | undefined | undefined;
    speed?: number | string | undefined | undefined;
    spreadMethod?: string | undefined | undefined;
    startOffset?: number | string | undefined | undefined;
    stdDeviation?: number | string | undefined | undefined;
    stemh?: number | string | undefined | undefined;
    stemv?: number | string | undefined | undefined;
    stitchTiles?: number | string | undefined | undefined;
    strikethroughPosition?: number | string | undefined | undefined;
    strikethroughThickness?: number | string | undefined | undefined;
    surfaceScale?: number | string | undefined | undefined;
    systemLanguage?: number | string | undefined | undefined;
    tableValues?: number | string | undefined | undefined;
    targetX?: number | string | undefined | undefined;
    targetY?: number | string | undefined | undefined;
    textLength?: number | string | undefined | undefined;
    to?: number | string | undefined | undefined;
    u1?: number | string | undefined | undefined;
    u2?: number | string | undefined | undefined;
    underlinePosition?: number | string | undefined | undefined;
    underlineThickness?: number | string | undefined | undefined;
    unicode?: number | string | undefined | undefined;
    unicodeRange?: number | string | undefined | undefined;
    unitsPerEm?: number | string | undefined | undefined;
    vAlphabetic?: number | string | undefined | undefined;
    version?: string | undefined | undefined;
    vertAdvY?: number | string | undefined | undefined;
    vertOriginX?: number | string | undefined | undefined;
    vertOriginY?: number | string | undefined | undefined;
    vHanging?: number | string | undefined | undefined;
    vIdeographic?: number | string | undefined | undefined;
    viewBox?: string | undefined | undefined;
    viewTarget?: number | string | undefined | undefined;
    vMathematical?: number | string | undefined | undefined;
    widths?: number | string | undefined | undefined;
    x1?: number | string | undefined | undefined;
    x2?: number | string | undefined | undefined;
    xChannelSelector?: string | undefined | undefined;
    xHeight?: number | string | undefined | undefined;
    xlinkActuate?: string | undefined | undefined;
    xlinkArcrole?: string | undefined | undefined;
    xlinkHref?: string | undefined | undefined;
    xlinkRole?: string | undefined | undefined;
    xlinkShow?: string | undefined | undefined;
    xlinkTitle?: string | undefined | undefined;
    xlinkType?: string | undefined | undefined;
    xmlBase?: string | undefined | undefined;
    xmlLang?: string | undefined | undefined;
    xmlns?: string | undefined | undefined;
    xmlnsXlink?: string | undefined | undefined;
    xmlSpace?: string | undefined | undefined;
    y1?: number | string | undefined | undefined;
    y2?: number | string | undefined | undefined;
    yChannelSelector?: string | undefined | undefined;
    z?: number | string | undefined | undefined;
    zoomAndPan?: string | undefined | undefined;
    text?: string | undefined;
    style?: (import("../index.js").ChartsTextStyle & import("react").CSSProperties) | undefined;
    needsComputation?: boolean | undefined;
    ref: ((instance: any | null) => void) | null;
  };
  axisLabelProps: {
    lineHeight?: number | undefined;
    ownerState: any;
    string?: number | string | undefined | undefined;
    type?: string | undefined | undefined;
    filter?: string | undefined | undefined;
    fill?: string | undefined | undefined;
    values?: string | undefined | undefined;
    mask?: string | undefined | undefined;
    clipPath?: string | undefined | undefined;
    path?: string | undefined | undefined;
    direction?: number | string | undefined | undefined;
    spacing?: number | string | undefined | undefined;
    name?: string | undefined | undefined;
    color?: string | undefined | undefined;
    className?: string | undefined | undefined;
    fontWeight?: number | string | undefined | undefined;
    cursor?: number | string | undefined | undefined;
    display?: number | string | undefined | undefined;
    fontFamily?: string | undefined | undefined;
    fontSize?: number | string | undefined | undefined;
    fontSizeAdjust?: number | string | undefined | undefined;
    fontStretch?: number | string | undefined | undefined;
    fontStyle?: number | string | undefined | undefined;
    fontVariant?: number | string | undefined | undefined;
    height?: number | string | undefined | undefined;
    imageRendering?: number | string | undefined | undefined;
    letterSpacing?: number | string | undefined | undefined;
    opacity?: number | string | undefined | undefined;
    order?: number | string | undefined | undefined;
    paintOrder?: number | string | undefined | undefined;
    pointerEvents?: number | string | undefined | undefined;
    rotate?: number | string | undefined | undefined;
    scale?: number | string | undefined | undefined;
    textRendering?: number | string | undefined | undefined;
    transform?: string | undefined | undefined;
    unicodeBidi?: number | string | undefined | undefined;
    visibility?: number | string | undefined | undefined;
    wordSpacing?: number | string | undefined | undefined;
    writingMode?: number | string | undefined | undefined;
    offset?: number | string | undefined | undefined;
    overflow?: number | string | undefined | undefined;
    textDecoration?: number | string | undefined | undefined;
    azimuth?: number | string | undefined | undefined;
    clip?: number | string | undefined | undefined;
    alignmentBaseline?: "auto" | "baseline" | "before-edge" | "text-before-edge" | "middle" | "central" | "after-edge" | "text-after-edge" | "ideographic" | "alphabetic" | "hanging" | "mathematical" | "inherit" | undefined | undefined;
    baselineShift?: number | string | undefined | undefined;
    clipRule?: number | string | undefined | undefined;
    colorInterpolation?: number | string | undefined | undefined;
    colorRendering?: number | string | undefined | undefined;
    fillOpacity?: number | string | undefined | undefined;
    fillRule?: "nonzero" | "evenodd" | "inherit" | undefined | undefined;
    floodColor?: number | string | undefined | undefined;
    floodOpacity?: number | string | undefined | undefined;
    glyphOrientationVertical?: number | string | undefined | undefined;
    lightingColor?: number | string | undefined | undefined;
    markerEnd?: string | undefined | undefined;
    markerMid?: string | undefined | undefined;
    markerStart?: string | undefined | undefined;
    shapeRendering?: number | string | undefined | undefined;
    stopColor?: string | undefined | undefined;
    stopOpacity?: number | string | undefined | undefined;
    stroke?: string | undefined | undefined;
    strokeDasharray?: string | number | undefined | undefined;
    strokeDashoffset?: string | number | undefined | undefined;
    strokeLinecap?: "butt" | "round" | "square" | "inherit" | undefined | undefined;
    strokeLinejoin?: "miter" | "round" | "bevel" | "inherit" | undefined | undefined;
    strokeMiterlimit?: number | string | undefined | undefined;
    strokeOpacity?: number | string | undefined | undefined;
    strokeWidth?: number | string | undefined | undefined;
    textAnchor?: string | undefined | undefined;
    vectorEffect?: number | string | undefined | undefined;
    key?: import("react").Key | null | undefined;
    suppressHydrationWarning?: boolean | undefined | undefined;
    id?: string | undefined | undefined;
    lang?: string | undefined | undefined;
    tabIndex?: number | undefined | undefined;
    role?: import("react").AriaRole | undefined;
    "aria-activedescendant"?: string | undefined | undefined;
    "aria-atomic"?: (boolean | "true" | "false") | undefined;
    "aria-autocomplete"?: "none" | "inline" | "list" | "both" | undefined | undefined;
    "aria-braillelabel"?: string | undefined | undefined;
    "aria-brailleroledescription"?: string | undefined | undefined;
    "aria-busy"?: (boolean | "true" | "false") | undefined;
    "aria-checked"?: boolean | "false" | "mixed" | "true" | undefined | undefined;
    "aria-colcount"?: number | undefined | undefined;
    "aria-colindex"?: number | undefined | undefined;
    "aria-colindextext"?: string | undefined | undefined;
    "aria-colspan"?: number | undefined | undefined;
    "aria-controls"?: string | undefined | undefined;
    "aria-current"?: boolean | "false" | "true" | "page" | "step" | "location" | "date" | "time" | undefined | undefined;
    "aria-describedby"?: string | undefined | undefined;
    "aria-description"?: string | undefined | undefined;
    "aria-details"?: string | undefined | undefined;
    "aria-disabled"?: (boolean | "true" | "false") | undefined;
    "aria-dropeffect"?: "none" | "copy" | "execute" | "link" | "move" | "popup" | undefined | undefined;
    "aria-errormessage"?: string | undefined | undefined;
    "aria-expanded"?: (boolean | "true" | "false") | undefined;
    "aria-flowto"?: string | undefined | undefined;
    "aria-grabbed"?: (boolean | "true" | "false") | undefined;
    "aria-haspopup"?: boolean | "false" | "true" | "menu" | "listbox" | "tree" | "grid" | "dialog" | undefined | undefined;
    "aria-hidden"?: (boolean | "true" | "false") | undefined;
    "aria-invalid"?: boolean | "false" | "true" | "grammar" | "spelling" | undefined | undefined;
    "aria-keyshortcuts"?: string | undefined | undefined;
    "aria-label"?: string | undefined | undefined;
    "aria-labelledby"?: string | undefined | undefined;
    "aria-level"?: number | undefined | undefined;
    "aria-live"?: "off" | "assertive" | "polite" | undefined | undefined;
    "aria-modal"?: (boolean | "true" | "false") | undefined;
    "aria-multiline"?: (boolean | "true" | "false") | undefined;
    "aria-multiselectable"?: (boolean | "true" | "false") | undefined;
    "aria-orientation"?: "horizontal" | "vertical" | undefined | undefined;
    "aria-owns"?: string | undefined | undefined;
    "aria-placeholder"?: string | undefined | undefined;
    "aria-posinset"?: number | undefined | undefined;
    "aria-pressed"?: boolean | "false" | "mixed" | "true" | undefined | undefined;
    "aria-readonly"?: (boolean | "true" | "false") | undefined;
    "aria-relevant"?: "additions" | "additions removals" | "additions text" | "all" | "removals" | "removals additions" | "removals text" | "text" | "text additions" | "text removals" | undefined | undefined;
    "aria-required"?: (boolean | "true" | "false") | undefined;
    "aria-roledescription"?: string | undefined | undefined;
    "aria-rowcount"?: number | undefined | undefined;
    "aria-rowindex"?: number | undefined | undefined;
    "aria-rowindextext"?: string | undefined | undefined;
    "aria-rowspan"?: number | undefined | undefined;
    "aria-selected"?: (boolean | "true" | "false") | undefined;
    "aria-setsize"?: number | undefined | undefined;
    "aria-sort"?: "none" | "ascending" | "descending" | "other" | undefined | undefined;
    "aria-valuemax"?: number | undefined | undefined;
    "aria-valuemin"?: number | undefined | undefined;
    "aria-valuenow"?: number | undefined | undefined;
    "aria-valuetext"?: string | undefined | undefined;
    children?: import("react").ReactNode;
    dangerouslySetInnerHTML?: {
      __html: string | TrustedHTML;
    } | undefined | undefined;
    onCopy?: import("react").ClipboardEventHandler<SVGTextElement> | undefined;
    onCopyCapture?: import("react").ClipboardEventHandler<SVGTextElement> | undefined;
    onCut?: import("react").ClipboardEventHandler<SVGTextElement> | undefined;
    onCutCapture?: import("react").ClipboardEventHandler<SVGTextElement> | undefined;
    onPaste?: import("react").ClipboardEventHandler<SVGTextElement> | undefined;
    onPasteCapture?: import("react").ClipboardEventHandler<SVGTextElement> | undefined;
    onCompositionEnd?: import("react").CompositionEventHandler<SVGTextElement> | undefined;
    onCompositionEndCapture?: import("react").CompositionEventHandler<SVGTextElement> | undefined;
    onCompositionStart?: import("react").CompositionEventHandler<SVGTextElement> | undefined;
    onCompositionStartCapture?: import("react").CompositionEventHandler<SVGTextElement> | undefined;
    onCompositionUpdate?: import("react").CompositionEventHandler<SVGTextElement> | undefined;
    onCompositionUpdateCapture?: import("react").CompositionEventHandler<SVGTextElement> | undefined;
    onFocus?: import("react").FocusEventHandler<SVGTextElement> | undefined;
    onFocusCapture?: import("react").FocusEventHandler<SVGTextElement> | undefined;
    onBlur?: import("react").FocusEventHandler<SVGTextElement> | undefined;
    onBlurCapture?: import("react").FocusEventHandler<SVGTextElement> | undefined;
    onChange?: import("react").FormEventHandler<SVGTextElement> | undefined;
    onChangeCapture?: import("react").FormEventHandler<SVGTextElement> | undefined;
    onBeforeInput?: import("react").InputEventHandler<SVGTextElement> | undefined;
    onBeforeInputCapture?: import("react").FormEventHandler<SVGTextElement> | undefined;
    onInput?: import("react").FormEventHandler<SVGTextElement> | undefined;
    onInputCapture?: import("react").FormEventHandler<SVGTextElement> | undefined;
    onReset?: import("react").FormEventHandler<SVGTextElement> | undefined;
    onResetCapture?: import("react").FormEventHandler<SVGTextElement> | undefined;
    onSubmit?: import("react").FormEventHandler<SVGTextElement> | undefined;
    onSubmitCapture?: import("react").FormEventHandler<SVGTextElement> | undefined;
    onInvalid?: import("react").FormEventHandler<SVGTextElement> | undefined;
    onInvalidCapture?: import("react").FormEventHandler<SVGTextElement> | undefined;
    onLoad?: import("react").ReactEventHandler<SVGTextElement> | undefined;
    onLoadCapture?: import("react").ReactEventHandler<SVGTextElement> | undefined;
    onError?: import("react").ReactEventHandler<SVGTextElement> | undefined;
    onErrorCapture?: import("react").ReactEventHandler<SVGTextElement> | undefined;
    onKeyDown?: import("react").KeyboardEventHandler<SVGTextElement> | undefined;
    onKeyDownCapture?: import("react").KeyboardEventHandler<SVGTextElement> | undefined;
    onKeyPress?: import("react").KeyboardEventHandler<SVGTextElement> | undefined;
    onKeyPressCapture?: import("react").KeyboardEventHandler<SVGTextElement> | undefined;
    onKeyUp?: import("react").KeyboardEventHandler<SVGTextElement> | undefined;
    onKeyUpCapture?: import("react").KeyboardEventHandler<SVGTextElement> | undefined;
    onAbort?: import("react").ReactEventHandler<SVGTextElement> | undefined;
    onAbortCapture?: import("react").ReactEventHandler<SVGTextElement> | undefined;
    onCanPlay?: import("react").ReactEventHandler<SVGTextElement> | undefined;
    onCanPlayCapture?: import("react").ReactEventHandler<SVGTextElement> | undefined;
    onCanPlayThrough?: import("react").ReactEventHandler<SVGTextElement> | undefined;
    onCanPlayThroughCapture?: import("react").ReactEventHandler<SVGTextElement> | undefined;
    onDurationChange?: import("react").ReactEventHandler<SVGTextElement> | undefined;
    onDurationChangeCapture?: import("react").ReactEventHandler<SVGTextElement> | undefined;
    onEmptied?: import("react").ReactEventHandler<SVGTextElement> | undefined;
    onEmptiedCapture?: import("react").ReactEventHandler<SVGTextElement> | undefined;
    onEncrypted?: import("react").ReactEventHandler<SVGTextElement> | undefined;
    onEncryptedCapture?: import("react").ReactEventHandler<SVGTextElement> | undefined;
    onEnded?: import("react").ReactEventHandler<SVGTextElement> | undefined;
    onEndedCapture?: import("react").ReactEventHandler<SVGTextElement> | undefined;
    onLoadedData?: import("react").ReactEventHandler<SVGTextElement> | undefined;
    onLoadedDataCapture?: import("react").ReactEventHandler<SVGTextElement> | undefined;
    onLoadedMetadata?: import("react").ReactEventHandler<SVGTextElement> | undefined;
    onLoadedMetadataCapture?: import("react").ReactEventHandler<SVGTextElement> | undefined;
    onLoadStart?: import("react").ReactEventHandler<SVGTextElement> | undefined;
    onLoadStartCapture?: import("react").ReactEventHandler<SVGTextElement> | undefined;
    onPause?: import("react").ReactEventHandler<SVGTextElement> | undefined;
    onPauseCapture?: import("react").ReactEventHandler<SVGTextElement> | undefined;
    onPlay?: import("react").ReactEventHandler<SVGTextElement> | undefined;
    onPlayCapture?: import("react").ReactEventHandler<SVGTextElement> | undefined;
    onPlaying?: import("react").ReactEventHandler<SVGTextElement> | undefined;
    onPlayingCapture?: import("react").ReactEventHandler<SVGTextElement> | undefined;
    onProgress?: import("react").ReactEventHandler<SVGTextElement> | undefined;
    onProgressCapture?: import("react").ReactEventHandler<SVGTextElement> | undefined;
    onRateChange?: import("react").ReactEventHandler<SVGTextElement> | undefined;
    onRateChangeCapture?: import("react").ReactEventHandler<SVGTextElement> | undefined;
    onSeeked?: import("react").ReactEventHandler<SVGTextElement> | undefined;
    onSeekedCapture?: import("react").ReactEventHandler<SVGTextElement> | undefined;
    onSeeking?: import("react").ReactEventHandler<SVGTextElement> | undefined;
    onSeekingCapture?: import("react").ReactEventHandler<SVGTextElement> | undefined;
    onStalled?: import("react").ReactEventHandler<SVGTextElement> | undefined;
    onStalledCapture?: import("react").ReactEventHandler<SVGTextElement> | undefined;
    onSuspend?: import("react").ReactEventHandler<SVGTextElement> | undefined;
    onSuspendCapture?: import("react").ReactEventHandler<SVGTextElement> | undefined;
    onTimeUpdate?: import("react").ReactEventHandler<SVGTextElement> | undefined;
    onTimeUpdateCapture?: import("react").ReactEventHandler<SVGTextElement> | undefined;
    onVolumeChange?: import("react").ReactEventHandler<SVGTextElement> | undefined;
    onVolumeChangeCapture?: import("react").ReactEventHandler<SVGTextElement> | undefined;
    onWaiting?: import("react").ReactEventHandler<SVGTextElement> | undefined;
    onWaitingCapture?: import("react").ReactEventHandler<SVGTextElement> | undefined;
    onAuxClick?: import("react").MouseEventHandler<SVGTextElement> | undefined;
    onAuxClickCapture?: import("react").MouseEventHandler<SVGTextElement> | undefined;
    onClick?: import("react").MouseEventHandler<SVGTextElement> | undefined;
    onClickCapture?: import("react").MouseEventHandler<SVGTextElement> | undefined;
    onContextMenu?: import("react").MouseEventHandler<SVGTextElement> | undefined;
    onContextMenuCapture?: import("react").MouseEventHandler<SVGTextElement> | undefined;
    onDoubleClick?: import("react").MouseEventHandler<SVGTextElement> | undefined;
    onDoubleClickCapture?: import("react").MouseEventHandler<SVGTextElement> | undefined;
    onDrag?: import("react").DragEventHandler<SVGTextElement> | undefined;
    onDragCapture?: import("react").DragEventHandler<SVGTextElement> | undefined;
    onDragEnd?: import("react").DragEventHandler<SVGTextElement> | undefined;
    onDragEndCapture?: import("react").DragEventHandler<SVGTextElement> | undefined;
    onDragEnter?: import("react").DragEventHandler<SVGTextElement> | undefined;
    onDragEnterCapture?: import("react").DragEventHandler<SVGTextElement> | undefined;
    onDragExit?: import("react").DragEventHandler<SVGTextElement> | undefined;
    onDragExitCapture?: import("react").DragEventHandler<SVGTextElement> | undefined;
    onDragLeave?: import("react").DragEventHandler<SVGTextElement> | undefined;
    onDragLeaveCapture?: import("react").DragEventHandler<SVGTextElement> | undefined;
    onDragOver?: import("react").DragEventHandler<SVGTextElement> | undefined;
    onDragOverCapture?: import("react").DragEventHandler<SVGTextElement> | undefined;
    onDragStart?: import("react").DragEventHandler<SVGTextElement> | undefined;
    onDragStartCapture?: import("react").DragEventHandler<SVGTextElement> | undefined;
    onDrop?: import("react").DragEventHandler<SVGTextElement> | undefined;
    onDropCapture?: import("react").DragEventHandler<SVGTextElement> | undefined;
    onMouseDown?: import("react").MouseEventHandler<SVGTextElement> | undefined;
    onMouseDownCapture?: import("react").MouseEventHandler<SVGTextElement> | undefined;
    onMouseEnter?: import("react").MouseEventHandler<SVGTextElement> | undefined;
    onMouseLeave?: import("react").MouseEventHandler<SVGTextElement> | undefined;
    onMouseMove?: import("react").MouseEventHandler<SVGTextElement> | undefined;
    onMouseMoveCapture?: import("react").MouseEventHandler<SVGTextElement> | undefined;
    onMouseOut?: import("react").MouseEventHandler<SVGTextElement> | undefined;
    onMouseOutCapture?: import("react").MouseEventHandler<SVGTextElement> | undefined;
    onMouseOver?: import("react").MouseEventHandler<SVGTextElement> | undefined;
    onMouseOverCapture?: import("react").MouseEventHandler<SVGTextElement> | undefined;
    onMouseUp?: import("react").MouseEventHandler<SVGTextElement> | undefined;
    onMouseUpCapture?: import("react").MouseEventHandler<SVGTextElement> | undefined;
    onSelect?: import("react").ReactEventHandler<SVGTextElement> | undefined;
    onSelectCapture?: import("react").ReactEventHandler<SVGTextElement> | undefined;
    onTouchCancel?: import("react").TouchEventHandler<SVGTextElement> | undefined;
    onTouchCancelCapture?: import("react").TouchEventHandler<SVGTextElement> | undefined;
    onTouchEnd?: import("react").TouchEventHandler<SVGTextElement> | undefined;
    onTouchEndCapture?: import("react").TouchEventHandler<SVGTextElement> | undefined;
    onTouchMove?: import("react").TouchEventHandler<SVGTextElement> | undefined;
    onTouchMoveCapture?: import("react").TouchEventHandler<SVGTextElement> | undefined;
    onTouchStart?: import("react").TouchEventHandler<SVGTextElement> | undefined;
    onTouchStartCapture?: import("react").TouchEventHandler<SVGTextElement> | undefined;
    onPointerDown?: import("react").PointerEventHandler<SVGTextElement> | undefined;
    onPointerDownCapture?: import("react").PointerEventHandler<SVGTextElement> | undefined;
    onPointerMove?: import("react").PointerEventHandler<SVGTextElement> | undefined;
    onPointerMoveCapture?: import("react").PointerEventHandler<SVGTextElement> | undefined;
    onPointerUp?: import("react").PointerEventHandler<SVGTextElement> | undefined;
    onPointerUpCapture?: import("react").PointerEventHandler<SVGTextElement> | undefined;
    onPointerCancel?: import("react").PointerEventHandler<SVGTextElement> | undefined;
    onPointerCancelCapture?: import("react").PointerEventHandler<SVGTextElement> | undefined;
    onPointerEnter?: import("react").PointerEventHandler<SVGTextElement> | undefined;
    onPointerLeave?: import("react").PointerEventHandler<SVGTextElement> | undefined;
    onPointerOver?: import("react").PointerEventHandler<SVGTextElement> | undefined;
    onPointerOverCapture?: import("react").PointerEventHandler<SVGTextElement> | undefined;
    onPointerOut?: import("react").PointerEventHandler<SVGTextElement> | undefined;
    onPointerOutCapture?: import("react").PointerEventHandler<SVGTextElement> | undefined;
    onGotPointerCapture?: import("react").PointerEventHandler<SVGTextElement> | undefined;
    onGotPointerCaptureCapture?: import("react").PointerEventHandler<SVGTextElement> | undefined;
    onLostPointerCapture?: import("react").PointerEventHandler<SVGTextElement> | undefined;
    onLostPointerCaptureCapture?: import("react").PointerEventHandler<SVGTextElement> | undefined;
    onScroll?: import("react").UIEventHandler<SVGTextElement> | undefined;
    onScrollCapture?: import("react").UIEventHandler<SVGTextElement> | undefined;
    onScrollEnd?: import("react").UIEventHandler<SVGTextElement> | undefined;
    onScrollEndCapture?: import("react").UIEventHandler<SVGTextElement> | undefined;
    onWheel?: import("react").WheelEventHandler<SVGTextElement> | undefined;
    onWheelCapture?: import("react").WheelEventHandler<SVGTextElement> | undefined;
    onAnimationStart?: import("react").AnimationEventHandler<SVGTextElement> | undefined;
    onAnimationStartCapture?: import("react").AnimationEventHandler<SVGTextElement> | undefined;
    onAnimationEnd?: import("react").AnimationEventHandler<SVGTextElement> | undefined;
    onAnimationEndCapture?: import("react").AnimationEventHandler<SVGTextElement> | undefined;
    onAnimationIteration?: import("react").AnimationEventHandler<SVGTextElement> | undefined;
    onAnimationIterationCapture?: import("react").AnimationEventHandler<SVGTextElement> | undefined;
    onToggle?: import("react").ToggleEventHandler<SVGTextElement> | undefined;
    onBeforeToggle?: import("react").ToggleEventHandler<SVGTextElement> | undefined;
    onTransitionCancel?: import("react").TransitionEventHandler<SVGTextElement> | undefined;
    onTransitionCancelCapture?: import("react").TransitionEventHandler<SVGTextElement> | undefined;
    onTransitionEnd?: import("react").TransitionEventHandler<SVGTextElement> | undefined;
    onTransitionEndCapture?: import("react").TransitionEventHandler<SVGTextElement> | undefined;
    onTransitionRun?: import("react").TransitionEventHandler<SVGTextElement> | undefined;
    onTransitionRunCapture?: import("react").TransitionEventHandler<SVGTextElement> | undefined;
    onTransitionStart?: import("react").TransitionEventHandler<SVGTextElement> | undefined;
    onTransitionStartCapture?: import("react").TransitionEventHandler<SVGTextElement> | undefined;
    min?: number | string | undefined | undefined;
    max?: number | string | undefined | undefined;
    end?: number | string | undefined | undefined;
    cx?: number | string | undefined | undefined;
    cy?: number | string | undefined | undefined;
    x?: number | string | undefined | undefined;
    y?: number | string | undefined | undefined;
    radius?: number | string | undefined | undefined;
    media?: string | undefined | undefined;
    method?: string | undefined | undefined;
    target?: string | undefined | undefined;
    crossOrigin?: "" | "anonymous" | "use-credentials" | undefined;
    accentHeight?: number | string | undefined | undefined;
    accumulate?: "none" | "sum" | undefined | undefined;
    additive?: "replace" | "sum" | undefined | undefined;
    allowReorder?: "no" | "yes" | undefined | undefined;
    alphabetic?: number | string | undefined | undefined;
    amplitude?: number | string | undefined | undefined;
    arabicForm?: "initial" | "medial" | "terminal" | "isolated" | undefined | undefined;
    ascent?: number | string | undefined | undefined;
    attributeName?: string | undefined | undefined;
    attributeType?: string | undefined | undefined;
    autoReverse?: (boolean | "true" | "false") | undefined;
    baseFrequency?: number | string | undefined | undefined;
    baseProfile?: number | string | undefined | undefined;
    bbox?: number | string | undefined | undefined;
    begin?: number | string | undefined | undefined;
    bias?: number | string | undefined | undefined;
    by?: number | string | undefined | undefined;
    calcMode?: number | string | undefined | undefined;
    capHeight?: number | string | undefined | undefined;
    clipPathUnits?: number | string | undefined | undefined;
    colorInterpolationFilters?: "auto" | "sRGB" | "linearRGB" | "inherit" | undefined | undefined;
    colorProfile?: number | string | undefined | undefined;
    contentScriptType?: number | string | undefined | undefined;
    contentStyleType?: number | string | undefined | undefined;
    d?: string | undefined | undefined;
    decelerate?: number | string | undefined | undefined;
    descent?: number | string | undefined | undefined;
    diffuseConstant?: number | string | undefined | undefined;
    divisor?: number | string | undefined | undefined;
    dur?: number | string | undefined | undefined;
    dx?: number | string | undefined | undefined;
    dy?: number | string | undefined | undefined;
    edgeMode?: number | string | undefined | undefined;
    elevation?: number | string | undefined | undefined;
    enableBackground?: number | string | undefined | undefined;
    exponent?: number | string | undefined | undefined;
    externalResourcesRequired?: (boolean | "true" | "false") | undefined;
    filterRes?: number | string | undefined | undefined;
    filterUnits?: number | string | undefined | undefined;
    focusable?: "auto" | (boolean | "true" | "false") | undefined;
    format?: number | string | undefined | undefined;
    fr?: number | string | undefined | undefined;
    from?: number | string | undefined | undefined;
    fx?: number | string | undefined | undefined;
    fy?: number | string | undefined | undefined;
    g1?: number | string | undefined | undefined;
    g2?: number | string | undefined | undefined;
    glyphName?: number | string | undefined | undefined;
    glyphOrientationHorizontal?: number | string | undefined | undefined;
    glyphRef?: number | string | undefined | undefined;
    gradientTransform?: string | undefined | undefined;
    gradientUnits?: string | undefined | undefined;
    hanging?: number | string | undefined | undefined;
    horizAdvX?: number | string | undefined | undefined;
    horizOriginX?: number | string | undefined | undefined;
    href?: string | undefined | undefined;
    ideographic?: number | string | undefined | undefined;
    in2?: number | string | undefined | undefined;
    in?: string | undefined | undefined;
    intercept?: number | string | undefined | undefined;
    k1?: number | string | undefined | undefined;
    k2?: number | string | undefined | undefined;
    k3?: number | string | undefined | undefined;
    k4?: number | string | undefined | undefined;
    k?: number | string | undefined | undefined;
    kernelMatrix?: number | string | undefined | undefined;
    kernelUnitLength?: number | string | undefined | undefined;
    kerning?: number | string | undefined | undefined;
    keyPoints?: number | string | undefined | undefined;
    keySplines?: number | string | undefined | undefined;
    keyTimes?: number | string | undefined | undefined;
    lengthAdjust?: number | string | undefined | undefined;
    limitingConeAngle?: number | string | undefined | undefined;
    local?: number | string | undefined | undefined;
    markerHeight?: number | string | undefined | undefined;
    markerUnits?: number | string | undefined | undefined;
    markerWidth?: number | string | undefined | undefined;
    maskContentUnits?: number | string | undefined | undefined;
    maskUnits?: number | string | undefined | undefined;
    mathematical?: number | string | undefined | undefined;
    mode?: number | string | undefined | undefined;
    numOctaves?: number | string | undefined | undefined;
    operator?: number | string | undefined | undefined;
    orient?: number | string | undefined | undefined;
    orientation?: number | string | undefined | undefined;
    origin?: number | string | undefined | undefined;
    overlinePosition?: number | string | undefined | undefined;
    overlineThickness?: number | string | undefined | undefined;
    panose1?: number | string | undefined | undefined;
    pathLength?: number | string | undefined | undefined;
    patternContentUnits?: string | undefined | undefined;
    patternTransform?: number | string | undefined | undefined;
    patternUnits?: string | undefined | undefined;
    points?: string | undefined | undefined;
    pointsAtX?: number | string | undefined | undefined;
    pointsAtY?: number | string | undefined | undefined;
    pointsAtZ?: number | string | undefined | undefined;
    preserveAlpha?: (boolean | "true" | "false") | undefined;
    preserveAspectRatio?: string | undefined | undefined;
    primitiveUnits?: number | string | undefined | undefined;
    r?: number | string | undefined | undefined;
    refX?: number | string | undefined | undefined;
    refY?: number | string | undefined | undefined;
    renderingIntent?: number | string | undefined | undefined;
    repeatCount?: number | string | undefined | undefined;
    repeatDur?: number | string | undefined | undefined;
    requiredExtensions?: number | string | undefined | undefined;
    requiredFeatures?: number | string | undefined | undefined;
    restart?: number | string | undefined | undefined;
    result?: string | undefined | undefined;
    rx?: number | string | undefined | undefined;
    ry?: number | string | undefined | undefined;
    seed?: number | string | undefined | undefined;
    slope?: number | string | undefined | undefined;
    specularConstant?: number | string | undefined | undefined;
    specularExponent?: number | string | undefined | undefined;
    speed?: number | string | undefined | undefined;
    spreadMethod?: string | undefined | undefined;
    startOffset?: number | string | undefined | undefined;
    stdDeviation?: number | string | undefined | undefined;
    stemh?: number | string | undefined | undefined;
    stemv?: number | string | undefined | undefined;
    stitchTiles?: number | string | undefined | undefined;
    strikethroughPosition?: number | string | undefined | undefined;
    strikethroughThickness?: number | string | undefined | undefined;
    surfaceScale?: number | string | undefined | undefined;
    systemLanguage?: number | string | undefined | undefined;
    tableValues?: number | string | undefined | undefined;
    targetX?: number | string | undefined | undefined;
    targetY?: number | string | undefined | undefined;
    textLength?: number | string | undefined | undefined;
    to?: number | string | undefined | undefined;
    u1?: number | string | undefined | undefined;
    u2?: number | string | undefined | undefined;
    underlinePosition?: number | string | undefined | undefined;
    underlineThickness?: number | string | undefined | undefined;
    unicode?: number | string | undefined | undefined;
    unicodeRange?: number | string | undefined | undefined;
    unitsPerEm?: number | string | undefined | undefined;
    vAlphabetic?: number | string | undefined | undefined;
    version?: string | undefined | undefined;
    vertAdvY?: number | string | undefined | undefined;
    vertOriginX?: number | string | undefined | undefined;
    vertOriginY?: number | string | undefined | undefined;
    vHanging?: number | string | undefined | undefined;
    vIdeographic?: number | string | undefined | undefined;
    viewBox?: string | undefined | undefined;
    viewTarget?: number | string | undefined | undefined;
    vMathematical?: number | string | undefined | undefined;
    widths?: number | string | undefined | undefined;
    x1?: number | string | undefined | undefined;
    x2?: number | string | undefined | undefined;
    xChannelSelector?: string | undefined | undefined;
    xHeight?: number | string | undefined | undefined;
    xlinkActuate?: string | undefined | undefined;
    xlinkArcrole?: string | undefined | undefined;
    xlinkHref?: string | undefined | undefined;
    xlinkRole?: string | undefined | undefined;
    xlinkShow?: string | undefined | undefined;
    xlinkTitle?: string | undefined | undefined;
    xlinkType?: string | undefined | undefined;
    xmlBase?: string | undefined | undefined;
    xmlLang?: string | undefined | undefined;
    xmlns?: string | undefined | undefined;
    xmlnsXlink?: string | undefined | undefined;
    xmlSpace?: string | undefined | undefined;
    y1?: number | string | undefined | undefined;
    y2?: number | string | undefined | undefined;
    yChannelSelector?: string | undefined | undefined;
    z?: number | string | undefined | undefined;
    zoomAndPan?: string | undefined | undefined;
    text?: string | undefined;
    style?: (import("../index.js").ChartsTextStyle & import("react").CSSProperties) | undefined;
    needsComputation?: boolean | undefined;
    ref: ((instance: any | null) => void) | null;
  };
  lineProps: {
    strokeLinecap: "square";
    className?: string | undefined;
    style?: React.CSSProperties | undefined;
    ref: ((instance: any | null) => void) | null;
    ownerState: {} | undefined;
  };
  reverse: boolean | undefined;
  isRtl: boolean;
};