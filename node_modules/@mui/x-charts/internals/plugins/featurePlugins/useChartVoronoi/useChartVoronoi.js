"use strict";
'use client';

var _interopRequireWildcard = require("@babel/runtime/helpers/interopRequireWildcard").default;
var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault").default;
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.useChartVoronoi = void 0;
var _extends2 = _interopRequireDefault(require("@babel/runtime/helpers/extends"));
var React = _interopRequireWildcard(require("react"));
var _useEnhancedEffect = _interopRequireDefault(require("@mui/utils/useEnhancedEffect"));
var _useEventCallback = _interopRequireDefault(require("@mui/utils/useEventCallback"));
var _d3Delaunay = require("@mui/x-charts-vendor/d3-delaunay");
var _useScale = require("../../../../hooks/useScale");
var _getSVGPoint = require("../../../getSVGPoint");
var _useSelector = require("../../../store/useSelector");
var _useChartCartesianAxis = require("../useChartCartesianAxis");
var _useChartSeries = require("../../corePlugins/useChartSeries/useChartSeries.selectors");
var _useChartDimensions = require("../../corePlugins/useChartDimensions");
const useChartVoronoi = ({
  svgRef,
  params,
  store,
  instance
}) => {
  const {
    disableVoronoi,
    voronoiMaxRadius,
    onItemClick
  } = params;
  const drawingArea = (0, _useSelector.useSelector)(store, _useChartDimensions.selectorChartDrawingArea);
  const {
    axis: xAxis,
    axisIds: xAxisIds
  } = (0, _useSelector.useSelector)(store, _useChartCartesianAxis.selectorChartXAxis);
  const {
    axis: yAxis,
    axisIds: yAxisIds
  } = (0, _useSelector.useSelector)(store, _useChartCartesianAxis.selectorChartYAxis);
  const zoomIsInteracting = (0, _useSelector.useSelector)(store, _useChartCartesianAxis.selectorChartZoomIsInteracting);
  const {
    series,
    seriesOrder
  } = (0, _useSelector.useSelector)(store, _useChartSeries.selectorChartSeriesProcessed)?.scatter ?? {};
  const voronoiRef = React.useRef({});
  const delauneyRef = React.useRef(undefined);
  const lastFind = React.useRef(undefined);
  const defaultXAxisId = xAxisIds[0];
  const defaultYAxisId = yAxisIds[0];
  (0, _useEnhancedEffect.default)(() => {
    store.update(prev => prev.voronoi.isVoronoiEnabled === !disableVoronoi ? prev : (0, _extends2.default)({}, prev, {
      voronoi: {
        isVoronoiEnabled: !disableVoronoi
      }
    }));
  }, [store, disableVoronoi]);
  (0, _useEnhancedEffect.default)(() => {
    // This effect generate and store the Delaunay object that's used to map coordinate to closest point.

    if (zoomIsInteracting || seriesOrder === undefined || series === undefined || disableVoronoi) {
      // If there is no scatter chart series
      return;
    }
    voronoiRef.current = {};
    let points = [];
    seriesOrder.forEach(seriesId => {
      const {
        data,
        xAxisId,
        yAxisId
      } = series[seriesId];
      const xScale = xAxis[xAxisId ?? defaultXAxisId].scale;
      const yScale = yAxis[yAxisId ?? defaultYAxisId].scale;
      const getXPosition = (0, _useScale.getValueToPositionMapper)(xScale);
      const getYPosition = (0, _useScale.getValueToPositionMapper)(yScale);
      const seriesPoints = [];
      const seriesIndexes = [];
      for (let dataIndex = 0; dataIndex < data.length; dataIndex += 1) {
        const {
          x,
          y
        } = data[dataIndex];
        const pointX = getXPosition(x);
        const pointY = getYPosition(y);
        if (instance.isPointInside(pointX, pointY)) {
          seriesPoints.push(pointX);
          seriesPoints.push(pointY);
          seriesIndexes.push(dataIndex);
        }
      }
      voronoiRef.current[seriesId] = {
        seriesId,
        seriesIndexes,
        startIndex: points.length,
        endIndex: points.length + seriesPoints.length
      };
      points = points.concat(seriesPoints);
    });
    delauneyRef.current = new _d3Delaunay.Delaunay(points);
    lastFind.current = undefined;
  }, [zoomIsInteracting, defaultXAxisId, defaultYAxisId, series, seriesOrder, xAxis, yAxis, drawingArea, instance, disableVoronoi]);
  React.useEffect(() => {
    if (svgRef.current === null || disableVoronoi) {
      return undefined;
    }
    const element = svgRef.current;
    function getClosestPoint(event) {
      // Get mouse coordinate in global SVG space
      const svgPoint = (0, _getSVGPoint.getSVGPoint)(element, event);
      if (!instance.isPointInside(svgPoint.x, svgPoint.y)) {
        lastFind.current = undefined;
        return 'outside-chart';
      }
      if (!delauneyRef.current) {
        return 'no-point-found';
      }
      const closestPointIndex = delauneyRef.current.find(svgPoint.x, svgPoint.y, lastFind.current);
      if (closestPointIndex === undefined) {
        return 'no-point-found';
      }
      lastFind.current = closestPointIndex;
      const closestSeries = Object.values(voronoiRef.current).find(value => {
        return 2 * closestPointIndex >= value.startIndex && 2 * closestPointIndex < value.endIndex;
      });
      if (closestSeries === undefined) {
        return 'no-point-found';
      }

      // The point index in the series with id=closestSeries.seriesId.
      const seriesPointIndex = (2 * closestPointIndex - voronoiRef.current[closestSeries.seriesId].startIndex) / 2;
      const dataIndex = voronoiRef.current[closestSeries.seriesId].seriesIndexes[seriesPointIndex];
      if (voronoiMaxRadius !== undefined) {
        const pointX = delauneyRef.current.points[2 * closestPointIndex];
        const pointY = delauneyRef.current.points[2 * closestPointIndex + 1];
        const dist2 = (pointX - svgPoint.x) ** 2 + (pointY - svgPoint.y) ** 2;
        if (dist2 > voronoiMaxRadius ** 2) {
          // The closest point is too far to be considered.
          return 'outside-voronoi-max-radius';
        }
      }
      return {
        seriesId: closestSeries.seriesId,
        dataIndex
      };
    }

    // Clean the interaction when the mouse leaves the chart.
    const moveEndHandler = instance.addInteractionListener('moveEnd', event => {
      if (!event.detail.activeGestures.pan) {
        instance.cleanInteraction?.();
        instance.clearHighlight?.();
      }
    });
    const panEndHandler = instance.addInteractionListener('panEnd', event => {
      if (!event.detail.activeGestures.move) {
        instance.cleanInteraction?.();
        instance.clearHighlight?.();
      }
    });
    const pressEndHandler = instance.addInteractionListener('quickPressEnd', event => {
      if (!event.detail.activeGestures.move && !event.detail.activeGestures.pan) {
        instance.cleanInteraction?.();
        instance.clearHighlight?.();
      }
    });
    const gestureHandler = event => {
      const closestPoint = getClosestPoint(event.detail.srcEvent);
      if (closestPoint === 'outside-chart') {
        instance.cleanInteraction?.();
        instance.clearHighlight?.();
        return;
      }
      if (closestPoint === 'outside-voronoi-max-radius' || closestPoint === 'no-point-found') {
        instance.removeItemInteraction?.();
        instance.clearHighlight?.();
        return;
      }
      const {
        seriesId,
        dataIndex
      } = closestPoint;
      instance.setItemInteraction?.({
        type: 'scatter',
        seriesId,
        dataIndex
      });
      instance.setHighlight?.({
        seriesId,
        dataIndex
      });
    };
    const tapHandler = instance.addInteractionListener('tap', event => {
      const closestPoint = getClosestPoint(event.detail.srcEvent);
      if (typeof closestPoint !== 'string' && onItemClick) {
        const {
          seriesId,
          dataIndex
        } = closestPoint;
        onItemClick(event.detail.srcEvent, {
          type: 'scatter',
          seriesId,
          dataIndex
        });
      }
    });
    const moveHandler = instance.addInteractionListener('move', gestureHandler);
    const panHandler = instance.addInteractionListener('pan', gestureHandler);
    const pressHandler = instance.addInteractionListener('quickPress', gestureHandler);
    return () => {
      tapHandler.cleanup();
      moveHandler.cleanup();
      moveEndHandler.cleanup();
      panHandler.cleanup();
      panEndHandler.cleanup();
      pressHandler.cleanup();
      pressEndHandler.cleanup();
    };
  }, [svgRef, yAxis, xAxis, voronoiMaxRadius, onItemClick, disableVoronoi, drawingArea, instance]);

  // Instance implementation
  const enableVoronoiCallback = (0, _useEventCallback.default)(() => {
    store.update(prev => (0, _extends2.default)({}, prev, {
      voronoi: (0, _extends2.default)({}, prev.voronoi, {
        isVoronoiEnabled: true
      })
    }));
  });
  const disableVoronoiCallback = (0, _useEventCallback.default)(() => {
    store.update(prev => (0, _extends2.default)({}, prev, {
      voronoi: (0, _extends2.default)({}, prev.voronoi, {
        isVoronoiEnabled: false
      })
    }));
  });
  return {
    instance: {
      enableVoronoi: enableVoronoiCallback,
      disableVoronoi: disableVoronoiCallback
    }
  };
};
exports.useChartVoronoi = useChartVoronoi;
useChartVoronoi.getDefaultizedParams = ({
  params
}) => (0, _extends2.default)({}, params, {
  disableVoronoi: params.disableVoronoi ?? !params.series.some(item => item.type === 'scatter')
});
useChartVoronoi.getInitialState = params => ({
  voronoi: {
    isVoronoiEnabled: !params.disableVoronoi
  }
});
useChartVoronoi.params = {
  disableVoronoi: true,
  voronoiMaxRadius: true,
  onItemClick: true
};